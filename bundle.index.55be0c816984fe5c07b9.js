/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./local-config.json":
/*!***************************!*\
  !*** ./local-config.json ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"host":"instantrelay.rainway.com","port":"443","input":true,"logVideoStats":false,"logTransportStats":false,"rainwayLogsInConsole":true,"minimumLogLevel":1,"apiKey":"..."}');

/***/ }),

/***/ "./node_modules/rainway-sdk/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/rainway-sdk/dist/index.js ***!
  \************************************************/
/***/ ((module) => {

!function(A,I){ true?module.exports=I():0}(self,(function(){return(()=>{var A={120:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.BebopView=I.BebopRuntimeError=void 0;const B="0123456789abcdef",e=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],Q=new Uint8Array(0),C=[];for(const A of B)for(const I of B)C.push(A+I);"undefined"==typeof TextDecoder&&(g.g.TextDecoder=g(700).TextDecoder);class i extends Error{constructor(A){super(A),this.name="BebopRuntimeError"}}I.BebopRuntimeError=i;class t{constructor(){this.minimumTextDecoderLength=300,this.buffer=t.writeBuffer,this.view=t.writeBufferView,this.index=0,this.length=0}static getInstance(){return t.instance||(t.instance=new t),t.instance}startReading(A){this.buffer=A,this.view=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),this.index=0,this.length=A.length}startWriting(){this.buffer=t.writeBuffer,this.view=t.writeBufferView,this.index=0,this.length=0}guaranteeBufferLength(A){if(A>this.buffer.length){const I=new Uint8Array(A<<1);I.set(this.buffer),this.buffer=I,this.view=new DataView(I.buffer)}}growBy(A){this.length+=A,this.guaranteeBufferLength(this.length)}skip(A){this.index+=A}toArray(){return this.buffer.subarray(0,this.length)}readByte(){return this.buffer[this.index++]}readUint16(){const A=this.view.getUint16(this.index,!0);return this.index+=2,A}readInt16(){const A=this.view.getInt16(this.index,!0);return this.index+=2,A}readUint32(){const A=this.view.getUint32(this.index,!0);return this.index+=4,A}readInt32(){const A=this.view.getInt32(this.index,!0);return this.index+=4,A}readUint64(){const A=this.view.getBigUint64(this.index,!0);return this.index+=8,A}readInt64(){const A=this.view.getBigInt64(this.index,!0);return this.index+=8,A}readFloat32(){const A=this.view.getFloat32(this.index,!0);return this.index+=4,A}readFloat64(){const A=this.view.getFloat64(this.index,!0);return this.index+=8,A}writeByte(A){const I=this.length;this.growBy(1),this.buffer[I]=A}writeUint16(A){const I=this.length;this.growBy(2),this.view.setUint16(I,A,!0)}writeInt16(A){const I=this.length;this.growBy(2),this.view.setInt16(I,A,!0)}writeUint32(A){const I=this.length;this.growBy(4),this.view.setUint32(I,A,!0)}writeInt32(A){const I=this.length;this.growBy(4),this.view.setInt32(I,A,!0)}writeUint64(A){const I=this.length;this.growBy(8),this.view.setBigUint64(I,A,!0)}writeInt64(A){const I=this.length;this.growBy(8),this.view.setBigInt64(I,A,!0)}writeFloat32(A){const I=this.length;this.growBy(4),this.view.setFloat32(I,A,!0)}writeFloat64(A){const I=this.length;this.growBy(8),this.view.setFloat64(I,A,!0)}readBytes(){const A=this.readUint32();if(0===A)return Q;const I=this.index,g=I+A;return this.index=g,this.buffer.subarray(I,g)}writeBytes(A){const I=A.length;if(this.writeUint32(I),0===I)return;const g=this.length;this.growBy(I),this.buffer.set(A,g)}readString(){const A=this.readUint32();if(0===A)return"";if(A>=this.minimumTextDecoderLength)return t.textDecoder.decode(this.buffer.subarray(this.index,this.index+=A));const I=this.index+A;let g,B="";for(;this.index<I;){const A=this.buffer[this.index++];if(A<192)g=A;else{const I=this.buffer[this.index++];if(A<224)g=(31&A)<<6|63&I;else{const B=this.buffer[this.index++];g=A<240?(15&A)<<12|(63&I)<<6|63&B:(7&A)<<18|(63&I)<<12|(63&B)<<6|63&this.buffer[this.index++]}}g<65536?B+=String.fromCharCode(g):(g-=65536,B+=String.fromCharCode(55296+(g>>10),56320+(1023&g)))}return this.index=I,B}writeString(A){const I=A.length;if(0===I)return void this.writeUint32(0);const g=4+3*I;this.guaranteeBufferLength(this.length+g);let B=this.length+4;const e=B;let Q;for(let g=0;g<I;g++){const e=A.charCodeAt(g);Q=g+1===I||e<55296||e>=56320?e:(e<<10)+A.charCodeAt(++g)+-56613888,Q<128?this.buffer[B++]=Q:(Q<2048?this.buffer[B++]=Q>>6&31|192:(Q<65536?this.buffer[B++]=Q>>12&15|224:(this.buffer[B++]=Q>>18&7|240,this.buffer[B++]=Q>>12&63|128),this.buffer[B++]=Q>>6&63|128),this.buffer[B++]=63&Q|128)}const C=B-e;this.view.setUint32(this.length,C,!0),this.length+=4+C}readGuid(){const A=C,I=this.buffer,g=this.index,B="-";var e=A[I[g+3]];return e+=A[I[g+2]],e+=A[I[g+1]],e+=A[I[g]],e+=B,e+=A[I[g+5]],e+=A[I[g+4]],e+=B,e+=A[I[g+7]],e+=A[I[g+6]],e+=B,e+=A[I[g+8]],e+=A[I[g+9]],e+=B,e+=A[I[g+10]],e+=A[I[g+11]],e+=A[I[g+12]],e+=A[I[g+13]],e+=A[I[g+14]],e+=A[I[g+15]],this.index+=16,e}writeGuid(A){const I=this.view,g=this.length;this.growBy(16);var B=0,Q=0;Q=(Q=(Q=(Q=(Q=(Q=(Q=(Q=Q<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)],B+=45===A.charCodeAt(B),I.setUint32(g,Q,!0),Q=(Q=(Q=(Q=Q<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)],B+=45===A.charCodeAt(B),I.setUint16(g+4,Q,!0),Q=(Q=(Q=(Q=Q<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)],B+=45===A.charCodeAt(B),I.setUint16(g+6,Q,!0),Q=(Q=(Q=(Q=Q<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)],B+=45===A.charCodeAt(B),Q=(Q=(Q=(Q=Q<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)],I.setUint32(g+8,Q,!1),Q=(Q=(Q=(Q=(Q=(Q=(Q=(Q=Q<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)])<<4|e[A.charCodeAt(B++)],I.setUint32(g+12,Q,!1)}readDate(){const A=this.readUint32(),I=1073741823&this.readUint32();return new Date(429496.7296*I+1e-4*A-621355968e5)}writeDate(A){const I=A.getTime()+621355968e5,g=I%429496.7296*1e4|0,B=I/429496.7296|1073741824;this.writeUint32(g),this.writeUint32(B)}writeEnum(A){var I=A;if(void 0===I)throw new Error("Couldn't convert enum value");this.writeUint32(I)}reserveMessageLength(){const A=this.length;return this.growBy(4),A}fillMessageLength(A,I){this.view.setUint32(A,I,!0)}readMessageLength(){const A=this.view.getUint32(this.index,!0);return this.index+=4,A}}I.BebopView=t,t.textDecoder=new TextDecoder,t.writeBuffer=new Uint8Array(256),t.writeBufferView=new DataView(t.writeBuffer.buffer)},290:function(A,I,g){"use strict";var B=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.getOrganizationInfo=void 0;const e=g(464),Q=g(994);I.getOrganizationInfo=function(A){return B(this,void 0,void 0,(function*(){try{const I=yield fetch("https://hub-api.rainway.com/v1/prod/keys/validate",{headers:{Authorization:`Bearer ${A}`}}),g=yield I.json();return{universeFlag:g.universe,organizationId:g.org_id}}catch(A){throw e.RainwayLogging.error(String(A)),new Q.RainwayError("The Rainway API key is invalid.")}}))}},434:(A,I)=>{"use strict";var g,B;Object.defineProperty(I,"__esModule",{value:!0}),I.AudioReadyState=I.VideoReadyState=void 0,(B=I.VideoReadyState||(I.VideoReadyState={}))[B.Detached=0]="Detached",B[B.Initializing=1]="Initializing",B[B.WaitingForKeyframe=2]="WaitingForKeyframe",B[B.Playing=3]="Playing",B[B.Paused=4]="Paused",B[B.Disposed=5]="Disposed",(g=I.AudioReadyState||(I.AudioReadyState={}))[g.Detached=0]="Detached",g[g.Uninitialized=1]="Uninitialized",g[g.Initializing=2]="Initializing",g[g.Playing=3]="Playing",g[g.Paused=4]="Paused"},528:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.isDesktopSafari=void 0,I.isDesktopSafari=/Macintosh;.*Safari/.test(navigator.userAgent)&&!/Chrome|Android/i.test(navigator.userAgent)},987:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.reassemble=I.eachChunk=void 0;let g=0;I.eachChunk=function(A,I,B=5e4){const e=Math.ceil(A.length/B),Q=++g;for(let g=0;g<e;g++){const C=g*B,i=Math.min((g+1)*B,A.length);I({chunksInGroup:e,groupId:Q,index:g,data:A.slice(C,i)})}},I.reassemble=function(A){let I=0;const g=A.chunks.length;for(let B=0;B<g;B++)I+=A.chunks[B].byteLength;const B=new Uint8Array(I);let e=0;for(let I=0;I<g;I++){const g=A.chunks[I];B.set(g,e),e+=g.byteLength}return B}},24:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.Action=void 0,I.Action=class{constructor(){this.handlers=[]}addHandler(A){this.handlers.push(A)}disposeHandlers(){this.handlers.forEach((A=>{this.removeHandler(A)}))}removeHandler(A){this.handlers=this.handlers.filter((I=>I!==A))}invoke(A){for(let I=0;I<this.handlers.length;I++)this.handlers[I](A)}}},198:(A,I)=>{"use strict";function g(A){if(0===A.length)return NaN;let I=0;for(const g of A)I+=g;return I/A.length}Object.defineProperty(I,"__esModule",{value:!0}),I.meanOrZero=I.mean=I.standardDeviation=I.interquartileRange=I.median=I.WindowTrack=void 0,I.WindowTrack=class{constructor(A,I){this.sizeMs=A,this.averageOperation=I,this.cachedAverage=void 0,this.buffer=[]}get values(){return this.trim(),this.buffer.map((A=>A.value))}get measurements(){return this.trim(),this.buffer}trim(){const A=performance.now(),I=this.buffer.findIndex((I=>I.time>A-this.sizeMs));I>0?(this.buffer.splice(0,I),this.cachedAverage=void 0):-1===I&&(this.buffer.splice(0,this.buffer.length),this.cachedAverage=void 0)}feed(A){const I=performance.now();this.buffer.push({time:I,value:A}),this.buffer.length>=500&&this.trim(),this.cachedAverage=void 0}average(){if(this.trim(),this.cachedAverage)return this.cachedAverage;const A=this.buffer.map((A=>A.value));return this.cachedAverage=this.averageOperation(A)}},I.median=function(A){return 0===A.length?NaN:(A.sort(((A,I)=>A-I)),A[Math.floor(A.length/2)])},I.interquartileRange=function(A){if(0===A.length)return NaN;A.sort(((A,I)=>A-I));const I=Math.floor(.25*A.length);return A[Math.floor(.75*A.length)]-A[I]},I.standardDeviation=function(A){if(0===A.length)return NaN;const I=A.length,g=A.reduce(((A,I)=>A+I),0)/I;return Math.sqrt(A.map((A=>Math.pow(A-g,2))).reduce(((A,I)=>A+I),0)/I)},I.mean=g,I.meanOrZero=function(A){return 0===A.length?0:g(A)}},904:function(A,I,g){"use strict";var B=this&&this.__createBinding||(Object.create?function(A,I,g,B){void 0===B&&(B=g),Object.defineProperty(A,B,{enumerable:!0,get:function(){return I[g]}})}:function(A,I,g,B){void 0===B&&(B=g),A[B]=I[g]}),e=this&&this.__exportStar||function(A,I){for(var g in A)"default"===g||Object.prototype.hasOwnProperty.call(I,g)||B(I,A,g)};Object.defineProperty(I,"__esModule",{value:!0}),e(g(162),I)},162:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.StreamRequest=I.ErrorResponse=I.ClientCapabilities=I.CodecPackResponse=I.CodecPackRequest=I.DeviceInfo=I.InputLevel=I.VideoConfig=I.AudioConfig=I.LogicError=I.VideoContainer=I.AudioContainer=I.AudioCodec=I.AudioChannels=I.NetworkProtocol=I.OperatingSystem=I.FormFactor=I.VideoCodec=I.Vendor=I.VideoCodecType=I.InputBody=I.PenAbsolute=I.TouchesAbsolute=I.LogicalInput=I.KeyboardInput=I.MouseScroll=I.MouseClick=I.MouseRelative=I.MouseAbsolute=I.GamepadRumble=I.GamepadReport=I.TouchAbsolute=I.PenFlags=I.PenMask=I.TouchMask=I.TouchPenPointerInfo=I.WindowsPointerFlags=I.VirtualKey=I.KeyboardAction=I.ScrollAxis=I.MouseButton=I.ButtonAction=I.XInputButtons=I.ArbitraryDatagram=I.MediaDatagram=I.LogicDatagram=I.InputDatagram=I.Chunk=I.RainwayHeader=I.Guid=void 0,I.InterRelayMessage=I.TransferableRelayDatagram=I.RelayHeartbeat=I.LedgerChunk=I.LedgerRequest=I.PeerLeftAnnouncement=I.NewPeerAnnouncement=I.KeyExchangeDone=I.KeyExchangeResponse=I.KeyExchangeRequest=I.NewRelayAnnouncement=I.RelayDatagram=I.RelayMessage=I.RelayPeerInformation=I.RelayConnectionRejected=I.RelayConnectionAccepted=I.RelayConnectionRequest=I.RelayInitConnectionRequest=I.RelayAlert=I.RelayHello=I.PeerLedgerEntry=I.MulticastDatagram=I.Relay=I.RelayAlertDescription=I.PeerInformationType=I.PeerTransportType=I.RelayAlertLevel=I.PeerHello=I.MediaBody=I.MediaChunk=I.AudioData=I.PointerData=I.VideoData=I.AudioDataType=I.VideoDataType=I.LogicBody=I.PauseStream=I.JoinStream=I.VideoBitrateRequest=I.KeyframeRequest=I.StreamStopping=I.LeaveStream=I.StreamStarting=void 0;const B=g(120);var e,Q,C,i,t,E,o,a,n,s,r,d,h,c,D,w,y,u,S,F,l,R,G,k,N,U,m;I.Guid={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeGuid(A.value)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readGuid(),{value:I}}},I.RainwayHeader={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeUint32(A.magicNumber),I.writeUint32(A.syncKey),I.writeGuid(A.sourceHostname),I.writeGuid(A.destinationHostname)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readUint32(),g=A.readUint32(),B=A.readGuid(),e=A.readGuid(),{magicNumber:I,syncKey:g,sourceHostname:B,destinationHostname:e}}},I.Chunk={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeUint16(A.groupId),I.writeByte(A.index),I.writeByte(A.chunksInGroup),I.writeBytes(A.data)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readUint16(),g=A.readByte(),B=A.readByte(),e=A.readBytes(),{groupId:I,index:g,chunksInGroup:B,data:e}}},I.InputDatagram={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.RainwayHeader.encodeInto(A.header,g),I.InputBody.encodeInto(A.body,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B;return g=I.RainwayHeader.readFrom(A),B=I.InputBody.readFrom(A),{header:g,body:B}}},I.LogicDatagram={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.RainwayHeader.encodeInto(A.header,g),I.LogicBody.encodeInto(A.body,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B;return g=I.RainwayHeader.readFrom(A),B=I.LogicBody.readFrom(A),{header:g,body:B}}},I.MediaDatagram={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.RainwayHeader.encodeInto(A.header,g),I.MediaBody.encodeInto(A.body,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B;return g=I.RainwayHeader.readFrom(A),B=I.MediaBody.readFrom(A),{header:g,body:B}}},I.ArbitraryDatagram={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.RainwayHeader.encodeInto(A.header,g),I.Chunk.encodeInto(A.body,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B;return g=I.RainwayHeader.readFrom(A),B=I.Chunk.readFrom(A),{header:g,body:B}}},(m=I.XInputButtons||(I.XInputButtons={}))[m.None=0]="None",m[m.DpadUp=1]="DpadUp",m[m.DpadDown=2]="DpadDown",m[m.DpadLeft=4]="DpadLeft",m[m.DpadRight=8]="DpadRight",m[m.Start=16]="Start",m[m.Back=32]="Back",m[m.LeftStick=64]="LeftStick",m[m.RightStick=128]="RightStick",m[m.LeftBumper=256]="LeftBumper",m[m.RightBumper=512]="RightBumper",m[m.Guide=1024]="Guide",m[m.A=4096]="A",m[m.B=8192]="B",m[m.X=16384]="X",m[m.Y=32768]="Y",(U=I.ButtonAction||(I.ButtonAction={}))[U.ButtonDown=0]="ButtonDown",U[U.ButtonUp=1]="ButtonUp",(N=I.MouseButton||(I.MouseButton={}))[N.Left=0]="Left",N[N.Right=1]="Right",N[N.Middle=2]="Middle",N[N.X1=3]="X1",N[N.X2=4]="X2",(k=I.ScrollAxis||(I.ScrollAxis={}))[k.Horizontal=0]="Horizontal",k[k.Vertical=1]="Vertical",(G=I.KeyboardAction||(I.KeyboardAction={}))[G.KeyDown=0]="KeyDown",G[G.KeyUp=1]="KeyUp",(R=I.VirtualKey||(I.VirtualKey={}))[R.None=0]="None",R[R.Cancel=1]="Cancel",R[R.Back=2]="Back",R[R.Tab=3]="Tab",R[R.LineFeed=4]="LineFeed",R[R.Clear=5]="Clear",R[R.Enter=6]="Enter",R[R.Pause=7]="Pause",R[R.CapsLock=8]="CapsLock",R[R.HangulMode=9]="HangulMode",R[R.JunjaMode=10]="JunjaMode",R[R.FinalMode=11]="FinalMode",R[R.HanjaMode=12]="HanjaMode",R[R.Escape=13]="Escape",R[R.ImeConvert=14]="ImeConvert",R[R.ImeNonConvert=15]="ImeNonConvert",R[R.ImeAccept=16]="ImeAccept",R[R.ImeModeChange=17]="ImeModeChange",R[R.Space=18]="Space",R[R.PageUp=19]="PageUp",R[R.PageDown=20]="PageDown",R[R.End=21]="End",R[R.Home=22]="Home",R[R.Left=23]="Left",R[R.Up=24]="Up",R[R.Right=25]="Right",R[R.Down=26]="Down",R[R.Select=27]="Select",R[R.Print=28]="Print",R[R.Execute=29]="Execute",R[R.PrintScreen=30]="PrintScreen",R[R.Insert=31]="Insert",R[R.Delete=32]="Delete",R[R.Help=33]="Help",R[R.D0=34]="D0",R[R.D1=35]="D1",R[R.D2=36]="D2",R[R.D3=37]="D3",R[R.D4=38]="D4",R[R.D5=39]="D5",R[R.D6=40]="D6",R[R.D7=41]="D7",R[R.D8=42]="D8",R[R.D9=43]="D9",R[R.A=44]="A",R[R.B=45]="B",R[R.C=46]="C",R[R.D=47]="D",R[R.E=48]="E",R[R.F=49]="F",R[R.G=50]="G",R[R.H=51]="H",R[R.I=52]="I",R[R.J=53]="J",R[R.K=54]="K",R[R.L=55]="L",R[R.M=56]="M",R[R.N=57]="N",R[R.O=58]="O",R[R.P=59]="P",R[R.Q=60]="Q",R[R.R=61]="R",R[R.S=62]="S",R[R.T=63]="T",R[R.U=64]="U",R[R.V=65]="V",R[R.W=66]="W",R[R.X=67]="X",R[R.Y=68]="Y",R[R.Z=69]="Z",R[R.LWin=70]="LWin",R[R.RWin=71]="RWin",R[R.Apps=72]="Apps",R[R.Sleep=73]="Sleep",R[R.NumPad0=74]="NumPad0",R[R.NumPad1=75]="NumPad1",R[R.NumPad2=76]="NumPad2",R[R.NumPad3=77]="NumPad3",R[R.NumPad4=78]="NumPad4",R[R.NumPad5=79]="NumPad5",R[R.NumPad6=80]="NumPad6",R[R.NumPad7=81]="NumPad7",R[R.NumPad8=82]="NumPad8",R[R.NumPad9=83]="NumPad9",R[R.Multiply=84]="Multiply",R[R.Add=85]="Add",R[R.Separator=86]="Separator",R[R.Subtract=87]="Subtract",R[R.Decimal=88]="Decimal",R[R.Divide=89]="Divide",R[R.F1=90]="F1",R[R.F2=91]="F2",R[R.F3=92]="F3",R[R.F4=93]="F4",R[R.F5=94]="F5",R[R.F6=95]="F6",R[R.F7=96]="F7",R[R.F8=97]="F8",R[R.F9=98]="F9",R[R.F10=99]="F10",R[R.F11=100]="F11",R[R.F12=101]="F12",R[R.F13=102]="F13",R[R.F14=103]="F14",R[R.F15=104]="F15",R[R.F16=105]="F16",R[R.F17=106]="F17",R[R.F18=107]="F18",R[R.F19=108]="F19",R[R.F20=109]="F20",R[R.F21=110]="F21",R[R.F22=111]="F22",R[R.F23=112]="F23",R[R.F24=113]="F24",R[R.NumLock=114]="NumLock",R[R.Scroll=115]="Scroll",R[R.LeftShift=116]="LeftShift",R[R.RightShift=117]="RightShift",R[R.LeftCtrl=118]="LeftCtrl",R[R.RightCtrl=119]="RightCtrl",R[R.LeftAlt=120]="LeftAlt",R[R.RightAlt=121]="RightAlt",R[R.BrowserBack=122]="BrowserBack",R[R.BrowserForward=123]="BrowserForward",R[R.BrowserRefresh=124]="BrowserRefresh",R[R.BrowserStop=125]="BrowserStop",R[R.BrowserSearch=126]="BrowserSearch",R[R.BrowserFavorites=127]="BrowserFavorites",R[R.BrowserHome=128]="BrowserHome",R[R.VolumeMute=129]="VolumeMute",R[R.VolumeDown=130]="VolumeDown",R[R.VolumeUp=131]="VolumeUp",R[R.MediaNextTrack=132]="MediaNextTrack",R[R.MediaPreviousTrack=133]="MediaPreviousTrack",R[R.MediaStop=134]="MediaStop",R[R.MediaPlayPause=135]="MediaPlayPause",R[R.LaunchMail=136]="LaunchMail",R[R.SelectMedia=137]="SelectMedia",R[R.LaunchApplication1=138]="LaunchApplication1",R[R.LaunchApplication2=139]="LaunchApplication2",R[R.Oem1=140]="Oem1",R[R.OemPlus=141]="OemPlus",R[R.OemComma=142]="OemComma",R[R.OemMinus=143]="OemMinus",R[R.OemPeriod=144]="OemPeriod",R[R.Oem2=145]="Oem2",R[R.Oem3=146]="Oem3",R[R.AbntC1=147]="AbntC1",R[R.AbntC2=148]="AbntC2",R[R.Oem4=149]="Oem4",R[R.Oem5=150]="Oem5",R[R.Oem6=151]="Oem6",R[R.Oem7=152]="Oem7",R[R.Oem8=153]="Oem8",R[R.Oem102=154]="Oem102",R[R.ImeProcessed=155]="ImeProcessed",R[R.System=156]="System",R[R.OemAttn=157]="OemAttn",R[R.OemFinish=158]="OemFinish",R[R.OemCopy=159]="OemCopy",R[R.OemAuto=160]="OemAuto",R[R.OemEnlw=161]="OemEnlw",R[R.OemBackTab=162]="OemBackTab",R[R.Attn=163]="Attn",R[R.CrSel=164]="CrSel",R[R.ExSel=165]="ExSel",R[R.EraseEof=166]="EraseEof",R[R.Play=167]="Play",R[R.Zoom=168]="Zoom",R[R.NoName=169]="NoName",R[R.Pa1=170]="Pa1",R[R.OemClear=171]="OemClear",R[R.DeadCharProcessed=172]="DeadCharProcessed",(l=I.WindowsPointerFlags||(I.WindowsPointerFlags={}))[l.New=1]="New",l[l.InRange=2]="InRange",l[l.InContact=4]="InContact",l[l.FirstButton=16]="FirstButton",l[l.SecondButton=32]="SecondButton",l[l.ThirdButton=64]="ThirdButton",l[l.FourthButton=128]="FourthButton",l[l.FifthButton=256]="FifthButton",l[l.Primary=8192]="Primary",l[l.Confidence=16384]="Confidence",l[l.Canceled=32768]="Canceled",l[l.Down=65536]="Down",l[l.Update=131072]="Update",l[l.Up=262144]="Up",l[l.Wheel=524288]="Wheel",l[l.HWheel=1048576]="HWheel",l[l.CaptureChanged=2097152]="CaptureChanged",l[l.HasTransform=4194304]="HasTransform",I.TouchPenPointerInfo={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeUint32(A.pointerId),I.writeUint32(A.frameId),I.writeEnum(A.pointerFlags),I.writeInt32(A.x),I.writeInt32(A.y)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e,Q;return I=A.readUint32(),g=A.readUint32(),B=A.readUint32(),e=A.readInt32(),Q=A.readInt32(),{pointerId:I,frameId:g,pointerFlags:B,x:e,y:Q}}},(F=I.TouchMask||(I.TouchMask={}))[F.ContactArea=1]="ContactArea",F[F.Orientation=2]="Orientation",F[F.Pressure=4]="Pressure",(S=I.PenMask||(I.PenMask={}))[S.Pressure=1]="Pressure",S[S.Rotation=2]="Rotation",S[S.TiltX=4]="TiltX",S[S.TiltY=8]="TiltY",(u=I.PenFlags||(I.PenFlags={}))[u.Barrel=1]="Barrel",u[u.Inverted=2]="Inverted",u[u.Eraser=4]="Eraser",I.TouchAbsolute={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.TouchPenPointerInfo.encodeInto(A.pointerInfo,g),g.writeEnum(A.touchMask),g.writeInt32(A.contactLeft),g.writeInt32(A.contactTop),g.writeInt32(A.contactRight),g.writeInt32(A.contactBottom),g.writeUint32(A.orientation),g.writeUint32(A.pressure)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B,e,Q,C,i,t,E;return g=I.TouchPenPointerInfo.readFrom(A),B=A.readUint32(),e=A.readInt32(),Q=A.readInt32(),C=A.readInt32(),i=A.readInt32(),t=A.readUint32(),E=A.readUint32(),{pointerInfo:g,touchMask:B,contactLeft:e,contactTop:Q,contactRight:C,contactBottom:i,orientation:t,pressure:E}}},I.GamepadReport={discriminator:1,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.buttons),I.writeByte(A.leftTrigger),I.writeByte(A.rightTrigger),I.writeInt16(A.leftThumbX),I.writeInt16(A.leftThumbY),I.writeInt16(A.rightThumbX),I.writeInt16(A.rightThumbY),I.writeByte(A.slot)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e,Q,C,i,t;return I=A.readUint32(),g=A.readByte(),B=A.readByte(),e=A.readInt16(),Q=A.readInt16(),C=A.readInt16(),i=A.readInt16(),t=A.readByte(),{buttons:I,leftTrigger:g,rightTrigger:B,leftThumbX:e,leftThumbY:Q,rightThumbX:C,rightThumbY:i,slot:t}}},I.GamepadRumble={discriminator:2,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeByte(A.port),I.writeUint16(A.leftMotorSpeed),I.writeUint16(A.rightMotorSpeed)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B;return I=A.readByte(),g=A.readUint16(),B=A.readUint16(),{port:I,leftMotorSpeed:g,rightMotorSpeed:B}}},I.MouseAbsolute={discriminator:3,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeInt32(A.x),I.writeInt32(A.y)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readInt32(),g=A.readInt32(),{x:I,y:g}}},I.MouseRelative={discriminator:4,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeInt32(A.dx),I.writeInt32(A.dy)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readInt32(),g=A.readInt32(),{dx:I,dy:g}}},I.MouseClick={discriminator:5,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.action),I.writeEnum(A.button)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readUint32(),{action:I,button:g}}},I.MouseScroll={discriminator:6,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.axis),I.writeInt32(A.delta)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readInt32(),{axis:I,delta:g}}},I.KeyboardInput={discriminator:7,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.action);{const g=A.keycodes.length;I.writeUint32(g);for(let B=0;B<g;B++)I.writeEnum(A.keycodes[B])}},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;I=A.readUint32();{let I=A.readUint32();g=new Array(I);for(let B=0;B<I;B++){let I;I=A.readUint32(),g[B]=I}}return{action:I,keycodes:g}}},I.LogicalInput={discriminator:8,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeString(A.inputString)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readString(),{inputString:I}}},I.TouchesAbsolute={discriminator:9,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){{const B=A.touches.length;g.writeUint32(B);for(let e=0;e<B;e++)I.TouchAbsolute.encodeInto(A.touches[e],g)}},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;{let B=A.readUint32();g=new Array(B);for(let e=0;e<B;e++){let B;B=I.TouchAbsolute.readFrom(A),g[e]=B}}return{touches:g}}},I.PenAbsolute={discriminator:10,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.TouchPenPointerInfo.encodeInto(A.pointerInfo,g),g.writeEnum(A.penFlags),g.writeEnum(A.penMask),g.writeUint32(A.pressure),g.writeUint32(A.rotation),g.writeInt32(A.tiltX),g.writeInt32(A.tiltY)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B,e,Q,C,i,t;return g=I.TouchPenPointerInfo.readFrom(A),B=A.readUint32(),e=A.readUint32(),Q=A.readUint32(),C=A.readUint32(),i=A.readInt32(),t=A.readInt32(),{pointerInfo:g,penFlags:B,penMask:e,pressure:Q,rotation:C,tiltX:i,tiltY:t}}},I.InputBody={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const B=g.reserveMessageLength(),e=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.GamepadReport.encodeInto(A.value,g);break;case 2:I.GamepadRumble.encodeInto(A.value,g);break;case 3:I.MouseAbsolute.encodeInto(A.value,g);break;case 4:I.MouseRelative.encodeInto(A.value,g);break;case 5:I.MouseClick.encodeInto(A.value,g);break;case 6:I.MouseScroll.encodeInto(A.value,g);break;case 7:I.KeyboardInput.encodeInto(A.value,g);break;case 8:I.LogicalInput.encodeInto(A.value,g);break;case 9:I.TouchesAbsolute.encodeInto(A.value,g);break;case 10:I.PenAbsolute.encodeInto(A.value,g)}const Q=g.length;g.fillMessageLength(B,Q-e)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),e=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.GamepadReport.readFrom(A)};case 2:return{discriminator:2,value:I.GamepadRumble.readFrom(A)};case 3:return{discriminator:3,value:I.MouseAbsolute.readFrom(A)};case 4:return{discriminator:4,value:I.MouseRelative.readFrom(A)};case 5:return{discriminator:5,value:I.MouseClick.readFrom(A)};case 6:return{discriminator:6,value:I.MouseScroll.readFrom(A)};case 7:return{discriminator:7,value:I.KeyboardInput.readFrom(A)};case 8:return{discriminator:8,value:I.LogicalInput.readFrom(A)};case 9:return{discriminator:9,value:I.TouchesAbsolute.readFrom(A)};case 10:return{discriminator:10,value:I.PenAbsolute.readFrom(A)};default:throw A.index=e,new B.BebopRuntimeError("Unrecognized discriminator while decoding InputBody")}}},(y=I.VideoCodecType||(I.VideoCodecType={}))[y.Baseline=1]="Baseline",y[y.Main=2]="Main",y[y.High=4]="High",y[y.H264=7]="H264",y[y.H265=8]="H265",(w=I.Vendor||(I.Vendor={}))[w.Unknown=0]="Unknown",w[w.Amd=4098]="Amd",w[w.Nvidia=4318]="Nvidia",w[w.Intel=32902]="Intel",I.VideoCodec={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeString(A.friendlyName),I.writeUint32(A.width),I.writeUint32(A.height),I.writeUint32(A.refreshRate),I.writeBytes(A.data),I.writeEnum(A.type)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e,Q,C;return I=A.readString(),g=A.readUint32(),B=A.readUint32(),e=A.readUint32(),Q=A.readBytes(),C=A.readUint32(),{friendlyName:I,width:g,height:B,refreshRate:e,data:Q,type:C}}},(D=I.FormFactor||(I.FormFactor={}))[D.Unknown=0]="Unknown",D[D.Phone=1]="Phone",D[D.Tablet=2]="Tablet",D[D.Computer=3]="Computer",D[D.Console=4]="Console",D[D.Tv=5]="Tv",(c=I.OperatingSystem||(I.OperatingSystem={}))[c.Other=0]="Other",c[c.IOS=1]="IOS",c[c.TvOS=2]="TvOS",c[c.Android=3]="Android",c[c.Windows=4]="Windows",c[c.MacOS=5]="MacOS",c[c.Linux=6]="Linux",c[c.Roku=7]="Roku",(h=I.NetworkProtocol||(I.NetworkProtocol={}))[h.WebRTC=0]="WebRTC",h[h.Geyser=1]="Geyser",(d=I.AudioChannels||(I.AudioChannels={}))[d.Mono=0]="Mono",d[d.Stereo=1]="Stereo",d[d.Surround51=2]="Surround51",d[d.Surround71=3]="Surround71",(r=I.AudioCodec||(I.AudioCodec={}))[r.Opus=0]="Opus",r[r.Aac=1]="Aac",(s=I.AudioContainer||(I.AudioContainer={}))[s.Raw=0]="Raw",s[s.WebM=1]="WebM",s[s.IsoBMFF=2]="IsoBMFF",(n=I.VideoContainer||(I.VideoContainer={}))[n.Raw=0]="Raw",n[n.IsoBMFF=1]="IsoBMFF",(a=I.LogicError||(I.LogicError={}))[a.UnknownError=0]="UnknownError",a[a.DisplaysMissing=1]="DisplaysMissing",a[a.NoAvailableEncoder=2]="NoAvailableEncoder",a[a.InvalidEncodingConfig=3]="InvalidEncodingConfig",a[a.NoCodecsExchanged=4]="NoCodecsExchanged",a[a.NoCapabilities=5]="NoCapabilities",a[a.NoSuchStream=6]="NoSuchStream",a[a.ForceSegmentFailed=7]="ForceSegmentFailed",I.AudioConfig={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.codec),I.writeEnum(A.container)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readUint32(),{codec:I,container:g}}},I.VideoConfig={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.VideoCodec.encodeInto(A.codec,g),g.writeEnum(A.container)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B;return g=I.VideoCodec.readFrom(A),B=A.readUint32(),{codec:g,container:B}}},(o=I.InputLevel||(I.InputLevel={}))[o.None=0]="None",o[o.GamepadPort1=1]="GamepadPort1",o[o.GamepadPort2=2]="GamepadPort2",o[o.GamepadPort3=4]="GamepadPort3",o[o.GamepadPort4=8]="GamepadPort4",o[o.Gamepad=15]="Gamepad",o[o.Mouse=16]="Mouse",o[o.Keyboard=32]="Keyboard",I.DeviceInfo={discriminator:1,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.formFactor),I.writeString(A.deviceName),I.writeEnum(A.deviceOs),I.writeString(A.deviceOsVersion),I.writeString(A.deviceModel),I.writeString(A.userAgent),I.writeString(A.deviceId),I.writeByte(Number(A.isWeb))},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e,Q,C,i,t;return I=A.readUint32(),g=A.readString(),B=A.readUint32(),e=A.readString(),Q=A.readString(),C=A.readString(),i=A.readString(),t=!!A.readByte(),{formFactor:I,deviceName:g,deviceOs:B,deviceOsVersion:e,deviceModel:Q,userAgent:C,deviceId:i,isWeb:t}}},I.CodecPackRequest={discriminator:2,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom:A=>({})},I.CodecPackResponse={discriminator:3,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){{const B=A.videoCodecs.length;g.writeUint32(B);for(let e=0;e<B;e++)I.VideoCodec.encodeInto(A.videoCodecs[e],g)}},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;{let B=A.readUint32();g=new Array(B);for(let e=0;e<B;e++){let B;B=I.VideoCodec.readFrom(A),g[e]=B}}return{videoCodecs:g}}},I.ClientCapabilities={discriminator:4,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){g.writeUint32(A.preferredWidth),g.writeUint32(A.preferredHeight),g.writeUint32(A.preferredFps),g.writeUint32(A.preferredAudioBitrate),g.writeUint32(A.preferredVideoBitrate),g.writeEnum(A.preferredAudioChannels),I.AudioConfig.encodeInto(A.preferredAudioConfig,g),I.VideoConfig.encodeInto(A.preferredVideoConfig,g);{const I=A.supportedAudioChannels.length;g.writeUint32(I);for(let B=0;B<I;B++)g.writeEnum(A.supportedAudioChannels[B])}{const B=A.supportedAudioConfigs.length;g.writeUint32(B);for(let e=0;e<B;e++)I.AudioConfig.encodeInto(A.supportedAudioConfigs[e],g)}{const B=A.supportedVideoConfigs.length;g.writeUint32(B);for(let e=0;e<B;e++)I.VideoConfig.encodeInto(A.supportedVideoConfigs[e],g)}g.writeByte(Number(A.supportsOver1080P)),g.writeByte(Number(A.supportsTemporalScaling))},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B,e,Q,C,i,t,E,o,a,n,s,r;g=A.readUint32(),B=A.readUint32(),e=A.readUint32(),Q=A.readUint32(),C=A.readUint32(),i=A.readUint32(),t=I.AudioConfig.readFrom(A),E=I.VideoConfig.readFrom(A);{let I=A.readUint32();o=new Array(I);for(let g=0;g<I;g++){let I;I=A.readUint32(),o[g]=I}}{let g=A.readUint32();a=new Array(g);for(let B=0;B<g;B++){let g;g=I.AudioConfig.readFrom(A),a[B]=g}}{let g=A.readUint32();n=new Array(g);for(let B=0;B<g;B++){let g;g=I.VideoConfig.readFrom(A),n[B]=g}}return s=!!A.readByte(),r=!!A.readByte(),{preferredWidth:g,preferredHeight:B,preferredFps:e,preferredAudioBitrate:Q,preferredVideoBitrate:C,preferredAudioChannels:i,preferredAudioConfig:t,preferredVideoConfig:E,supportedAudioChannels:o,supportedAudioConfigs:a,supportedVideoConfigs:n,supportsOver1080P:s,supportsTemporalScaling:r}}},I.ErrorResponse={discriminator:5,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.error)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readUint32(),{error:I}}},I.StreamRequest={discriminator:6,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.inputLevel)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readUint32(),{inputLevel:I}}},I.StreamStarting={discriminator:7,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){g.writeByte(A.streamId),g.writeEnum(A.inputLevel),g.writeFloat32(A.temporalScaleFactor),I.AudioConfig.encodeInto(A.chosenAudioConfig,g),I.VideoConfig.encodeInto(A.chosenVideoConfig,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B,e,Q,C;return g=A.readByte(),B=A.readUint32(),e=A.readFloat32(),Q=I.AudioConfig.readFrom(A),C=I.VideoConfig.readFrom(A),{streamId:g,inputLevel:B,temporalScaleFactor:e,chosenAudioConfig:Q,chosenVideoConfig:C}}},I.LeaveStream={discriminator:8,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.StreamStopping={discriminator:9,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.KeyframeRequest={discriminator:10,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.VideoBitrateRequest={discriminator:11,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeByte(A.streamId),I.writeUint32(A.bitsPerSecond)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readByte(),g=A.readUint32(),{streamId:I,bitsPerSecond:g}}},I.JoinStream={discriminator:12,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.PauseStream={discriminator:13,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.LogicBody={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const B=g.reserveMessageLength(),e=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.DeviceInfo.encodeInto(A.value,g);break;case 2:I.CodecPackRequest.encodeInto(A.value,g);break;case 3:I.CodecPackResponse.encodeInto(A.value,g);break;case 4:I.ClientCapabilities.encodeInto(A.value,g);break;case 5:I.ErrorResponse.encodeInto(A.value,g);break;case 6:I.StreamRequest.encodeInto(A.value,g);break;case 7:I.StreamStarting.encodeInto(A.value,g);break;case 8:I.LeaveStream.encodeInto(A.value,g);break;case 9:I.StreamStopping.encodeInto(A.value,g);break;case 10:I.KeyframeRequest.encodeInto(A.value,g);break;case 11:I.VideoBitrateRequest.encodeInto(A.value,g);break;case 12:I.JoinStream.encodeInto(A.value,g);break;case 13:I.PauseStream.encodeInto(A.value,g)}const Q=g.length;g.fillMessageLength(B,Q-e)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),e=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.DeviceInfo.readFrom(A)};case 2:return{discriminator:2,value:I.CodecPackRequest.readFrom(A)};case 3:return{discriminator:3,value:I.CodecPackResponse.readFrom(A)};case 4:return{discriminator:4,value:I.ClientCapabilities.readFrom(A)};case 5:return{discriminator:5,value:I.ErrorResponse.readFrom(A)};case 6:return{discriminator:6,value:I.StreamRequest.readFrom(A)};case 7:return{discriminator:7,value:I.StreamStarting.readFrom(A)};case 8:return{discriminator:8,value:I.LeaveStream.readFrom(A)};case 9:return{discriminator:9,value:I.StreamStopping.readFrom(A)};case 10:return{discriminator:10,value:I.KeyframeRequest.readFrom(A)};case 11:return{discriminator:11,value:I.VideoBitrateRequest.readFrom(A)};case 12:return{discriminator:12,value:I.JoinStream.readFrom(A)};case 13:return{discriminator:13,value:I.PauseStream.readFrom(A)};default:throw A.index=e,new B.BebopRuntimeError("Unrecognized discriminator while decoding LogicBody")}}},(E=I.VideoDataType||(I.VideoDataType={}))[E.Metadata=0]="Metadata",E[E.CleanPointFrame=1]="CleanPointFrame",E[E.FrameDiff=2]="FrameDiff",(t=I.AudioDataType||(I.AudioDataType={}))[t.Metadata=0]="Metadata",t[t.Frame=1]="Frame",I.VideoData={discriminator:1,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeBytes(A.data),I.writeUint64(A.segmentTime),I.writeEnum(A.type),I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readBytes(),g=A.readUint64(),B=A.readUint32(),e=A.readByte(),{data:I,segmentTime:g,type:B,streamId:e}}},I.PointerData={discriminator:2,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeBytes(A.data),I.writeUint32(A.monitorWidth),I.writeUint32(A.monitorHeight),I.writeUint32(A.shapeWidth),I.writeUint32(A.shapeHeight),I.writeInt32(A.spotX),I.writeInt32(A.spotY),I.writeByte(Number(A.visible)),I.writeInt32(A.positionX),I.writeInt32(A.positionY),I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e,Q,C,i,t,E,o,a;return I=A.readBytes(),g=A.readUint32(),B=A.readUint32(),e=A.readUint32(),Q=A.readUint32(),C=A.readInt32(),i=A.readInt32(),t=!!A.readByte(),E=A.readInt32(),o=A.readInt32(),a=A.readByte(),{data:I,monitorWidth:g,monitorHeight:B,shapeWidth:e,shapeHeight:Q,spotX:C,spotY:i,visible:t,positionX:E,positionY:o,streamId:a}}},I.AudioData={discriminator:3,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeBytes(A.data),I.writeEnum(A.type),I.writeByte(A.streamId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B;return I=A.readBytes(),g=A.readUint32(),B=A.readByte(),{data:I,type:g,streamId:B}}},I.MediaChunk={discriminator:4,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.Chunk.encodeInto(A.chunk,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;return g=I.Chunk.readFrom(A),{chunk:g}}},I.MediaBody={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const B=g.reserveMessageLength(),e=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.VideoData.encodeInto(A.value,g);break;case 2:I.PointerData.encodeInto(A.value,g);break;case 3:I.AudioData.encodeInto(A.value,g);break;case 4:I.MediaChunk.encodeInto(A.value,g)}const Q=g.length;g.fillMessageLength(B,Q-e)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),e=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.VideoData.readFrom(A)};case 2:return{discriminator:2,value:I.PointerData.readFrom(A)};case 3:return{discriminator:3,value:I.AudioData.readFrom(A)};case 4:return{discriminator:4,value:I.MediaChunk.readFrom(A)};default:throw A.index=e,new B.BebopRuntimeError("Unrecognized discriminator while decoding MediaBody")}}},I.PeerHello={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeUint64(A.protocolVersion),I.writeString(A.apiKey),I.writeGuid(A.hostname),I.writeString(A.externalId)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readUint64(),g=A.readString(),B=A.readGuid(),e=A.readString(),{protocolVersion:I,apiKey:g,hostname:B,externalId:e}}},(i=I.RelayAlertLevel||(I.RelayAlertLevel={}))[i.Invalid=0]="Invalid",i[i.Warning=1]="Warning",i[i.Fatal=2]="Fatal",(C=I.PeerTransportType||(I.PeerTransportType={}))[C.Invalid=0]="Invalid",C[C.SCTP=1]="SCTP",C[C.GUDP=2]="GUDP",C[C.Reserved=3]="Reserved",(Q=I.PeerInformationType||(I.PeerInformationType={}))[Q.Invalid=0]="Invalid",Q[Q.Offer=1]="Offer",Q[Q.Answer=2]="Answer",Q[Q.Candidate=3]="Candidate",(e=I.RelayAlertDescription||(I.RelayAlertDescription={}))[e.CloseNotify=0]="CloseNotify",e[e.UnexpectedMessage=10]="UnexpectedMessage",e[e.RecordOverflow=20]="RecordOverflow",e[e.TicketValidationError=30]="TicketValidationError",e[e.AccessDenied=49]="AccessDenied",e[e.DecodeError=50]="DecodeError",e[e.DecryptError=51]="DecryptError",e[e.ProtocolVersion=70]="ProtocolVersion",e[e.InternalError=80]="InternalError",e[e.PeerGoneAway=90]="PeerGoneAway",I.Relay={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeGuid(A.hostname),I.writeByte(A.universe),I.writeString(A.machineId),I.writeDate(A.startDate)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readGuid(),g=A.readByte(),B=A.readString(),e=A.readDate(),{hostname:I,universe:g,machineId:B,startDate:e}}},I.MulticastDatagram={opcode:1296126535,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){g.writeUint32(A.magicNumber),I.Relay.encodeInto(A.sourceRelay,g),I.Relay.encodeInto(A.destinationRelay,g),g.writeByte(Number(A.isEncrypted)),g.writeBytes(A.encodedInterRelayMessage),g.writeBytes(A.hash),g.writeBytes(A.signature)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B,e,Q,C,i,t;return g=A.readUint32(),B=I.Relay.readFrom(A),e=I.Relay.readFrom(A),Q=!!A.readByte(),C=A.readBytes(),i=A.readBytes(),t=A.readBytes(),{magicNumber:g,sourceRelay:B,destinationRelay:e,isEncrypted:Q,encodedInterRelayMessage:C,hash:i,signature:t}}},I.PeerLedgerEntry={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeGuid(A.hostname),I.writeString(A.externalId),I.writeUint32(A.organizationId),I.writeByte(A.universe)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readGuid(),g=A.readString(),B=A.readUint32(),e=A.readByte(),{hostname:I,externalId:g,organizationId:B,universe:e}}},I.RelayHello={discriminator:1,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const B=g.reserveMessageLength(),e=g.length;null!=A.relay&&(g.writeByte(1),I.Relay.encodeInto(A.relay,g)),null!=A.protocolVersion&&(g.writeByte(2),g.writeUint64(A.protocolVersion)),null!=A.userAgent&&(g.writeByte(3),g.writeString(A.userAgent)),g.writeByte(0);const Q=g.length;g.fillMessageLength(B,Q-e)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g={};const B=A.readMessageLength(),e=A.index+B;for(;;)switch(A.readByte()){case 0:return g;case 1:g.relay=I.Relay.readFrom(A);break;case 2:g.protocolVersion=A.readUint64();break;case 3:g.userAgent=A.readString();break;default:return A.index=e,g}}},I.RelayAlert={discriminator:2,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.level),I.writeEnum(A.description)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readUint32(),{level:I,description:g}}},I.RelayInitConnectionRequest={discriminator:3,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeEnum(A.desiredTransport)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readUint32(),{desiredTransport:I}}},I.RelayConnectionRequest={discriminator:4,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeString(A.sourceExternalId),I.writeEnum(A.desiredTransport),I.writeGuid(A.connectionRequestId),I.writeDate(A.timeToLive)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readString(),g=A.readUint32(),B=A.readGuid(),e=A.readDate(),{sourceExternalId:I,desiredTransport:g,connectionRequestId:B,timeToLive:e}}},I.RelayConnectionAccepted={discriminator:5,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeString(A.sourceExternalId),I.writeGuid(A.connectionRequestId),I.writeString(A.sessionTicket),I.writeUint64(A.sessionProtocolVersion)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B,e;return I=A.readString(),g=A.readGuid(),B=A.readString(),e=A.readUint64(),{sourceExternalId:I,connectionRequestId:g,sessionTicket:B,sessionProtocolVersion:e}}},I.RelayConnectionRejected={discriminator:6,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeString(A.sourceExternalId),I.writeGuid(A.connectionRequestId),I.writeString(A.reason)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B;return I=A.readString(),g=A.readGuid(),B=A.readString(),{sourceExternalId:I,connectionRequestId:g,reason:B}}},I.RelayPeerInformation={discriminator:7,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeGuid(A.connectionRequestId),I.writeEnum(A.type),I.writeString(A.data)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,B;return I=A.readGuid(),g=A.readUint32(),B=A.readString(),{connectionRequestId:I,type:g,data:B}}},I.RelayMessage={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const B=g.reserveMessageLength(),e=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.RelayHello.encodeInto(A.value,g);break;case 2:I.RelayAlert.encodeInto(A.value,g);break;case 3:I.RelayInitConnectionRequest.encodeInto(A.value,g);break;case 4:I.RelayConnectionRequest.encodeInto(A.value,g);break;case 5:I.RelayConnectionAccepted.encodeInto(A.value,g);break;case 6:I.RelayConnectionRejected.encodeInto(A.value,g);break;case 7:I.RelayPeerInformation.encodeInto(A.value,g)}const Q=g.length;g.fillMessageLength(B,Q-e)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),e=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.RelayHello.readFrom(A)};case 2:return{discriminator:2,value:I.RelayAlert.readFrom(A)};case 3:return{discriminator:3,value:I.RelayInitConnectionRequest.readFrom(A)};case 4:return{discriminator:4,value:I.RelayConnectionRequest.readFrom(A)};case 5:return{discriminator:5,value:I.RelayConnectionAccepted.readFrom(A)};case 6:return{discriminator:6,value:I.RelayConnectionRejected.readFrom(A)};case 7:return{discriminator:7,value:I.RelayPeerInformation.readFrom(A)};default:throw A.index=e,new B.BebopRuntimeError("Unrecognized discriminator while decoding RelayMessage")}}},I.RelayDatagram={opcode:1096040772,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){g.writeUint32(A.magicNumber),g.writeUint32(A.syncKey),g.writeGuid(A.sourceHostname),g.writeGuid(A.destinationHostname),I.RelayMessage.encodeInto(A.relayMessage,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,B,e,Q,C;return g=A.readUint32(),B=A.readUint32(),e=A.readGuid(),Q=A.readGuid(),C=I.RelayMessage.readFrom(A),{magicNumber:g,syncKey:B,sourceHostname:e,destinationHostname:Q,relayMessage:C}}},I.NewRelayAnnouncement={discriminator:1,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeDate(A.startTime),I.writeBytes(A.randomData)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readDate(),g=A.readBytes(),{startTime:I,randomData:g}}},I.KeyExchangeRequest={discriminator:2,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeBytes(A.publicKey)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readBytes(),{publicKey:I}}},I.KeyExchangeResponse={discriminator:3,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeBytes(A.publicKey)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readBytes(),{publicKey:I}}},I.KeyExchangeDone={discriminator:4,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeBytes(A.data)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readBytes(),{data:I}}},I.NewPeerAnnouncement={discriminator:5,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.PeerLedgerEntry.encodeInto(A.entry,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;return g=I.PeerLedgerEntry.readFrom(A),{entry:g}}},I.PeerLeftAnnouncement={discriminator:6,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){I.PeerLedgerEntry.encodeInto(A.entry,g)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;return g=I.PeerLedgerEntry.readFrom(A),{entry:g}}},I.LedgerRequest={discriminator:7,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom:A=>({})},I.LedgerChunk={discriminator:8,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){{const B=A.entries.length;g.writeUint32(B);for(let e=0;e<B;e++)I.PeerLedgerEntry.encodeInto(A.entries[e],g)}},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;{let B=A.readUint32();g=new Array(B);for(let e=0;e<B;e++){let B;B=I.PeerLedgerEntry.readFrom(A),g[e]=B}}return{entries:g}}},I.RelayHeartbeat={discriminator:9,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom:A=>({})},I.TransferableRelayDatagram={discriminator:10,encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){I.writeBytes(A.data)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readBytes(),{data:I}}},I.InterRelayMessage={encode(A){const I=B.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const B=g.reserveMessageLength(),e=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.NewRelayAnnouncement.encodeInto(A.value,g);break;case 2:I.KeyExchangeRequest.encodeInto(A.value,g);break;case 3:I.KeyExchangeResponse.encodeInto(A.value,g);break;case 4:I.KeyExchangeDone.encodeInto(A.value,g);break;case 5:I.NewPeerAnnouncement.encodeInto(A.value,g);break;case 6:I.PeerLeftAnnouncement.encodeInto(A.value,g);break;case 7:I.LedgerRequest.encodeInto(A.value,g);break;case 8:I.LedgerChunk.encodeInto(A.value,g);break;case 9:I.RelayHeartbeat.encodeInto(A.value,g);break;case 10:I.TransferableRelayDatagram.encodeInto(A.value,g)}const Q=g.length;g.fillMessageLength(B,Q-e)},decode(A){const I=B.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),e=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.NewRelayAnnouncement.readFrom(A)};case 2:return{discriminator:2,value:I.KeyExchangeRequest.readFrom(A)};case 3:return{discriminator:3,value:I.KeyExchangeResponse.readFrom(A)};case 4:return{discriminator:4,value:I.KeyExchangeDone.readFrom(A)};case 5:return{discriminator:5,value:I.NewPeerAnnouncement.readFrom(A)};case 6:return{discriminator:6,value:I.PeerLeftAnnouncement.readFrom(A)};case 7:return{discriminator:7,value:I.LedgerRequest.readFrom(A)};case 8:return{discriminator:8,value:I.LedgerChunk.readFrom(A)};case 9:return{discriminator:9,value:I.RelayHeartbeat.readFrom(A)};case 10:return{discriminator:10,value:I.TransferableRelayDatagram.readFrom(A)};default:throw A.index=e,new B.BebopRuntimeError("Unrecognized discriminator while decoding InterRelayMessage")}}}},65:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayCursorPainter=void 0,I.RainwayCursorPainter=class{constructor(A,I,g=100){this.correctRemoteCursor=A,this.transformPointerOffsetToRemote=I,this.cursorSyncInterval=g,this.container=void 0,this.video=void 0,this.canvas=void 0,this.cursorDiv=void 0,this.cursorImg=void 0,this.cursorState={visible:!1,x:0,y:0,spotX:0,spotY:0,extentWidth:0,extentHeight:0},this.wantsRemotePosition=!0,this.videoRect=new DOMRect(0,0,0,0),this.windowWidth=void 0,this.windowHeight=void 0,this.drawDebugDot=!1,this.debugDot=void 0,this.cursorSyncCounter=this.cursorSyncInterval,this.resizeObserver=new ResizeObserver((()=>{this.setVideoDimensions()})),["webkitfullscreenchange","mozfullscreenchange","fullscreenchange","MSFullscreenChange"].forEach((A=>{document.addEventListener(A,this.setVideoDimensions,!1)})),window.addEventListener("resize",this.setWindowDimensions)}detach(){["webkitfullscreenchange","mozfullscreenchange","fullscreenchange","MSFullscreenChange"].forEach((A=>{document.removeEventListener(A,this.setVideoDimensions,!1)})),window.removeEventListener("resize",this.setWindowDimensions),this.resizeObserver.disconnect()}setVideoDimensions(){for(const A of[this.video,this.canvas]){if(!A)continue;const I=A.getBoundingClientRect();if(I.width>0&&I.height>0)return this.videoRect=I,void this.applyCursorDivTransform()}}setWindowDimensions(){this.windowWidth=window.innerWidth,this.windowHeight=window.innerHeight}setContainer(A){this.container=A,A.style.overflow="hidden",this.video&&this.resizeObserver.unobserve(this.video),this.canvas&&this.resizeObserver.unobserve(this.canvas),this.cursorDiv=void 0;const I=A.childNodes;for(let A=0;A<I.length;A++){const g=I[A];g instanceof HTMLVideoElement?(this.video=g,this.setVideoDimensions(),this.resizeObserver.observe(this.video)):g instanceof HTMLCanvasElement&&g.classList.contains("rainway-canvas")?(this.canvas=g,this.setVideoDimensions(),this.resizeObserver.observe(this.canvas)):g instanceof HTMLDivElement&&(g.className.includes("rainway-cursor")?this.cursorDiv=g:g.className.includes("rainway-debug-dot")&&(this.debugDot=g))}this.cursorDiv||(this.cursorDiv=document.createElement("div"),this.cursorDiv.className="rainway-cursor",this.cursorDiv.style.position="absolute",this.cursorDiv.style.top="0px",this.cursorDiv.style.left="0px",this.cursorDiv.style.zIndex="99999",this.cursorDiv.style.pointerEvents="none",this.cursorDiv.style.willChange="transform",this.cursorDiv.style.transformOrigin="top left",this.applyCursorDivTransform(),this.cursorImg=document.createElement("img"),this.cursorDiv.appendChild(this.cursorImg),A.appendChild(this.cursorDiv)),this.drawDebugDot&&!this.debugDot&&(this.debugDot=document.createElement("div"),this.debugDot.className="rainway-debug-dot",this.debugDot.style.position="absolute",this.debugDot.style.top="0px",this.debugDot.style.left="0px",this.debugDot.style.zIndex="99999",this.debugDot.style.pointerEvents="none",this.debugDot.style.willChange="transform",this.debugDot.style.transformOrigin="top left",this.debugDot.style.width="3px",this.debugDot.style.height="3px",this.debugDot.style.backgroundColor="#ff0000",A.appendChild(this.debugDot))}unsetContainer(){var A,I;this.detach(),null===(A=this.cursorDiv)||void 0===A||A.remove(),null===(I=this.debugDot)||void 0===I||I.remove(),this.container=void 0}applyCursorDivTransform(){if(!this.cursorDiv)return;if(!this.cursorState.visible)return void(this.cursorDiv.style.visibility="hidden");const{x:A,y:I,spotX:g,spotY:B}=this.cursorState,{width:e,height:Q}=this.videoRect,C=e/this.cursorState.extentWidth,i=Q/this.cursorState.extentHeight,t=Math.round(A-g),E=Math.round(I-B);this.cursorDiv.style.visibility="visible",this.cursorDiv.style.transform=`scale(${C},${i}) translate(${t}px,${E}px)`}moveDebugDotTo(A){if(!this.debugDot)return;const{x:I,y:g}=A,B=this.videoRect.width/A.extentWidth,e=this.videoRect.height/A.extentHeight;this.debugDot.style.transform=`scale(${B},${e}) translate(${I}px,${g}px)`}processCursor(A){if(this.cursorDiv&&(A.visible&&!this.cursorState.visible&&(this.wantsRemotePosition=!0),this.cursorState.visible=A.visible,this.cursorState.spotX=A.spotX,this.cursorState.spotY=A.spotY,this.cursorState.extentWidth=A.extentWidth,this.cursorState.extentHeight=A.extentHeight,this.drawDebugDot&&this.moveDebugDotTo(A),this.cursorState.visible)){if(this.wantsRemotePosition)this.cursorState.x=A.x,this.cursorState.y=A.y,this.wantsRemotePosition=!1,this.cursorSyncCounter=this.cursorSyncInterval;else if(0==--this.cursorSyncCounter){const I=this.cursorState.x-A.x,g=this.cursorState.y-A.y;this.correctRemoteCursor(I,g),this.cursorSyncCounter=this.cursorSyncInterval}if(this.cursorDiv.style.width=`${A.shapeWidth}px`,this.cursorDiv.style.height=`${A.shapeHeight}px`,A.hasPointerImage&&this.cursorImg){const I=function(A){let I="";const g=new Uint8Array(A),B=g.byteLength;for(let A=0;A<B;A++)I+=String.fromCharCode(g[A]);return window.btoa(I)}(A.pointerImage);this.cursorImg.src=`data:image/png;base64,${I}`}this.applyCursorDivTransform()}}update(A,I,g){if(this.cursorDiv&&("pointermove"===A.type||"mousemove"===A.type)){if("mouse"!==A.pointerType){const A=this.transformPointerOffsetToRemote(I,g);A&&(this.cursorState.x=A.x,this.cursorState.y=A.y)}else{const I=this.cursorState,g=A.movementX,B=A.movementY;this.cursorState.x=Math.max(0,Math.min(I.x+g,I.extentWidth)),this.cursorState.y=Math.max(0,Math.min(I.y+B,I.extentHeight))}this.applyCursorDivTransform()}}}},99:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.friendlyGamepadName=void 0;const g={"054c":{"0268":"DualShock 3","05c4":"DualShock 4","09cc":"DualShock 4 (2nd Gen)"},"2dc8":{6101:"N30 Pro"},"0955":{b400:"NVIDIA Shield"},2563:{"0523":"ShanWan PS3 Controller"},"045e":{"02d1":"Xbox One Controller","02dd":"Xbox One Controller (Firmware 2015)","02e3":"Xbox One Elite Controller","02ea":"Xbox One S Controller","02fd":"Xbox One S Controller (Bluetooth)","028f":"Xbox360 Wireless Controller","028e":"Xbox360 Controller","0289":"Xbox Controller S","0285":"Xbox Controller S","0202":"Xbox Controller"},"046d":{c299:"G25 Racing Wheel",c29B:"G27 Racing Wheel",caa3:"DriveFX Racing Wheel",c295:"Momo Force Steering Wheel",c298:"Driving Force Pro"}};I.friendlyGamepadName=function(A,I){var B,e,Q,C;const i=A.id.split("(")[0].trim()||"Unknown gamepad",t=A.id.match(/\b([0-9a-f]{4})\b.*\b([0-9a-f]{4})\b/);if(!t)return i;const E=t[1],o=t[2];return null!==(C=null!==(e=null===(B=null==I?void 0:I[E])||void 0===B?void 0:B[o])&&void 0!==e?e:null===(Q=g[E])||void 0===Q?void 0:Q[o])&&void 0!==C?C:i}},322:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayGestureRecognizer=void 0;const g={clickDurationMs:60,dragDelayMs:300,rightClickDelayMs:500,touchSlopRadius:8,doubleTapWindowMs:400,doubleTapRadius:12,scrollGestureThresholdPixels:20,scrollEpsilonPixels:5,scrollSensitivity:4};var B,e,Q;function C(A){return A==e.left?1:A==e.middle?4:A==e.right?2:0}!function(A){A[A.idle=0]="idle",A[A.oneFingerDeciding=1]="oneFingerDeciding",A[A.twoFingersDeciding=2]="twoFingersDeciding",A[A.moving=3]="moving",A[A.dragging=4]="dragging",A[A.holdingRightMouseButton=5]="holdingRightMouseButton",A[A.zooming=6]="zooming",A[A.scrolling=7]="scrolling"}(B||(B={})),function(A){A[A.left=0]="left",A[A.middle=1]="middle",A[A.right=2]="right"}(e||(e={})),function(A){A[A.pixels=0]="pixels",A[A.lines=1]="lines",A[A.pages=2]="pages"}(Q||(Q={})),I.RainwayGestureRecognizer=class{constructor(A,I,Q=g){this.reportPointerEvent=A,this.reportWheelEvent=I,this.parameters=Q,this.state=B.idle,this.primary=void 0,this.secondary=void 0,this.centroidY=0,this.lastTapTime=new Date,this.rightClickTimer=void 0,this.rightClick=()=>{this.reportMouseDown(e.right),this.toState(B.holdingRightMouseButton),this.rightClickTimer=void 0},this.tapReleaseTimer=void 0,this.tapRelease=()=>{this.reportMouseUp(e.left),this.toState(B.idle),this.rightClickTimer=void 0},this.onPointerDown=A=>{const I={pointerId:A.pointerId,homeOffsetX:A.offsetX,homeOffsetY:A.offsetY,currentOffsetX:A.offsetX,currentOffsetY:A.offsetY,downTime:new Date,awake:!1};void 0===this.primary?(this.toState(B.oneFingerDeciding),this.primary=I,window.clearTimeout(this.rightClickTimer),this.rightClickTimer=window.setTimeout(this.rightClick,this.parameters.rightClickDelayMs)):void 0===this.secondary&&(this.toState(B.twoFingersDeciding),this.secondary=I,window.clearTimeout(this.rightClickTimer))},this.onPointerUp=A=>{var I;window.clearTimeout(this.rightClickTimer);const g=A.pointerId===(null===(I=this.primary)||void 0===I?void 0:I.pointerId);if(this.state===B.oneFingerDeciding&&g){this.log("pointer up from deciding, tapping"),window.clearTimeout(this.rightClickTimer);const I=Object.assign(Object.assign({},A),{offsetX:A.offsetX,offsetY:A.offsetY,pointerType:"touch",type:"pointermove"});this.reportPointerEvent(I),this.reportMouseDown(e.left),this.primary=void 0,this.lastTapTime=new Date,this.tapReleaseTimer=window.setTimeout(this.tapRelease,this.parameters.clickDurationMs)}else this.primary&&this.secondary?(this.log("stopping two finger gesture"),this.primary=void 0,this.secondary=void 0,this.toState(B.idle)):this.state===B.moving&&g?(this.log("stop moving"),this.primary=void 0,this.toState(B.idle)):this.state===B.dragging&&g?(this.log("stop dragging"),this.reportMouseUp(e.left),this.primary=void 0,this.toState(B.idle)):this.state===B.holdingRightMouseButton&&g&&(this.log("stop right click"),this.reportMouseUp(e.right),this.primary=void 0,this.toState(B.idle))},this.onPointerMove=A=>{var I,g;const Q=A.pointerId===(null===(I=this.primary)||void 0===I?void 0:I.pointerId),C=A.pointerId===(null===(g=this.secondary)||void 0===g?void 0:g.pointerId);if(this.primary&&Q?(this.primary.currentOffsetX=A.offsetX,this.primary.currentOffsetY=A.offsetY):this.secondary&&C&&(this.secondary.currentOffsetX=A.offsetX,this.secondary.currentOffsetY=A.offsetY),this.primary&&Q&&!this.secondary)this.state===B.oneFingerDeciding&&function(A,I){const g=A.currentOffsetX-A.homeOffsetX,B=A.currentOffsetY-A.homeOffsetY;return g*g+B*B>I*I}(this.primary,this.parameters.touchSlopRadius)?(this.log("left touch slop radius"),window.clearTimeout(this.rightClickTimer),this.primary.awake=!0,(new Date).valueOf()-this.lastTapTime.valueOf()<this.parameters.dragDelayMs?(this.reportMouseDown(e.left),this.toState(B.dragging)):this.toState(B.moving)):this.state!==B.dragging&&this.state!==B.moving&&this.state!==B.holdingRightMouseButton||this.reportPointerEvent(A);else if(this.primary&&this.secondary)if(this.state===B.twoFingersDeciding){const A=this.primary.currentOffsetY-this.primary.homeOffsetY,I=this.secondary.currentOffsetY-this.secondary.homeOffsetY,g=this.parameters.scrollGestureThresholdPixels;(A>g&&I>g||A<g&&I<g)&&(this.toState(B.scrolling),this.centroidY=(A+I)/2)}else if(this.state===B.scrolling){const A=this.parameters.scrollEpsilonPixels,I=(this.primary.currentOffsetY-this.primary.homeOffsetY+(this.secondary.currentOffsetY-this.secondary.homeOffsetY))/2;I>this.centroidY+A?(this.reportScroll(this.parameters.scrollSensitivity*A),this.centroidY=I):I<this.centroidY-A&&(this.reportScroll(this.parameters.scrollSensitivity*-A),this.centroidY=I)}}}log(...A){}reportMouseUp(A){this.log("--\x3e report pointerup",A);const I=new PointerEvent("pointerup",{pointerType:"mouse",buttons:0,button:A});this.reportPointerEvent(I)}reportMouseDown(A){this.log("--\x3e report pointerdown",A);const I=new PointerEvent("pointerdown",{pointerType:"mouse",buttons:C(A),button:A});this.reportPointerEvent(I)}reportScroll(A){const I=new WheelEvent("syntheticWheel",{deltaY:A,deltaMode:Q.pixels});this.reportWheelEvent(I)}toState(A){this.log(["idle","oneFingerDeciding","twoFingersDeciding","moving","dragging","holdingRightMouseButton","zooming","scrolling"][A]),this.state=A}processPointerEvent(A){if("touch"===A.pointerType)switch(A.type){case"pointerdown":this.onPointerDown(A);break;case"pointerup":this.onPointerUp(A);break;case"pointerrawupdate":case"pointermove":this.onPointerMove(A)}else this.reportPointerEvent(A)}}},824:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayInputManager=I.mouseClickFrom=void 0;const B=g(994),e=g(904),Q=g(40),C=g(322),i=g(65),t=g(528),E=g(904);function o(A){let I,g;switch(A.button){default:case 0:I=0!=(1&A.buttons),g=E.MouseButton.Left;break;case 1:I=0!=(4&A.buttons),g=E.MouseButton.Middle;break;case 2:I=0!=(2&A.buttons),g=E.MouseButton.Right;break;case 3:I=0!=(8&A.buttons),g=E.MouseButton.X1;break;case 4:I=0!=(16&A.buttons),g=E.MouseButton.X2}return{button:g,action:I?E.ButtonAction.ButtonDown:E.ButtonAction.ButtonUp}}function a(A){return A.axes.length>=4&&A.buttons.length>=16}function n(A,I){if(A===I)return!0;if(A.length!==I.length)return!1;for(let g=0;g<A.length;++g)if(A[g]!==I[g])return!1;return!0}I.mouseClickFrom=o,I.RainwayInputManager=class{constructor(A,I={touchGestures:!1,unlockedMousePointer:!1,embraceMouseAcceleration:!1}){this.rainwayStream=A,this.options=I,this.level=e.InputLevel.None,this.container=void 0,this.heldCodes=new Set,this.alwaysReportGamepadPoll=!0,this.lockPointer=()=>{if(this.options.unlockedMousePointer)return;if(!this.container)return;if(!this.container.requestPointerLock)return;const A=!this.options.embraceMouseAcceleration,I=A?this.container.requestPointerLock({unadjustedMovement:!0}):this.container.requestPointerLock();I instanceof Promise?I.catch((I=>{var g;"NotSupportedError"===I.name&&A&&(null===(g=this.container)||void 0===g||g.requestPointerLock())})):this.container.onpointerlockerror=()=>{var I;A&&(null===(I=this.container)||void 0===I||I.requestPointerLock())},this.container.focus()},this.focusContainer=()=>{var A;return null===(A=this.container)||void 0===A?void 0:A.focus()},this.onPointerEventWithGestureProcessing=A=>{(A.pointerType&&"mouse"!==A.pointerType||document.pointerLockElement===this.container)&&(this.options.touchGestures&&"touch"===A.pointerType?(A.preventDefault(),this.gestureRecognizer.processPointerEvent(A)):this.onPointerEvent(A))},this.onPointerEventFromGestureRecognizer=A=>{this.onPointerEvent(A)},this.onPointerEvent=A=>{this.cursorPainter.update(A,this.rememberedOffsetX,this.rememberedOffsetY),this.reportPointerEvent(A)},this.scrolledAmount=0,this.onWheelEvent=A=>{this.scrolledAmount+=.05*A.deltaY,this.scrolledAmount>=1?(this.sendVerticalScroll(Math.floor(this.scrolledAmount)),this.scrolledAmount%=1):this.scrolledAmount<=-1&&(this.sendVerticalScroll(Math.ceil(this.scrolledAmount)),this.scrolledAmount%=-1)},this.onKeyboardEvent=A=>{A.preventDefault(),"keydown"===A.type?this.heldCodes.add(A.code):"keyup"===A.type&&this.heldCodes.delete(A.code);const I=Q.RainwayVirtualKeyFromWebKeyCode[A.code];I&&this.sendInputDatagram({discriminator:E.KeyboardInput.discriminator,value:{action:"keydown"===A.type?E.KeyboardAction.KeyDown:E.KeyboardAction.KeyUp,keycodes:[I]}})},this.onGamepadConnectedEvent=A=>{},this.onGamepadDisconnectedEvent=A=>{},this.onDeviceMotion=A=>{},this.onDeviceOrientation=A=>{},this.gamepadCache=new Map,this.pollGamepads=A=>{if(navigator.getGamepads){if(this.container===document.activeElement){const A=[];for(const I of navigator.getGamepads()){if(!I||!a(I))continue;const g=I.buttons.map((A=>A.value)),B=this.gamepadCache.get(I.index);B&&n(B.axes,I.axes)&&n(B.buttonValues,g)||(A.push(this.makeGamepadInputEvent(I)),this.gamepadCache.set(I.index,{axes:[...I.axes],buttonValues:g}))}(this.alwaysReportGamepadPoll||A.length>0)&&this.reportGamepadEvents(A)}this.level&e.InputLevel.Gamepad&&(this.gamepadFrameHandle=window.requestAnimationFrame(this.pollGamepads))}},this.reportGamepadEvents=A=>{for(const I of A){let A=0;I.buttons.dpadUp&&(A|=1),I.buttons.dpadDown&&(A|=2),I.buttons.dpadLeft&&(A|=4),I.buttons.dpadRight&&(A|=8),I.buttons.start&&(A|=16),I.buttons.select&&(A|=32),I.buttons.leftStickPressed&&(A|=64),I.buttons.rightStickPressed&&(A|=128),I.buttons.leftShoulder&&(A|=256),I.buttons.rightShoulder&&(A|=512),I.buttons.a&&(A|=4096),I.buttons.b&&(A|=8192),I.buttons.x&&(A|=16384),I.buttons.y&&(A|=32768);const g={buttons:A,leftTrigger:Math.round(255*I.buttons.leftTrigger),rightTrigger:Math.round(255*I.buttons.rightTrigger),leftThumbX:Math.round(32767*I.sticks.left.x),leftThumbY:Math.round(32767*-I.sticks.left.y),rightThumbX:Math.round(32767*I.sticks.right.x),rightThumbY:Math.round(32767*-I.sticks.right.y),slot:1};this.sendInputDatagram({discriminator:E.GamepadReport.discriminator,value:g})}},this.moveMouseXY=(A,I)=>{this.sendMouseMove("relative",A,I)},this.pointerFrameId=0,this.rememberedOffsetX=0,this.rememberedOffsetY=0,this.touches=new Map,this.reportPointerEvent=A=>{if("touch"===A.pointerType||"pen"===A.pointerType){if(document.pointerLockElement===this.container){const I=this.container.clientWidth,g=this.container.clientHeight,B=A.movementX,e=A.movementY;this.rememberedOffsetX=Math.max(0,Math.min(I,this.rememberedOffsetX+B)),this.rememberedOffsetY=Math.max(0,Math.min(g,this.rememberedOffsetY+e))}else this.rememberedOffsetX=A.offsetX,this.rememberedOffsetY=A.offsetY;const I=this.rainwayStream.transformPointerOffsetToRemote(this.rememberedOffsetX,this.rememberedOffsetY);if(!I)return;const{x:g,y:B}=I,Q=Math.ceil(A.width/2),C=Math.ceil(A.height/2),{pointerId:i,buttons:t}=A,E="pointercancel"===A.type||"pointerout"===A.type||"pointerleave"===A.type,o=t>0,a=("pointerover"===A.type?e.WindowsPointerFlags.New:0)|(o?e.WindowsPointerFlags.InContact:0)|(1==(3&t)?e.WindowsPointerFlags.FirstButton:0)|(3==(3&t)?e.WindowsPointerFlags.SecondButton:0)|(A.isPrimary?e.WindowsPointerFlags.Primary:0)|("pointercancel"===A.type?e.WindowsPointerFlags.Canceled:0)|("pointerdown"===A.type?e.WindowsPointerFlags.Down:"pointerup"===A.type?e.WindowsPointerFlags.Up:e.WindowsPointerFlags.Update)|(E?o?e.WindowsPointerFlags.Up:e.WindowsPointerFlags.Update:e.WindowsPointerFlags.InRange),n={pointerId:i,frameId:++this.pointerFrameId,pointerFlags:a,x:g,y:B},s=Math.round(A.twist)%360,r=Math.round(1024*A.pressure);if("touch"===A.pointerType){const A={pointerInfo:n,touchMask:e.TouchMask.ContactArea|e.TouchMask.Orientation|e.TouchMask.Pressure,contactLeft:g-Q,contactTop:B-C,contactRight:g+Q,contactBottom:B+C,orientation:s,pressure:r};this.touches.set(i,A),this.sendInputDatagram({discriminator:e.TouchesAbsolute.discriminator,value:{touches:[...this.touches.values()]}}),E&&this.touches.delete(i)}else{const I=(2&t?e.PenFlags.Barrel:0)|(32&t?e.PenFlags.Eraser:0);this.sendInputDatagram({discriminator:e.PenAbsolute.discriminator,value:{pointerInfo:n,penMask:e.PenMask.Pressure|e.PenMask.Rotation|e.PenMask.TiltX|e.PenMask.TiltY,penFlags:I,rotation:s,pressure:r,tiltX:Math.round(A.tiltX),tiltY:Math.round(A.tiltY)}})}}else if((A.movementX||A.movementY)&&this.sendMouseMove("relative",A.movementX,A.movementY),A.button>-1){const I=o(A);this.sendMouseClick(I)}},this.cursorPainter=new i.RainwayCursorPainter(this.moveMouseXY,((A,I)=>this.rainwayStream.transformPointerOffsetToRemote(A,I))),this.gestureRecognizer=new C.RainwayGestureRecognizer(this.onPointerEventFromGestureRecognizer,this.onWheelEvent)}setContainer(A){if(this.cursorPainter.setContainer(A),this.container){const I=this.level;this.setInputLevel(e.InputLevel.None,!1),this.container=A,this.setInputLevel(I,!1)}else this.container=A}unsetContainer(){this.setInputLevel(e.InputLevel.None,!1),this.cursorPainter.unsetContainer(),this.container=void 0}setInputLevel(A,I=!0,g=!0){console.log("setInputLevel",A),this.alwaysReportGamepadPoll=g;const B=A&~this.level,Q=this.level&~A;this.level=A,B&e.InputLevel.Gamepad&&this.startGamepad(I),Q&e.InputLevel.Gamepad&&this.stopGamepad(),B&e.InputLevel.Mouse&&this.startMouse(),Q&e.InputLevel.Mouse&&this.stopMouse(),B&e.InputLevel.Keyboard&&this.startKeyboard(),Q&e.InputLevel.Keyboard&&this.stopKeyboard()}getInputLevel(){return this.level}startGamepad(A){window.addEventListener("gamepadconnected",this.onGamepadConnectedEvent),window.addEventListener("gamepaddisconnected",this.onGamepadDisconnectedEvent),this.gamepadFrameHandle=window.requestAnimationFrame(this.pollGamepads),A&&this.reportConnectedGamepads()}reportConnectedGamepads(){for(const A of navigator.getGamepads())A&&this.onGamepadConnectedEvent(new GamepadEvent("gamepadconnected",{gamepad:A}))}stopGamepad(){window.removeEventListener("gamepadconnected",this.onGamepadConnectedEvent),window.removeEventListener("gamepaddisconnected",this.onGamepadDisconnectedEvent),this.gamepadFrameHandle&&window.cancelAnimationFrame(this.gamepadFrameHandle),this.gamepadFrameHandle=void 0}pointerEventListeners(A){if(!window.PointerEvent)throw new Error("browser does not support PointerEvent");A(t.isDesktopSafari&&navigator.maxTouchPoints<1?"mousemove":window.onpointerrawupdate?"pointerrawupdate":"pointermove",this.onPointerEventWithGestureProcessing),A("pointerdown",this.onPointerEventWithGestureProcessing),A("pointerup",this.onPointerEventWithGestureProcessing),A("pointerover",this.onPointerEventWithGestureProcessing),A("pointerenter",this.onPointerEventWithGestureProcessing),A("pointercancel",this.onPointerEventWithGestureProcessing),A("pointerout",this.onPointerEventWithGestureProcessing),A("pointerleave",this.onPointerEventWithGestureProcessing),A("wheel",this.onWheelEvent),A("mouseup",this.lockPointer)}startMouse(){if(!this.container)throw new B.RainwayError("Rainway tried to add an event listener to its container to handle mouse input, but no container element is set. Try calling setContainer() first.");this.pointerEventListeners(this.container.addEventListener.bind(this.container))}stopMouse(){this.container&&this.pointerEventListeners(this.container.removeEventListener.bind(this.container))}startKeyboard(){if(!this.container)throw new B.RainwayError("Rainway tried to add an event listener to its container to handle keyboard input, but no container element is set. Try calling setContainer() first.");this.container.addEventListener("keydown",this.onKeyboardEvent),this.container.addEventListener("keyup",this.onKeyboardEvent),this.container.addEventListener("click",this.focusContainer),this.container.focus()}stopKeyboard(){this.container&&(this.releaseKeys(),this.container.removeEventListener("keydown",this.onKeyboardEvent),this.container.removeEventListener("keyup",this.onKeyboardEvent),this.container.removeEventListener("click",this.focusContainer))}startDeviceMotionEvents(){window.addEventListener("devicemotion",this.onDeviceMotion)}stopDeviceMotionEvents(){window.removeEventListener("devicemotion",this.onDeviceMotion)}startDeviceOrientationEvents(){window.addEventListener("deviceorientation",this.onDeviceOrientation)}stopDeviceOrientationEvents(){window.removeEventListener("deviceorientation",this.onDeviceOrientation)}sendVerticalScroll(A){this.sendInputDatagram({discriminator:E.MouseScroll.discriminator,value:{axis:E.ScrollAxis.Vertical,delta:A}})}makeGamepadInputEvent(A){var I,g,B,e,Q,C,i,t,E,o,a,n,s,r,d,h,c,D,w,y,u,S,F,l,R,G,k,N,U,m,f,p,M,L,H,K,J,q;return{id:A.id,index:A.index,buttons:{a:null!==(g=null===(I=A.buttons[0])||void 0===I?void 0:I.value)&&void 0!==g?g:0,b:null!==(e=null===(B=A.buttons[1])||void 0===B?void 0:B.value)&&void 0!==e?e:0,x:null!==(C=null===(Q=A.buttons[2])||void 0===Q?void 0:Q.value)&&void 0!==C?C:0,y:null!==(t=null===(i=A.buttons[3])||void 0===i?void 0:i.value)&&void 0!==t?t:0,leftShoulder:null!==(o=null===(E=A.buttons[4])||void 0===E?void 0:E.value)&&void 0!==o?o:0,rightShoulder:null!==(n=null===(a=A.buttons[5])||void 0===a?void 0:a.value)&&void 0!==n?n:0,leftTrigger:null!==(r=null===(s=A.buttons[6])||void 0===s?void 0:s.value)&&void 0!==r?r:0,rightTrigger:null!==(h=null===(d=A.buttons[7])||void 0===d?void 0:d.value)&&void 0!==h?h:0,select:null!==(D=null===(c=A.buttons[8])||void 0===c?void 0:c.value)&&void 0!==D?D:0,start:null!==(y=null===(w=A.buttons[9])||void 0===w?void 0:w.value)&&void 0!==y?y:0,leftStickPressed:null!==(S=null===(u=A.buttons[10])||void 0===u?void 0:u.value)&&void 0!==S?S:0,rightStickPressed:null!==(l=null===(F=A.buttons[11])||void 0===F?void 0:F.value)&&void 0!==l?l:0,dpadUp:null!==(G=null===(R=A.buttons[12])||void 0===R?void 0:R.value)&&void 0!==G?G:0,dpadDown:null!==(N=null===(k=A.buttons[13])||void 0===k?void 0:k.value)&&void 0!==N?N:0,dpadLeft:null!==(m=null===(U=A.buttons[14])||void 0===U?void 0:U.value)&&void 0!==m?m:0,dpadRight:null!==(p=null===(f=A.buttons[15])||void 0===f?void 0:f.value)&&void 0!==p?p:0,home:null!==(L=null===(M=A.buttons[16])||void 0===M?void 0:M.value)&&void 0!==L?L:0},sticks:{left:{x:null!==(H=A.axes[0])&&void 0!==H?H:0,y:null!==(K=A.axes[1])&&void 0!==K?K:0},right:{x:null!==(J=A.axes[2])&&void 0!==J?J:0,y:null!==(q=A.axes[3])&&void 0!==q?q:0}}}}feedGamepadInputEvent(A){this.reportGamepadEvents(A)}vibrateGamepad(A,I){var g,B;const e=navigator.getGamepads()[A];if(null==e?void 0:e.vibrationActuator)null===(B=(g=e.vibrationActuator).playEffect)||void 0===B||B.call(g,"dual-rumble",I);else if(null==e?void 0:e.hapticActuators){const A=null==e?void 0:e.hapticActuators;setTimeout((()=>{var g,B,e;for(const Q of A){const A=Math.max(null!==(g=I.strongMagnitude)&&void 0!==g?g:0,null!==(B=I.weakMagnitude)&&void 0!==B?B:0);Q.pulse(A,null!==(e=I.duration)&&void 0!==e?e:0)}}),I.startDelay)}}feedKeyboardEvent(A){this.onKeyboardEvent(A)}releaseKeys(){for(const A of this.heldCodes)this.onKeyboardEvent(new KeyboardEvent("keyup",{code:A}));this.heldCodes.clear()}feedPointerEvent(A){this.onPointerEvent(A)}feedWheelEvent(A){this.onWheelEvent(A)}processCursor(A){this.cursorPainter.processCursor(A)}enableGestures(){this.options.touchGestures=!0}disableGestures(){this.options.touchGestures=!1}sendMouseMove(A,I,g){"absolute"===A?this.sendInputDatagram({discriminator:E.MouseAbsolute.discriminator,value:{x:I,y:g}}):this.sendInputDatagram({discriminator:E.MouseRelative.discriminator,value:{dx:I,dy:g}})}sendMouseClick(A){this.sendInputDatagram({discriminator:E.MouseClick.discriminator,value:A})}sendInputDatagram(A){this.rainwayStream.sendInput(A)}}},40:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayVirtualKeyFromWebKeyCode=void 0;const B=g(904);I.RainwayVirtualKeyFromWebKeyCode={Unidentified:B.VirtualKey.None,Cancel:B.VirtualKey.Cancel,Backspace:B.VirtualKey.Back,Tab:B.VirtualKey.Tab,Enter:B.VirtualKey.Enter,Pause:B.VirtualKey.Pause,CapsLock:B.VirtualKey.CapsLock,HangulMode:B.VirtualKey.HangulMode,KanaMode:B.VirtualKey.HangulMode,Lang1:B.VirtualKey.HangulMode,Hanja:B.VirtualKey.HanjaMode,Lang2:B.VirtualKey.HanjaMode,Escape:B.VirtualKey.Escape,Convert:B.VirtualKey.ImeConvert,NonConvert:B.VirtualKey.ImeNonConvert,Space:B.VirtualKey.Space," ":B.VirtualKey.Space,Spacebar:B.VirtualKey.Space,PageUp:B.VirtualKey.PageUp,PageDown:B.VirtualKey.PageDown,End:B.VirtualKey.End,Home:B.VirtualKey.Home,ArrowLeft:B.VirtualKey.Left,ArrowUp:B.VirtualKey.Up,ArrowRight:B.VirtualKey.Right,ArrowDown:B.VirtualKey.Down,Select:B.VirtualKey.Select,PrintScreen:B.VirtualKey.PrintScreen,Insert:B.VirtualKey.Insert,Delete:B.VirtualKey.Delete,Help:B.VirtualKey.Help,Digit0:B.VirtualKey.D0,Digit1:B.VirtualKey.D1,Digit2:B.VirtualKey.D2,Digit3:B.VirtualKey.D3,Digit4:B.VirtualKey.D4,Digit5:B.VirtualKey.D5,Digit6:B.VirtualKey.D6,Digit7:B.VirtualKey.D7,Digit8:B.VirtualKey.D8,Digit9:B.VirtualKey.D9,KeyA:B.VirtualKey.A,KeyB:B.VirtualKey.B,KeyC:B.VirtualKey.C,KeyD:B.VirtualKey.D,KeyE:B.VirtualKey.E,KeyF:B.VirtualKey.F,KeyG:B.VirtualKey.G,KeyH:B.VirtualKey.H,KeyI:B.VirtualKey.I,KeyJ:B.VirtualKey.J,KeyK:B.VirtualKey.K,KeyL:B.VirtualKey.L,KeyM:B.VirtualKey.M,KeyN:B.VirtualKey.N,KeyO:B.VirtualKey.O,KeyP:B.VirtualKey.P,KeyQ:B.VirtualKey.Q,KeyR:B.VirtualKey.R,KeyS:B.VirtualKey.S,KeyT:B.VirtualKey.T,KeyU:B.VirtualKey.U,KeyV:B.VirtualKey.V,KeyW:B.VirtualKey.W,KeyX:B.VirtualKey.X,KeyY:B.VirtualKey.Y,KeyZ:B.VirtualKey.Z,MetaLeft:B.VirtualKey.LWin,OSLeft:B.VirtualKey.LWin,MetaRight:B.VirtualKey.RWin,OSRight:B.VirtualKey.RWin,ContextMenu:B.VirtualKey.Apps,Sleep:B.VirtualKey.Sleep,Numpad0:B.VirtualKey.NumPad0,Numpad1:B.VirtualKey.NumPad1,Numpad2:B.VirtualKey.NumPad2,Numpad3:B.VirtualKey.NumPad3,Numpad4:B.VirtualKey.NumPad4,Numpad5:B.VirtualKey.NumPad5,Numpad6:B.VirtualKey.NumPad6,Numpad7:B.VirtualKey.NumPad7,Numpad8:B.VirtualKey.NumPad8,Numpad9:B.VirtualKey.NumPad9,NumpadMultiply:B.VirtualKey.Multiply,NumpadAdd:B.VirtualKey.Add,NumpadComma:B.VirtualKey.Separator,NumpadSubtract:B.VirtualKey.Subtract,NumpadDecimal:B.VirtualKey.Decimal,NumpadDivide:B.VirtualKey.Divide,F1:B.VirtualKey.F1,F2:B.VirtualKey.F2,F3:B.VirtualKey.F3,F4:B.VirtualKey.F4,F5:B.VirtualKey.F5,F6:B.VirtualKey.F6,F7:B.VirtualKey.F7,F8:B.VirtualKey.F8,F9:B.VirtualKey.F9,F10:B.VirtualKey.F10,F11:B.VirtualKey.F11,F12:B.VirtualKey.F12,F13:B.VirtualKey.F13,F14:B.VirtualKey.F14,F15:B.VirtualKey.F15,F16:B.VirtualKey.F16,F17:B.VirtualKey.F17,F18:B.VirtualKey.F18,F19:B.VirtualKey.F19,F20:B.VirtualKey.F20,F21:B.VirtualKey.F21,F22:B.VirtualKey.F22,F23:B.VirtualKey.F23,F24:B.VirtualKey.F24,NumLock:B.VirtualKey.NumLock,ScrollLock:B.VirtualKey.Scroll,ShiftLeft:B.VirtualKey.LeftShift,ShiftRight:B.VirtualKey.RightShift,ControlLeft:B.VirtualKey.LeftCtrl,ControlRight:B.VirtualKey.RightCtrl,AltLeft:B.VirtualKey.LeftAlt,AltRight:B.VirtualKey.RightAlt,BrowserBack:B.VirtualKey.BrowserBack,BrowserForward:B.VirtualKey.BrowserForward,BrowserRefresh:B.VirtualKey.BrowserRefresh,BrowserStop:B.VirtualKey.BrowserStop,BrowserSearch:B.VirtualKey.BrowserSearch,BrowserFavorites:B.VirtualKey.BrowserFavorites,BrowserHome:B.VirtualKey.BrowserHome,AudioVolumeMute:B.VirtualKey.VolumeMute,AudioVolumeDown:B.VirtualKey.VolumeDown,AudioVolumeUp:B.VirtualKey.VolumeUp,MediaTrackNext:B.VirtualKey.MediaNextTrack,MediaTrackPrevious:B.VirtualKey.MediaPreviousTrack,MediaStop:B.VirtualKey.MediaStop,MediaPlayPause:B.VirtualKey.MediaPlayPause,LaunchMail:B.VirtualKey.LaunchMail,LaunchMediaPlayer:B.VirtualKey.SelectMedia,MediaSelect:B.VirtualKey.SelectMedia,LaunchApp1:B.VirtualKey.LaunchApplication1,LaunchApp2:B.VirtualKey.LaunchApplication2,Semicolon:B.VirtualKey.Oem1,Equal:B.VirtualKey.OemPlus,Comma:B.VirtualKey.OemComma,Minus:B.VirtualKey.OemMinus,Period:B.VirtualKey.OemPeriod,Slash:B.VirtualKey.Oem2,Backquote:B.VirtualKey.Oem3,BracketLeft:B.VirtualKey.Oem4,Backslash:B.VirtualKey.Oem5,BracketRight:B.VirtualKey.Oem6,Quote:B.VirtualKey.Oem7,IntlBackslash:B.VirtualKey.Oem102}},464:(A,I)=>{"use strict";var g;Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayLogging=I.RainwayLogLevel=void 0,function(A){A[A.Trace=0]="Trace",A[A.Debug=1]="Debug",A[A.Information=2]="Information",A[A.Warning=3]="Warning",A[A.Error=4]="Error",A[A.Critical=5]="Critical",A[A.Silent=6]="Silent"}(g=I.RainwayLogLevel||(I.RainwayLogLevel={}));class B{static setLogSink(A){B._logSink=A}static log(A,I){var g;null===(g=B._logSink)||void 0===g||g.call(B,A,I)}}I.RainwayLogging=B,B.trace=A=>B.log(g.Trace,A),B.debug=A=>B.log(g.Debug,A),B.information=A=>B.log(g.Information,A),B.warning=A=>B.log(g.Warning,A),B.error=A=>B.log(g.Error,A),B.critical=A=>B.log(g.Critical,A)},585:function(A,I,g){"use strict";var B=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},e=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0}),I.AudioStream=void 0;const Q=e(g(53)),C=g(994),i=g(464);I.AudioStream=class{constructor(){this.sampleRateHz=48e3,this.sampleRateKhz=48,this.channelCount=2,this.decodedCount=0,this.totalSamplesDecoded=0,this.waitingToDecodeQueue=[],this.decodeQueueSize=0,this.logPerformance=!1,this.maxDecodingTimeMs=0,this.totalDecodingTimeMs=0,this.totalQueuedSize=0,this.maxQueuedSize=0,this.startStreamTimeMs=0,this.outputBuffers=[],this.currentOutputBuffer=void 0,this.currentBufferReadIndex=0,this.nextStartTime=void 0,this.playing=!1,this.dataDurationMs=10,this.minLatencyMs=60,this.maxLatencyMs=100,this.prevDroppedFrameTimeMs=void 0,this.decodedSamplesPerFrame=0,this.audioBufferSize=0,this.audioBufferPool=[],this.maxAudioBufferPoolCount=5,this.resampledAudioBufferSize=0,this.onDecode=({startTimestamp:A,outputData:I,samplesDecoded:g})=>{--this.decodeQueueSize;const B=new Float32Array(I);this.outputBuffers.push(B);try{if(g>0&&(++this.decodedCount,this.totalSamplesDecoded+=g,this.logPerformance&&this.logPerfTiming(A),this.totalSamplesDecoded>=this.audioBufferSize&&(this.nextStartTime&&this.nextStartTime<this.audioContext.currentTime&&(this.nextStartTime=void 0),this.nextStartTime||this.totalSamplesDecoded>=2*this.audioBufferSize))){const A=Math.floor(this.totalSamplesDecoded/this.audioBufferSize);for(let I=0;I<A;++I){const A=this.nextStartTime?1e3*(this.nextStartTime-this.audioContext.currentTime):0;if(A>this.maxLatencyMs){let I=0;const g=Date.now(),B=this.prevDroppedFrameTimeMs?g-this.prevDroppedFrameTimeMs:void 0,e=1e4;if(B&&B<e)I=this.dropDecodedSamples(this.totalSamplesDecoded);else{const g=A-this.maxLatencyMs+this.dataDurationMs,B=Math.floor(this.sampleRateKhz*g);I=this.dropDecodedSamples(B)}this.prevDroppedFrameTimeMs=g,this.totalSamplesDecoded-=I}if(!(this.totalSamplesDecoded>=this.audioBufferSize))break;{const A=this.copyDecodedSamplesToAudioBuffer();this.scheduleBufferForPlaybackFunc(A),this.totalSamplesDecoded-=A.length}}}}catch(A){i.RainwayLogging.warning("Caught exception in AudioStream onDecode: "+A+" "+A.stack),this.stop(),this.play()}this.sendDecoderWaitingToDecodeFrames()}}initialize(){return B(this,void 0,void 0,(function*(){this.opusDecoderWorker=new Q.default,yield this.opusDecoderWorker.initialize(),this.opusDecoderWorker.onDecode=this.onDecode.bind(this)}))}dispose(){var A;null===(A=this.opusDecoderWorker)||void 0===A||A.dispose(),this.opusDecoderWorker=void 0}configure({audioContext:A,sampleRateHz:I,channelCount:g,dataDurationMs:B,minLatencyMs:e,maxLatencyMs:Q}){if(this.sampleRateHz=null!=I?I:this.sampleRateHz,8e3!=this.sampleRateHz&&12e3!=this.sampleRateHz&&16e3!=this.sampleRateHz&&24e3!=this.sampleRateHz&&48e3!=this.sampleRateHz)throw new C.RainwayError(`invalid audio sample rate: ${this.sampleRateHz} (must be 8000, 12000, 16000, 24000, or 48000)`);if(this.sampleRateKhz=this.sampleRateHz/1e3,this.channelCount=null!=g?g:this.channelCount,1!=this.channelCount&&2!=this.channelCount&&6!=this.channelCount)throw new C.RainwayError(`invalid channel count: ${this.channelCount} (must be 1, 2, or 6)`);if(this.dataDurationMs=null!=B?B:this.dataDurationMs,this.minLatencyMs=null!=e?e:this.minLatencyMs,this.maxLatencyMs=null!=Q?Q:this.maxLatencyMs,this.dataDurationMs<=0)throw new C.RainwayError(`dataDurationMs must be positive, but is ${this.dataDurationMs}`);if(this.dataDurationMs>this.minLatencyMs)throw new C.RainwayError("dataDurationMs may not exceed minLatencyMs");if(this.maxLatencyMs<=this.minLatencyMs)throw new C.RainwayError("maxLatencyMs must be greater than minLatencyMs");this.decodedSamplesPerFrame=this.dataDurationMs*this.sampleRateKhz,this.currentOutputBuffer=void 0,this.currentBufferReadIndex=0;const t=this.sampleRateKhz*this.minLatencyMs;this.audioBufferSize=Math.floor(t/2),null==A?(this.audioContext=new(window.AudioContext||window.webkitAudioContext)({latencyHint:"interactive",sampleRate:this.sampleRateHz}),this.audioContext.createBufferSource()):this.audioContext=A,this.volumeNode=this.audioContext.createGain(),this.volumeNode.connect(this.audioContext.destination),this.audioContext.resume(),"suspended"==this.audioContext.state&&i.RainwayLogging.information("AudioContext is suspended. Note, on Safari, must be created directly from user interaction (i.e. no 'await'))."),this.audioContext.sampleRate!=this.sampleRateHz?(i.RainwayLogging.warning("Configured sample rate: "+this.sampleRateHz+" does not match AudioContext: "+this.audioContext.sampleRate+". Resampling is required!"),this.resampledAudioBufferSize=Math.floor(this.audioContext.sampleRate/1e3*this.minLatencyMs/2),this.scheduleBufferForPlaybackFunc=this.resampleBufferThenScheduleForPlayback.bind(this)):this.scheduleBufferForPlaybackFunc=this.scheduleBufferForPlayback.bind(this),this.audioBufferPool=[];let E=!1;this.playing&&(E=!0,this.stop()),E&&this.play()}play(){if(!this.opusDecoderWorker)throw new C.RainwayError("play() has no opusDecoderWorker");if(!this.sampleRateHz)throw new C.RainwayError("play() has no sampleRateHz");if(!this.channelCount)throw new C.RainwayError("play() has no channelCount");if(!this.audioContext)throw new C.RainwayError("play() has no audioContext");this.playing||(this.maxDecodingTimeMs=0,this.totalDecodingTimeMs=0,this.totalQueuedSize=0,this.maxQueuedSize=0,this.startStreamTimeMs=Date.now(),this.opusDecoderWorker.startStream(this.sampleRateHz,this.channelCount,this.decodedSamplesPerFrame),this.playing=!0)}stop(){if(!this.opusDecoderWorker)throw new C.RainwayError("stop() has no opusDecoderWorker");this.waitingToDecodeQueue=[],this.outputBuffers=[],this.nextStartTime=void 0,this.totalSamplesDecoded=0,this.currentOutputBuffer=void 0,this.currentBufferReadIndex=0,this.prevDroppedFrameTimeMs=void 0,this.opusDecoderWorker.stopStream(),this.playing=!1}pushData(A){this.playing&&this.audioContext&&this.opusDecoderWorker&&(0==this.decodeQueueSize?(0!=this.waitingToDecodeQueue.length&&(i.RainwayLogging.error("[AudioStream] empty decoder queue, but waiting to decode queue not empty!"),this.waitingToDecodeQueue=[]),this.sendToDecoder({startTimestamp:Date.now(),inputData:A})):(this.waitingToDecodeQueue.push({startTimestamp:Date.now(),inputData:A}),this.decodeQueueSize<3&&this.sendDecoderWaitingToDecodeFrames()))}sendDecoderWaitingToDecodeFrames(){const A=(this.decodeQueueSize+this.waitingToDecodeQueue.length)*this.dataDurationMs;if(A>this.maxLatencyMs){const I=A-this.maxLatencyMs,g=Math.floor(I/this.dataDurationMs),B=Math.max(Math.max(this.waitingToDecodeQueue.length-g,3-this.decodeQueueSize),1),e=this.waitingToDecodeQueue.length-B;this.waitingToDecodeQueue=this.waitingToDecodeQueue.slice(e)}for(;this.decodeQueueSize<3&&this.waitingToDecodeQueue.length>0;){const A=this.waitingToDecodeQueue.shift();this.sendToDecoder(A)}}sendToDecoder(A){++this.decodeQueueSize,this.opusDecoderWorker.decode(A.startTimestamp,A.inputData)}dropDecodedSamples(A){let I=0;for(this.currentOutputBuffer&&(I+=this.dropCurrentOutputBufferSamples(A),A-=I);A>0&&this.outputBuffers.length>0;)if(A<this.decodedSamplesPerFrame){this.currentOutputBuffer=this.outputBuffers.shift(),this.currentBufferReadIndex=0;const g=this.dropCurrentOutputBufferSamples(A);I+=g,A-=g}else this.outputBuffers.shift(),I+=this.decodedSamplesPerFrame,A-=this.decodedSamplesPerFrame;return I}dropCurrentOutputBufferSamples(A){const I=Math.floor((this.currentOutputBuffer.length-this.currentBufferReadIndex)/this.channelCount),g=Math.min(I,A);return this.currentBufferReadIndex+=g*this.channelCount,this.currentBufferReadIndex>=this.currentOutputBuffer.length&&(this.currentOutputBuffer=void 0),g}copyDecodedSamplesToAudioBuffer(){const A=this.getOrCreateAudioBuffer();for(let I=0;I<this.audioBufferSize;){this.currentOutputBuffer||(this.currentOutputBuffer=this.outputBuffers.shift(),this.currentBufferReadIndex=0);const g=this.currentOutputBuffer;if(1==this.channelCount){const B=A.getChannelData(0);for(;this.currentBufferReadIndex<g.length&&(B[I]=g[this.currentBufferReadIndex],this.currentBufferReadIndex+=this.channelCount,++I,!(I>=this.audioBufferSize)););}else if(2==this.channelCount){const B=A.getChannelData(0),e=A.getChannelData(1);for(;this.currentBufferReadIndex<g.length&&(B[I]=g[this.currentBufferReadIndex],e[I]=g[this.currentBufferReadIndex+1],this.currentBufferReadIndex+=this.channelCount,++I,!(I>=this.audioBufferSize)););}else{const B=A.getChannelData(0),e=A.getChannelData(1),Q=A.getChannelData(2),C=A.getChannelData(3),i=A.getChannelData(4),t=A.getChannelData(5);for(;this.currentBufferReadIndex<g.length&&(B[I]=g[this.currentBufferReadIndex],e[I]=g[this.currentBufferReadIndex+1],i[I]=g[this.currentBufferReadIndex+2],t[I]=g[this.currentBufferReadIndex+3],Q[I]=g[this.currentBufferReadIndex+4],C[I]=g[this.currentBufferReadIndex+5],this.currentBufferReadIndex+=this.channelCount,++I,!(I>=this.audioBufferSize)););}this.currentBufferReadIndex>=this.currentOutputBuffer.length&&(this.currentOutputBuffer=void 0)}return A}getOrCreateAudioBuffer(){return 0==this.audioBufferPool.length?this.audioContext.createBuffer(this.channelCount,this.audioBufferSize,this.sampleRateHz):this.audioBufferPool.pop()}returnAudioBufferToPool(A,I){this.audioBufferPool.length<this.maxAudioBufferPoolCount&&this.audioBufferPool.push(A)}logPerfTiming(A){const I=Date.now(),g=I-A;this.totalDecodingTimeMs+=g,g>this.maxDecodingTimeMs&&(this.maxDecodingTimeMs=g);const B=this.waitingToDecodeQueue.length+this.decodeQueueSize;this.totalQueuedSize+=B,B>this.maxQueuedSize&&(this.maxQueuedSize=B),1500==this.decodedCount&&(i.RainwayLogging.information("[AudioStream] Avg queue: "+this.totalQueuedSize/this.decodedCount+", Max: "+this.maxQueuedSize+" Avg FPS: "+this.decodedCount/((I-this.startStreamTimeMs)/1e3)+" Avg decode: "+this.totalDecodingTimeMs/this.decodedCount+"ms, Max: "+this.maxDecodingTimeMs+"ms"),this.totalDecodingTimeMs=0,this.maxDecodingTimeMs=0,this.totalQueuedSize=0,this.maxQueuedSize=0,this.decodedCount=0,this.startStreamTimeMs=I)}resampleBufferThenScheduleForPlayback(A){const I=new(window.OfflineAudioContext||window.webkitOfflineAudioContext)(this.channelCount,this.resampledAudioBufferSize,this.audioContext.sampleRate),g=I.createBufferSource();g.buffer=A,g.connect(I.destination),g.start(),I.startRendering(),I.oncomplete=this.scheduleResampledBufferPlayback.bind(this,A)}scheduleResampledBufferPlayback(A,I){this.schedulePlaybackWithOnEnded(I.renderedBuffer),this.returnAudioBufferToPool(A,I)}scheduleBufferForPlayback(A){this.schedulePlaybackWithOnEnded(A,this.returnAudioBufferToPool.bind(this,A))}schedulePlaybackWithOnEnded(A,I=null){const g=this.audioContext.createBufferSource();g.buffer=A,this.nextStartTime||(this.nextStartTime=this.audioContext.currentTime),g.playbackRate.value=1,g.connect(this.volumeNode),g.start(this.nextStartTime),g.onended=I,this.nextStartTime+=A.duration}setVolume(A){this.volumeNode.gain.value=A}}},514:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.makeClientCapabilities=void 0;const B=g(904),e=g(643),Q=g(695);I.makeClientCapabilities=function(A){const{filtered:I,preferred:g}=Q.filterCodecPack(A),C={codec:B.AudioCodec.Opus,container:B.AudioContainer.Raw},i="MediaSource"in window?B.VideoContainer.IsoBMFF:B.VideoContainer.Raw;return{preferredWidth:screen.availWidth,preferredHeight:screen.availHeight,preferredFps:60,preferredAudioBitrate:96e3,preferredVideoBitrate:1e3*e.defaultRateControlParameters.initialBitrateKbps,preferredAudioChannels:B.AudioChannels.Stereo,preferredAudioConfig:C,preferredVideoConfig:{codec:g,container:i},supportedAudioChannels:[B.AudioChannels.Mono,B.AudioChannels.Stereo],supportedAudioConfigs:[C],supportedVideoConfigs:I.map((A=>({codec:A,container:i}))),supportsOver1080P:!1,supportsTemporalScaling:!0}}},695:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.filterCodecPack=I.videoCodecMimeType=void 0;const B=g(904);function e(A){const I=A.data;return`video/mp4; codecs="avc1.${(I[5]<<16|I[6]<<8|I[7]).toString(16).padStart(6,"0")}"`}function Q(A){if(!("MediaSource"in window))return!1;const I=A.data;if(I.length<8||7!=(31&I[4]))return!1;const g=e(A);return MediaSource.isTypeSupported(g)}function C(A){const I=A.data;if(I.length<8||7!=(31&I[4]))return B.VideoCodecType.Baseline;const g=I[5];return I[6],116==g||122==g||110==g||100==g?B.VideoCodecType.High:88==g||77==g?B.VideoCodecType.Main:B.VideoCodecType.Baseline}I.videoCodecMimeType=e,I.filterCodecPack=function(A){if(!A||0===A.length)throw new Error("Host supplied an empty CodecPack");let I=A.filter(Q);if(0===I.length&&(console.warn("Found no browser-confirmed working codec, falling back to baseline"),I=A.filter((A=>C(A)<=B.VideoCodecType.Baseline))),0===I.length)throw new Error("Host supplied an unsupported CodecPack");const g=I.reduce(((A,I)=>C(A)>C(I)?A:I));return{filtered:I,preferred:g}}},919:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0});const B=g(464);class e{constructor(A,I,g){this.glCtx=void 0,this.program=void 0,this.glCtx=A,this.program=this.glCtx.createProgram(),this.glCtx.attachShader(this.program,I),this.glCtx.attachShader(this.program,g),this.glCtx.linkProgram(this.program),this.glCtx.getProgramParameter(this.program,this.glCtx.LINK_STATUS)||B.RainwayLogging.error("Shader link failed.")}static compile(A,I,g){let e;return e="vertex"===I?A.createShader(A.VERTEX_SHADER):A.createShader(A.FRAGMENT_SHADER),A.shaderSource(e,g),A.compileShader(e),0==A.getShaderParameter(e,A.COMPILE_STATUS)&&B.RainwayLogging.error("Shader compile failed, log: "+A.getShaderInfoLog(e)),e}static create(A,I,g){const B=e.compile(A,"vertex",I),Q=e.compile(A,"fragment",g);return new e(A,B,Q)}use(){this.glCtx.useProgram(this.program)}getAttributeLocation(A){return this.glCtx.getAttribLocation(this.program,A)}getUniformLocation(A){const I=this.glCtx.getUniformLocation(this.program,A);if(I)return I}setMatrixUniform(A,I){this.glCtx.uniformMatrix4fv(A,!1,I)}}I.default=e},756:function(A,I,g){"use strict";var B=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0}),I.yuvFragShaderSrc=void 0;const e=B(g(919));I.yuvFragShaderSrc="\n    precision lowp float;\n    \n    varying vec2 vTexCoord;\n    \n    uniform sampler2D yTexture;\n    uniform sampler2D uTexture;\n    uniform sampler2D vTexture;\n    const mat3 conversion = mat3(\n        1.164, 0.000,  1.596,\n        1.164, -0.391, -0.813,\n        1.164, 2.018,  0.000\n    );\n\n    const vec3 offset = vec3(0.0625, 0.5, 0.5);\n        \n    void main(void) {\n        float y = texture2D(yTexture, vTexCoord).x;\n        float u = texture2D(uTexture, vTexCoord).x;\n        float v = texture2D(vTexture, vTexCoord).x;\n        vec3 yuv = vec3(y, u, v) - offset;\n\n        vec3 rgb = (yuv * conversion);\n\n        gl_FragColor = vec4(rgb, 1.0);\n    }\n";class Q{constructor(A,I,g,B,e,Q,C,i,t){this.glCtx=A,this.program=I,this.projectionMtxLoc=g,this.positionAttr=B,this.texCoordAttr=e,this.vertexBuffer=Q,this.yTextureLoc=C,this.uTextureLoc=i,this.vTextureLoc=t}static create(A){const g=e.default.create(A,"\n    precision mediump float;\n\n    uniform mat4 uProjection;\n    attribute vec2 aPosition;\n    attribute vec2 aTexCoord;\n\n    varying vec2 vTexCoord;\n    void main(){\n        vTexCoord = aTexCoord;\n        gl_Position = uProjection * vec4(aPosition, 0.0, 1.0);\n    }\n",I.yuvFragShaderSrc);g.use();const B=g.getUniformLocation("uProjection"),C=g.getAttributeLocation("aPosition");A.enableVertexAttribArray(C);const i=g.getAttributeLocation("aTexCoord");A.enableVertexAttribArray(i);const t=A.createBuffer(),E=g.getUniformLocation("yTexture"),o=g.getUniformLocation("uTexture"),a=g.getUniformLocation("vTexture");return new Q(A,g,B,C,i,t,E,o,a)}bindInputTextures(A,I,g){const B=this.glCtx;B.uniform1i(this.yTextureLoc,0),B.activeTexture(B.TEXTURE0),B.bindTexture(B.TEXTURE_2D,A.textureId),B.uniform1i(this.uTextureLoc,1),B.activeTexture(B.TEXTURE1),B.bindTexture(B.TEXTURE_2D,I.textureId),B.uniform1i(this.vTextureLoc,2),B.activeTexture(B.TEXTURE2),B.bindTexture(B.TEXTURE_2D,g.textureId)}use(){this.program.use()}drop(){this.glCtx.useProgram(0)}update(A,I,g,B){this.glCtx.viewport(0,0,A,I),this.program.setMatrixUniform(this.projectionMtxLoc,[2/A,0,0,0,0,2/-I,0,0,0,0,1,0,-1,1,0,1]),this.glCtx.bindBuffer(this.glCtx.ARRAY_BUFFER,this.vertexBuffer),this.glCtx.bufferData(this.glCtx.ARRAY_BUFFER,new Float32Array([0,0,0,0,A,0,g,0,A,I,g,B,A,I,g,B,0,I,0,B,0,0,0,0]),this.glCtx.DYNAMIC_DRAW),this.glCtx.vertexAttribPointer(this.positionAttr,2,this.glCtx.FLOAT,!1,16,0),this.glCtx.vertexAttribPointer(this.texCoordAttr,2,this.glCtx.FLOAT,!1,16,8)}draw(){const A=this.glCtx;A.clear(A.COLOR_BUFFER_BIT|A.DEPTH_BUFFER_BIT|A.STENCIL_BUFFER_BIT),A.drawArrays(A.TRIANGLE_STRIP,0,6),A.bindTexture(A.TEXTURE_2D,null)}}I.default=Q},346:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0});class g{constructor(A,I){this.glCtx=void 0,this.textureId=void 0,this.glCtx=A,this.textureId=I}static create(A){const I=A.createTexture();return A.bindTexture(A.TEXTURE_2D,I),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MAG_FILTER,A.NEAREST),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MIN_FILTER,A.NEAREST),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_S,A.CLAMP_TO_EDGE),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_T,A.CLAMP_TO_EDGE),A.bindTexture(A.TEXTURE_2D,null),new g(A,I)}uploadBuffer(A,I,g){const B=this.glCtx;B.bindTexture(B.TEXTURE_2D,this.textureId),B.texImage2D(B.TEXTURE_2D,0,B.LUMINANCE,I,g,0,B.LUMINANCE,B.UNSIGNED_BYTE,A),B.bindTexture(B.TEXTURE_2D,null)}delete(){null!=this.glCtx&&0!=this.textureId&&(this.glCtx.deleteTexture(this.textureId),this.textureId=0)}}I.default=g},425:function(A,I,g){"use strict";var B,e=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},Q=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},C=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.MediaManager=I.RainwayVideoFormat=I.RainwayVideoDecoder=void 0;const i=g(900),t=g(585),E=g(78),o=g(914),a=g(146);var n,s;!function(A){A[A.MSE=0]="MSE",A[A.Software=1]="Software"}(n=I.RainwayVideoDecoder||(I.RainwayVideoDecoder={})),function(A){A[A.AnnexB=0]="AnnexB",A[A.LengthPrefixed=1]="LengthPrefixed"}(s=I.RainwayVideoFormat||(I.RainwayVideoFormat={})),I.MediaManager=class{constructor(A,I){var g;B.set(this,void 0),this.overlayEnabled=!1,Q(this,B,{video:Object.assign(Object.assign({codecString:'video/mp4; codecs="avc1.42c020"'},this.autodetectVideoConfiguration()),A.video),videoPerformance:null!==(g=A.videoPerformance)&&void 0!==g?g:{},audio:Object.assign({},A.audio)}),C(this,B).video.decoder===n.Software?this.videoStream=new a.VideoStreamSoftwareDecoder(C(this,B).video.codecString,s.LengthPrefixed):this.videoStream=new i.VideoStreamMSE(C(this,B).video.codecString),this.audioStream=new t.AudioStream,this.audioStream.configure(C(this,B).audio),this.videoPerformanceMonitor=new E.VideoPerformanceMonitor(this.videoStream,C(this,B).videoPerformance),this.videoStatsOverlay=new o.VideoStatsOverlay(this.videoStream,C(this,B).video.decoder===n.Software,I)}get videoReadyStateChangeEvent(){return this.videoStream.readyStateChangeEvent}get videoNeedsRestartEvent(){return this.videoStream.needsRestartEvent}get audioContext(){return this.audioStream.audioContext}initialize(){return e(this,void 0,void 0,(function*(){yield this.audioStream.initialize(),this.audioStream.play()}))}get config(){return C(this,B)}autodetectVideoConfiguration(){return{decoder:window.MediaSource?n.MSE:n.Software}}setContainer(A){if(this.disposeVideoElement(),this.disposeCanvasElement(),this.disposeOverlayCanvasElement(),this.clearContainer(),this.container=A,C(this,B).video.decoder===n.MSE){const A=this.createVideoElement();if(this.overlayEnabled){const I=this.createOverlayCanvasElement();this.showOverlayElement(I),this.videoStatsOverlay.setElements({video:A,canvas:I,usingOutputCanvas:!1})}this.showStreamElement(A)}else{const A=this.createCanvasElement();if(this.showStreamElement(A),this.overlayEnabled){const A=this.createOverlayCanvasElement();this.showOverlayElement(A),this.videoStatsOverlay.setElements({canvas:A,usingOutputCanvas:!1})}}}unsetContainer(){this.disposeVideoElement(),this.disposeCanvasElement(),this.disposeOverlayCanvasElement(),this.container=void 0}clearContainer(){var A,I,g,B,e,Q;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-video"))||void 0===I||I.remove(),null===(B=null===(g=this.container)||void 0===g?void 0:g.querySelector(".rainway-canvas"))||void 0===B||B.remove(),null===(Q=null===(e=this.container)||void 0===e?void 0:e.querySelector(".rainway-overlay-canvas"))||void 0===Q||Q.remove()}showOverlayElement(A){Object.assign(A.style,{position:"absolute",top:"0",bottom:"0",left:"0",right:"0",width:"100%",height:"100%",pointerEvents:"none"})}createVideoElement(){var A,I;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-video"))||void 0===I||I.remove(),this.videoElement=document.createElement("video");const g=this.videoElement;return g.className="rainway-video",g.autoplay=!0,g.muted=!0,this.container.appendChild(g),this.videoStream.attachToElement(g),this.videoElement}disposeVideoElement(){this.videoElement&&(this.videoStream.detachFromElement(),this.videoElement.remove(),this.videoElement=void 0)}createOverlayCanvasElement(){var A,I,g;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-overlay-canvas"))||void 0===I||I.remove(),this.canvasElement=document.createElement("canvas");const B=this.canvasElement;return B.className="rainway-overlay-canvas",this.container.appendChild(B),null===(g=B.getContext("2d"))||void 0===g||g.clearRect(0,0,B.width,B.height),B}disposeOverlayCanvasElement(){this.overlayCanvasElement&&(this.overlayCanvasElement.remove(),this.overlayCanvasElement=void 0)}createCanvasElement(){var A,I,g;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-canvas"))||void 0===I||I.remove(),this.canvasElement=document.createElement("canvas");const B=this.canvasElement;return B.className="rainway-canvas",this.container.appendChild(B),this.videoStream instanceof a.VideoStreamSoftwareDecoder&&this.videoStream.attachToCanvas(B),null===(g=B.getContext("2d"))||void 0===g||g.clearRect(0,0,B.width,B.height),B}disposeCanvasElement(){this.canvasElement&&(this.videoStream instanceof a.VideoStreamSoftwareDecoder&&this.videoStream.detachFromCanvas(),this.canvasElement.remove(),this.canvasElement=void 0)}hideStreamElement(A){A.style.width="0",A.style.height="0"}showStreamElement(A){this.container&&(this.streamElement=A,A.style.width="100%",A.style.height="100%",A.style.display="block",A.style.objectFit="contain")}pause(){this.videoStream.pause(),this.audioStream.stop()}play(){this.videoStream.play(),this.audioStream.play()}renderVideoFrame(A,I){this.videoStream.pushData(A,I)}processAudio(A){this.audioStream.pushData(A)}getVideoStats(){return this.videoStream.getStats()}configureAudio(A){return e(this,void 0,void 0,(function*(){C(this,B).audio=Object.assign(Object.assign({},C(this,B).audio),A),this.audioStream.configure(A)}))}enableStatsOverlay(){this.overlayEnabled=!0,this.videoStatsOverlay.enable()}disableStatsOverlay(){this.overlayEnabled=!1,this.videoStatsOverlay.disable()}dispose(){this.pause(),this.unsetContainer(),this.videoStream instanceof a.VideoStreamSoftwareDecoder&&this.videoStream.dispose()}setVolume(A){this.audioStream.setVolume(A)}},B=new WeakMap},633:function(A,I){"use strict";var g,B=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},e=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)},Q=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g};Object.defineProperty(I,"__esModule",{value:!0}),I.CircularBuffer=I.average=I.createSourceBuffer=I.awaitMediaSourceOpen=I.createMediaSource=I.MediaUnsupportedError=void 0;class C extends Error{}function i(A,I){return B(this,void 0,void 0,(function*(){return new Promise(((g,B)=>{let e=!1;const Q=()=>{A.removeEventListener("sourceopen",C),null==I||I.removeHandler(E),window.clearInterval(t),e=!0},C=()=>{Q(),g(!0)},i=()=>{e||"open"===A.readyState&&(Q(),g(!0))},t=window.setInterval(i,500);i(),window.setTimeout((()=>{e||(Q(),B(new Error("MediaSource open timed out.")))}),1e4),A.addEventListener("sourceopen",C);const E=()=>{Q(),g(!1)};null==I||I.addHandler(E)}))}))}I.MediaUnsupportedError=C,I.createMediaSource=function(A,I){return B(this,void 0,void 0,(function*(){if(!window.MediaSource)throw new C("Browser does not support MSE.");const g=new MediaSource,B=window.URL.createObjectURL(g);if(A.src=void 0,A.src=B,A.load(),yield i(g,I))return g.duration=Number.POSITIVE_INFINITY,g}))},I.awaitMediaSourceOpen=i,I.createSourceBuffer=function(A,I){const g=A.addSourceBuffer(I);return g.mode="sequence",g},I.average=function(A){return 0===A.length?0:A.reduce(((A,I)=>A+I),0)/A.length},I.CircularBuffer=class{constructor(A){this.maxLength=A,this.nextIndex=0,this.list=Array(this.maxLength),g.set(this,0)}get length(){return e(this,g)}push(A){this.list[this.nextIndex++]=A,Q(this,g,Math.max(e(this,g),this.nextIndex)),this.nextIndex%=this.maxLength}values(){return this.list.slice(0,e(this,g))}},g=new WeakMap},78:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.VideoPerformanceMonitor=void 0;const B=g(198),e=g(434),Q=g(464),C=g(24),i={targetFramerate:60,bufferLimitMs:500,cpuStarvationThreshold:3,decoderStrugglingThreshold:4,checkInterval:2e3,windowMs:5e3};I.VideoPerformanceMonitor=class{constructor(A,I={}){this.videoStream=A,this.decoderStrugglingEvent=new C.Action,this.cpuStarvationEvent=new C.Action,this.cpuStarvationCounter=0,this.decoderStrugglingCounter=0,this.readyStateChangeHandler=A=>{A===e.VideoReadyState.Detached?this.stopChecking():this.lastVideoReadyState===e.VideoReadyState.Detached&&this.startChecking(),this.lastVideoReadyState=A},this.videoFrameMetadataHandler=A=>{this.processingDurationTrack.feed(A)},this.checkPerformance=()=>{if(this.videoStream.readyState===e.VideoReadyState.Playing){const A=1/this.config.targetFramerate,I=1e3*A,g=Math.floor(this.config.bufferLimitMs/I),B=this.videoStream.getStats();(B.endOfBuffered>B.currentTime+this.config.bufferLimitMs/1e3||this.videoStream.dataQueueLength>g)&&this.videoStream.restart(),this.videoStream.dataQueueLength>g?this.cpuStarvationCounter+=1:this.cpuStarvationCounter=Math.max(0,this.cpuStarvationCounter-1);const e=this.processingDurationTrack.average();Q.RainwayLogging.debug(`Average video processing duration: ${e}`),e>A?(this.decoderStrugglingCounter+=1,this.cpuStarvationCounter=Math.max(0,this.cpuStarvationCounter-1)):this.decoderStrugglingCounter=Math.max(0,this.decoderStrugglingCounter-1),this.cpuStarvationCounter,this.config.cpuStarvationThreshold,this.decoderStrugglingCounter,this.config.decoderStrugglingThreshold}},this.config=Object.assign(Object.assign({},i),I),this.processingDurationTrack=new B.WindowTrack(this.config.windowMs,B.meanOrZero),this.videoStream.readyStateChangeEvent.addHandler(this.readyStateChangeHandler),this.videoStream.videoFrameProcessingDurationEvent.addHandler(this.videoFrameMetadataHandler),this.lastVideoReadyState=this.videoStream.readyState,this.videoStream.readyState!==e.VideoReadyState.Detached&&this.startChecking()}dispose(){this.stopChecking(),this.videoStream.readyStateChangeEvent.removeHandler(this.readyStateChangeHandler),this.videoStream.videoFrameProcessingDurationEvent.removeHandler(this.videoFrameMetadataHandler)}startChecking(){this.processingDurationTrack=new B.WindowTrack(this.config.windowMs,B.meanOrZero),this.checkPerformanceInterval=window.setInterval(this.checkPerformance,this.config.checkInterval)}stopChecking(){this.checkPerformanceInterval&&(window.clearInterval(this.checkPerformanceInterval),this.checkPerformanceInterval=void 0)}}},914:function(A,I,g){"use strict";var B=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStatsOverlay=void 0;const e=g(146),Q=g(434),C=g(198),i=5e3,t={droppedFrames:"Dropped frames",totalFrames:"Total frames",currentTime:"Current video time",endOfBuffered:"End of video buffer",endOfSeekable:"End of video seekable",dataInterval:"Video data interval",dataSize:"Video frame size",processingDuration:"Frame processing duration"};I.VideoStatsOverlay=class{constructor(A,I,g){this.videoStream=A,this.usingOutputCanvas=I,this.getStats=g,this.compositingTimeTrack=new C.WindowTrack(i,C.mean),this.processingDurationTrack=new C.WindowTrack(i,C.mean),this.frameTrack=new C.WindowTrack(i,C.mean),this.drawIntervalTrack=new C.WindowTrack(i,C.mean),this.displayTimeIntervalTrack=new C.WindowTrack(i,C.mean),this.frameCounter=0,this.throughput=[],this.fetchStats=()=>B(this,void 0,void 0,(function*(){this.videoStream.readyState===Q.VideoReadyState.Playing&&(this.stats=this.videoStream.getStats(),this.lastTransportStats=this.transportStats,this.transportStats=yield this.getStats(),this.throughput=this.getThroughput())})),this.animationFrameHandler=()=>{this.frameTrack.feed(this.frameCounter),this.frameCounter=0,this.animationFrameHandle=window.requestAnimationFrame(this.animationFrameHandler)},this.drawStatsOnlyOnAnimationFrame=()=>{if(this.drawStatsOnlyHandle=window.requestAnimationFrame(this.drawStatsOnlyOnAnimationFrame),!this.canvasContext||this.videoStream.readyState!==Q.VideoReadyState.Playing)return;const A=this.canvasContext;this.usingOutputCanvas||(A.canvas.width!==A.canvas.clientWidth&&(A.canvas.width=A.canvas.clientWidth),A.canvas.height!==A.canvas.clientHeight&&(A.canvas.height=A.canvas.clientHeight),A.clearRect(0,0,A.canvas.width,A.canvas.height)),this.drawStats()},this.drawStatsAndGraphsOnVideoFrame=([A,I])=>{if(this.frameCounter++,!this.canvasContext||this.videoStream.readyState!==Q.VideoReadyState.Playing||!I)return;const g=this.canvasContext;this.usingOutputCanvas||(g.canvas.width!==g.canvas.clientWidth&&(g.canvas.width=g.canvas.clientWidth),g.canvas.height!==g.canvas.clientHeight&&(g.canvas.height=g.canvas.clientHeight),g.clearRect(0,0,g.canvas.width,g.canvas.height));const B=performance.now();this.lastCanvasDrawTime&&this.drawIntervalTrack.feed(B-this.lastCanvasDrawTime),this.lastCanvasDrawTime=B;const e=I.expectedDisplayTime;this.lastDisplayTime&&this.displayTimeIntervalTrack.feed(e-this.lastDisplayTime),this.lastDisplayTime=e,this.compositingTimeTrack.feed(I.expectedDisplayTime-A),this.processingDurationTrack.feed(I.processingDuration);const C=g.canvas;C.width,C.clientWidth,C.height,C.clientHeight,this.drawStats(I)}}setElements({video:A,canvas:I,usingOutputCanvas:g=!1}){this.usingOutputCanvas=g,this.canvas=I,this.video=A,this.canvas&&(this.canvasContext=this.canvas.getContext("2d",{alpha:!this.usingOutputCanvas}))}enable(){this.animationFrameHandle&&window.cancelAnimationFrame(this.animationFrameHandle),this.drawStatsOnlyHandle&&window.cancelAnimationFrame(this.drawStatsOnlyHandle),this.videoStream instanceof e.VideoStreamSoftwareDecoder||"requestVideoFrameCallback"in HTMLVideoElement.prototype?(this.animationFrameHandle=window.requestAnimationFrame(this.animationFrameHandler),this.videoStream.videoFrameEvent.addHandler(this.drawStatsAndGraphsOnVideoFrame)):this.drawStatsOnlyHandle=window.requestAnimationFrame(this.drawStatsOnlyOnAnimationFrame),this.statsInterval=window.setInterval(this.fetchStats,1e3)}disable(){this.animationFrameHandle&&window.cancelAnimationFrame(this.animationFrameHandle),this.drawStatsOnlyHandle&&window.cancelAnimationFrame(this.drawStatsOnlyHandle),this.videoStream.videoFrameEvent.removeHandler(this.drawStatsAndGraphsOnVideoFrame),window.clearInterval(this.statsInterval)}getThroughput(){var A;return this.transportStats&&this.lastTransportStats?Object.entries(null===(A=this.transportStats)||void 0===A?void 0:A.channels).map((([A,I])=>this.lastTransportStats?[A,I.bytesSent-this.lastTransportStats.channels[A].bytesSent,I.bytesReceived-this.lastTransportStats.channels[A].bytesReceived]:[A,0,0])):[]}drawStats(A){var I,g;if(!this.canvasContext||this.videoStream.readyState!==Q.VideoReadyState.Playing)return;const B=this.canvasContext,e=B.canvas,C=e.width/e.clientWidth,i=e.height/e.clientHeight,E=this.throughput;if(this.stats){const Q=Object.entries(this.stats),o=Q.length+E.length,a=B.measureText("M").width;B.fillStyle="rgba(0, 0, 0, 0.5)";const n=(o+2)*a+2*(a+2*i)+15*i;B.fillRect(10*C,e.height-(n+10*i),300*C,n),B.fillStyle="white",B.font=`${(12*C).toFixed(0)}px sans-serif`,B.textBaseline="top";let s=0;const r=e.height-(n+15*i)+15*C;A?B.fillText(`Resolution: ${A.width}x${A.height}`,15*C,r):B.fillText(`Resolution: ${null===(I=this.video)||void 0===I?void 0:I.videoWidth}x${null===(g=this.video)||void 0===g?void 0:g.videoHeight}`,15*C,r),B.fillText(`Element size: ${e.clientWidth}x${e.clientHeight}`,15*C,r+a);for(const[A,I]of Q){let g,e="";"processingDuration"===A?(e="ms",g=1e3*I):g=I,"endOfBuffered"===A||"endOfSeekable"===A||"currentTime"===A?e="s":"dataInterval"===A?e="ms":"dataSize"===A&&(e="bytes"),B.fillText(`${t[A]}: ${g.toFixed(2)} ${e}`,15*C,s*(a+2*i)+2*(a+2*i)+r),s++}for(const[A,I,g]of E)B.fillText(`${A} throughput - up: ${(I/1e3).toFixed(0)} kb/s, down: ${(g/1e3).toFixed(0)} kb/s`,15*C,s*(a+2*i)+2*(a+2*i)+r),s++}}}},441:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStats=void 0;const B=g(994),e=g(633);I.VideoStats=class{constructor(){this.processingDurations=new Map,this.dataIntervals=new e.CircularBuffer(60),this.dataSizes=new e.CircularBuffer(60),this.totalFrames=0,this.presentedFrames=0}pushFrameMetadata(A){this.presentedFrames+=1;const{processingDuration:I}=A,g=(new Date).getTime();this.processingDurations.set(g,I);for(const[A]of this.processingDurations.entries())A<g-1e3&&this.processingDurations.delete(A)}reportFrameSubmitted(){this.totalFrames+=1}resetFrameCounts(){this.totalFrames=0,this.presentedFrames=0}pushData(A){this.dataSizes.push(A.byteLength);const I=(new Date).getTime();this.lastDataTimestamp&&this.dataIntervals.push(I-this.lastDataTimestamp),this.lastDataTimestamp=I}setElement(A){this.element=A}getReport(){if(!this.element)throw new B.RainwayError("getReport() has no video element");const A=e.average(Array.from(this.processingDurations.values())),I=this.element.buffered,g=I.length>0?I.end(I.length-1):0,Q=this.element.seekable,C=Q.length>0?Q.end(Q.length-1):0;return{processingDuration:A,droppedFrames:this.totalFrames-this.presentedFrames,totalFrames:this.totalFrames,dataInterval:e.average(this.dataIntervals.values()),dataSize:e.average(this.dataSizes.values()),currentTime:this.element.currentTime,endOfBuffered:g,endOfSeekable:C}}createReport(A,I){return{processingDuration:e.average(Array.from(this.processingDurations.values())),droppedFrames:null!=A?A:0,totalFrames:null!=I?I:0,dataInterval:e.average(this.dataIntervals.values()),dataSize:e.average(this.dataSizes.values()),currentTime:0,endOfBuffered:0,endOfSeekable:0}}}},900:function(A,I,g){"use strict";var B=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStreamMSE=void 0;const e=g(24),Q=g(633),C=g(434),i=g(464),t=g(441);function E(A){return 102===A[4]&&116===A[5]&&121===A[6]&&112===A[7]}I.VideoStreamMSE=class{constructor(A){this.codecString=A,this.readyState=C.VideoReadyState.Detached,this.needsRestartEvent=new e.Action,this.sourceOpenEvent=new e.Action,this.readyStateChangeEvent=new e.Action,this.videoFrameEvent=new e.Action,this.videoFrameProcessingDurationEvent=new e.Action,this.cancelInitializeEvent=new e.Action,this.dataQueue=[],this.stats=new t.VideoStats,this.justClearedBuffer=!1,this.lastBufferEnd=0,this.framesFrozenFor=0,this.ensureBuffer=()=>{this.readyState!==C.VideoReadyState.Paused&&this.readyState!==C.VideoReadyState.Detached&&this.element&&0===this.element.buffered.length&&this.restart()},this.videoFrameHandler=(A,I)=>{(null==I?void 0:I.processingDuration)&&this.videoFrameProcessingDurationEvent.invoke(I.processingDuration),I&&this.stats.pushFrameMetadata(I),this.videoFrameEvent.invoke([A,I]),this.requestNextFrameCallback()},this.fallbackVideoFrameHandler=A=>{this.videoFrameHandler(A,void 0)},this.sourceBufferUpdateHandler=()=>{this.submitData()},window.___rainwayStream=this}info(A){i.RainwayLogging.information(`[VideoStream] ${String(A)}`)}debug(A){i.RainwayLogging.debug(`[VideoStream] ${String(A)}`)}get dataQueueLength(){return this.dataQueue.length}attachToElement(A){this.info("Attaching to element: "+A),this.cancelInitializeEvent.invoke(),this.element=A,this.stats.setElement(this.element),this.stats.resetFrameCounts(),this.restart(),this.info("Attached to element.")}detachFromElement(){this.destroyMedia(),this.element=void 0,this.setReadyState(C.VideoReadyState.Detached),this.info("Detached from element.")}pause(){this.setReadyState(C.VideoReadyState.Paused)}play(){this.readyState===C.VideoReadyState.Paused&&this.restart()}pushData(A,I){const g=new Uint8Array(I);this.stats.pushData(g),this.readyState!==C.VideoReadyState.Paused&&(E(g)&&this.readyState===C.VideoReadyState.WaitingForKeyframe&&this.element&&(this.debug("Got requested keyframe."),this.getStats(),this.dataQueue.push(g),this.submitData(),this.initializeMedia()),this.readyState!==C.VideoReadyState.WaitingForKeyframe&&this.element?(this.dataQueue.push(g),this.submitData()):this.startEnsuringBuffer())}getStats(){return this.stats.getReport()}setReadyState(A){this.info(`ReadyState changed: ${C.VideoReadyState[this.readyState]} => ${C.VideoReadyState[A]}`),this.readyState=A,this.readyStateChangeEvent.invoke(A)}submitData(){if(0!==this.dataQueue.length)if(void 0!==this.mediaSource)if(this.sourceBuffer)if(this.sourceBuffer.updating)this.debug("Idling because sourceBuffer.updating");else if(this.element){if(this.sourceBuffer.buffered.length>=1){const A=this.sourceBuffer.buffered.end(this.sourceBuffer.buffered.length-1);this.justClearedBuffer&&(this.element.currentTime=A,this.justClearedBuffer=!1),A===this.lastBufferEnd?this.framesFrozenFor++:this.framesFrozenFor=0,this.lastBufferEnd=A}if(this.framesFrozenFor>0&&this.debug(`Frozen for ${this.framesFrozenFor} frames...`),this.framesFrozenFor>=4)return this.restart(),void(this.framesFrozenFor=0);try{const A=this.dataQueue[0];if(E(A)&&!this.justClearedBuffer)return this.debug("Got keyframe. Clearing sourcebuffer."),this.getStats(),this.sourceBuffer.remove(0,1/0),void(this.justClearedBuffer=!0);this.dataQueue.shift(),this.sourceBuffer.appendBuffer(A),this.stats.reportFrameSubmitted()}catch(A){i.RainwayLogging.error(A),this.restart()}}else this.debug("Idling because !element");else this.debug("Idling because !sourceBuffer");else this.debug("Idling because mediaSource === undefined")}initializeMedia(){var A,I;return B(this,void 0,void 0,(function*(){if(this.setReadyState(C.VideoReadyState.Initializing),this.cancelInitializeEvent.invoke(),void 0!==this.mediaSource)return this.setReadyState(C.VideoReadyState.Playing),void(null===(A=this.element)||void 0===A||A.play());if(!this.element)throw new Error("Stream not attached to element.");try{const A=yield Q.createMediaSource(this.element,this.cancelInitializeEvent);if(!A)return void this.setReadyState(C.VideoReadyState.WaitingForKeyframe);this.mediaSource=A,this.sourceBuffer=Q.createSourceBuffer(this.mediaSource,this.codecString),this.sourceBuffer.addEventListener("updateend",this.sourceBufferUpdateHandler),this.startEnsuringBuffer(),this.setReadyState(C.VideoReadyState.Playing),this.requestNextFrameCallback(),this.submitData(),null===(I=this.element)||void 0===I||I.play()}catch(A){this.setReadyState(C.VideoReadyState.WaitingForKeyframe)}}))}startEnsuringBuffer(){void 0===this.ensureBufferInterval&&(this.debug("Starting ensureBuffer loop"),this.ensureBufferInterval=window.setInterval(this.ensureBuffer,1e3))}destroyMedia(){var A,I;if(this.debug("destroyMedia() called"),void 0!==this.mediaSource){if(this.cancelFrameCallback(),null===(A=this.element)||void 0===A||A.pause(),null===(I=this.sourceBuffer)||void 0===I||I.removeEventListener("updateend",this.sourceBufferUpdateHandler),this.mediaSource){if(this.sourceBuffer){try{this.mediaSource.removeSourceBuffer(this.sourceBuffer)}catch(A){}this.sourceBuffer=void 0}if("open"===this.mediaSource.readyState)try{this.mediaSource.endOfStream()}catch(A){}this.mediaSource=void 0,this.element&&window.URL.revokeObjectURL(this.element.src)}window.clearInterval(this.ensureBufferInterval),this.ensureBufferInterval=void 0,this.setReadyState(C.VideoReadyState.WaitingForKeyframe)}}restart(){this.info("Restarting video stream."),this.dataQueue=[],this.setReadyState(C.VideoReadyState.WaitingForKeyframe),this.needsRestartEvent.invoke()}requestNextFrameCallback(){var A,I,g,B;"requestVideoFrameCallback"in HTMLVideoElement.prototype?(this.frameHandle&&(null===(I=null===(A=this.element)||void 0===A?void 0:A.cancelVideoFrameCallback)||void 0===I||I.call(A,this.frameHandle),this.frameHandle=void 0),this.frameHandle=null===(B=null===(g=this.element)||void 0===g?void 0:g.requestVideoFrameCallback)||void 0===B?void 0:B.call(g,this.videoFrameHandler)):(this.frameHandle&&(window.cancelAnimationFrame(this.frameHandle),this.frameHandle=void 0),this.frameHandle=window.requestAnimationFrame(this.fallbackVideoFrameHandler))}cancelFrameCallback(){var A,I;"requestVideoFrameCallback"in HTMLVideoElement.prototype?this.frameHandle&&(null===(I=null===(A=this.element)||void 0===A?void 0:A.cancelVideoFrameCallback)||void 0===I||I.call(A,this.frameHandle),this.frameHandle=void 0):this.frameHandle&&(window.cancelAnimationFrame(this.frameHandle),this.frameHandle=void 0)}}},146:function(A,I,g){"use strict";var B=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStreamSoftwareDecoder=void 0;const e=g(434),Q=g(24),C=g(425),i=B(g(859)),t=B(g(756)),E=B(g(346)),o=g(464),a=g(441);I.VideoStreamSoftwareDecoder=class{constructor(A,I){this.codecString=A,this.format=I,this.readyState=e.VideoReadyState.Detached,this.needsRestartEvent=new Q.Action,this.readyStateChangeEvent=new Q.Action,this.videoFrameProcessingDurationEvent=new Q.Action,this.videoFrameEvent=new Q.Action,this.currentFrameInfo={containsSPS:!1,containsPPS:!1,containsFrameData:!0},this.paused=!1,this.stats=new a.VideoStats,this.totalFrames=0,this.waitingToDecodeQueue=[],this.decodeQueue=[],this.maxDecodeQueueSize=3,this.maxLatencyFrameCount=7,this.maxConsecutiveFramesDrops=3,this.framesDroppedSinceLastRender=0,this.totalFramesDropped=0,this.canvas=void 0,this.shader=void 0,this.yTexture=void 0,this.uTexture=void 0,this.vTexture=void 0,this.onDecode=({width:A,height:I,data:g})=>{if(0==this.decodeQueue.length)return o.RainwayLogging.error("[VideoStreamSoftwareDecoder] onDecode called with empty decoder queue!"),void this.sendDecoderWaitingToDecodeFrames();++this.totalFrames;const B=this.decodeQueue.shift();if(!this.paused){const e=Date.now();if(B.processingDuration=(e-B.mediaTime)/1e3,this.videoFrameProcessingDurationEvent.invoke(B.processingDuration),this.dataQueueLength>this.maxLatencyFrameCount&&this.framesDroppedSinceLastRender<this.maxConsecutiveFramesDrops)++this.framesDroppedSinceLastRender,++this.totalFramesDropped;else{this.framesDroppedSinceLastRender=0;const e=B.width,Q=B.height;B.width=A,B.height=I,this.stats.pushFrameMetadata(B),this.renderFrame(e,Q,g,A,I),this.videoFrameEvent.invoke([performance.now(),B])}}this.sendDecoderWaitingToDecodeFrames()},this.ensureBuffer=()=>{this.readyState===e.VideoReadyState.WaitingForKeyframe&&0===this.dataQueueLength&&(o.RainwayLogging.debug("Sending another request for a keyframe."),this.restart())},this.videoFormat=I,this.decoderWorker=new i.default,this.decoderWorker.initialize(),this.decoderWorker.onDecode=this.onDecode.bind(this),this.ensureBufferInterval=window.setInterval(this.ensureBuffer,1e3)}get dataQueueLength(){return this.waitingToDecodeQueue.length+this.decodeQueue.length}configure(A,I,g){this.maxDecodeQueueSize=A,this.maxLatencyFrameCount=I,this.maxConsecutiveFramesDrops=g}attachToElement(A){this.stats.resetFrameCounts(),this.readyState!=e.VideoReadyState.WaitingForKeyframe&&this.restart()}attachToCanvas(A){this.readyState!=e.VideoReadyState.WaitingForKeyframe&&this.restart(),this.canvas&&this.detachFromCanvas(),this.canvas=A;const I=A.getContext("webgl");this.shader=t.default.create(I),this.yTexture=E.default.create(I),this.uTexture=E.default.create(I),this.vTexture=E.default.create(I)}detachFromElement(){this.setReadyState(e.VideoReadyState.Detached)}detachFromCanvas(){this.decoderWorker.release(),this.yTexture&&this.yTexture.delete(),this.uTexture&&this.uTexture.delete(),this.vTexture&&this.vTexture.delete(),this.canvas=void 0}pause(){this.paused=!0,this.setReadyState(e.VideoReadyState.Paused)}play(){this.paused&&(this.paused=!1,this.restart())}restart(){this.totalFrames=0,this.totalFramesDropped=0,this.framesDroppedSinceLastRender=0,this.waitingToDecodeQueue=[],this.setReadyState(e.VideoReadyState.WaitingForKeyframe),this.needsRestartEvent.invoke()}pushData(A,I){var g,B,Q;if(this.stats.pushData(I),this.paused)return;const i=new Uint8Array(I);let t=!1;if(this.videoFormat==C.RainwayVideoFormat.LengthPrefixed?t=this.convertToAnnexbFormat(i):this.readyState==e.VideoReadyState.WaitingForKeyframe&&(t=this.parseAnnexbFrameInfo(i)),this.readyState==e.VideoReadyState.WaitingForKeyframe)if(t)this.setReadyState(e.VideoReadyState.Playing);else if(!(null===(g=this.currentFrameInfo)||void 0===g?void 0:g.containsFrameData))return((null===(B=this.currentFrameInfo)||void 0===B?void 0:B.containsSPS)||(null===(Q=this.currentFrameInfo)||void 0===Q?void 0:Q.containsPPS))&&this.decoderWorker.decode(i),this.currentFrameInfo.containsSPS=!1,this.currentFrameInfo.containsPPS=!1,void(this.currentFrameInfo.containsFrameData=!0);if(this.readyState!=e.VideoReadyState.WaitingForKeyframe&&this.currentFrameInfo.containsFrameData){const I={width:A.width,height:A.height,mediaTime:Date.now(),processingDuration:0,expectedDisplayTime:0,presentationTime:0,presentedFrames:0};this.decode(I,i)}}convertToAnnexbFormat(A){let I=!1;this.currentFrameInfo.containsFrameData=!1;for(let g=0;g<A.length;){const B=this.ntohl(A,g);A[g]=0,A[++g]=0,A[++g]=0,A[++g]=1,++g;const e=31&A[g];e<=5&&e>=1?(I=5==e,this.currentFrameInfo.containsFrameData=!0):7==e?this.currentFrameInfo.containsSPS=!0:8==e&&(this.currentFrameInfo.containsPPS=!0),g+=B}return I}ntohl(A,I){return(255&A[I])<<24|(255&A[I+1])<<16|(255&A[I+2])<<8|255&A[I+3]}parseAnnexbFrameInfo(A){let I=!1;this.currentFrameInfo.containsFrameData=!1;for(let g=0;g<A.length;)if(0==A[g]&&0==A[g+1]){let B=0;if(1==A[g+2]?(g+=3,B=31&A[g]):0==A[g+2]&&1==A[g+3]?(g+=4,B=31&A[g]):++g,B<=5&&B>=1){if(this.currentFrameInfo.containsFrameData=!0,5==B){I=!0;break}}else 7==B?this.currentFrameInfo.containsSPS=!0:8==B&&(this.currentFrameInfo.containsPPS=!0)}else++g;return I}decode(A,I){0==this.decodeQueue.length?(0!=this.waitingToDecodeQueue.length&&(o.RainwayLogging.error("[VideoStreamSoftwareDecoder] empty decoder queue, but waiting to decode queue not empty!"),this.waitingToDecodeQueue=[]),this.sendToDecoder(A,I)):(this.waitingToDecodeQueue.push({metadata:A,data:I}),this.decodeQueue.length<this.maxDecodeQueueSize&&this.sendDecoderWaitingToDecodeFrames())}sendDecoderWaitingToDecodeFrames(){for(;this.decodeQueue.length<this.maxDecodeQueueSize&&this.waitingToDecodeQueue.length>0;){const A=this.waitingToDecodeQueue.shift();this.sendToDecoder(A.metadata,A.data)}}sendToDecoder(A,I){this.stats.reportFrameSubmitted(),this.decodeQueue.push(A),this.decoderWorker.decode(I)}renderFrame(A,I,g,B,e){this.canvas.width=A,this.canvas.height=I;const Q=new Uint8Array(g),C=B*e,i=Q.subarray(0,C),t=C>>2,E=Q.subarray(C,C+t),o=Q.subarray(C+t,C+2*t);this.yTexture.uploadBuffer(i,B,e);const a=B>>1,n=e>>1;this.uTexture.uploadBuffer(E,a,n),this.vTexture.uploadBuffer(o,a,n),this.shader.bindInputTextures(this.yTexture,this.uTexture,this.vTexture);const s=A/B,r=I/e;this.shader.update(B,e,s,r),this.shader.draw()}getStats(){return this.stats.createReport(this.totalFramesDropped,this.totalFrames)}setReadyState(A){this.readyState=A,this.readyStateChangeEvent.invoke(A)}dispose(){o.RainwayLogging.debug("Disposing VideoStreamSoftwareDecoder"),this.readyState=e.VideoReadyState.Disposed,this.decoderWorker.release(),this.decoderWorker.dispose(),window.clearInterval(this.ensureBufferInterval)}}},104:function(A,I,g){"use strict";var B,e=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},Q=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)},C=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g};Object.defineProperty(I,"__esModule",{value:!0}),I.InstantRelay=I.getHandshakeDataBase64=I.getHostnameGuidString=I.makeHostnameGuidString=I.InstantRelayStatus=void 0;const i=g(290),t=g(994),E=g(464),o=g(904),a=g(24);var n;function s(A){const I=new Uint8Array(16);window.crypto.getRandomValues(I);const g=new DataView(I.buffer);return g.setUint32(0,A.organizationId,!0),g.setUint8(5,A.universeFlag),o.Guid.decode(I).value}function r(A,I,g){const B=o.PeerHello.encode({protocolVersion:BigInt(1),hostname:A,apiKey:I,externalId:g});return btoa(String.fromCharCode(...B)).replace(/=*$/,"").replace(/\+/g,"-").replace(/\//g,"_")}!function(A){A[A.Open=0]="Open",A[A.Closed=1]="Closed"}(n=I.InstantRelayStatus||(I.InstantRelayStatus={})),I.makeHostnameGuidString=s,I.getHostnameGuidString=function(A){var I;return e(this,void 0,void 0,(function*(){const g=yield i.getOrganizationInfo(A),B=`rainway-hostname-${g.organizationId.toString(16).padStart(8,"0")}-${g.universeFlag}`,e=null!==(I=localStorage.getItem(B))&&void 0!==I?I:s(yield i.getOrganizationInfo(A));return localStorage.setItem(B,e),e}))},I.getHandshakeDataBase64=r,I.InstantRelay=class{constructor(A,I,g,Q,C,i,s="wss://instantrelay.rainway.com"){this.ownHostname=A,this.apiKey=I,this.externalId=g,this.handlePeerInfo=Q,this.connectionRequestHandler=C,this.addAcceptedPeer=i,this.connections=new Map,this.connectionLostEvent=new a.Action,B.set(this,n.Closed),this.syncKey=0,this.hostnameToExternalId=new Map,this.onMessage=A=>e(this,void 0,void 0,(function*(){var I,g,B;if(void 0!==this.socket&&"[object ArrayBuffer]"===A.data.toString()){const e=o.RelayDatagram.decode(new Uint8Array(A.data)),{magicNumber:Q,syncKey:C,sourceHostname:i,destinationHostname:a,relayMessage:n}=e;if(Q!==o.RelayDatagram.opcode)return void E.RainwayLogging.warning("wrong magicNumber in "+JSON.stringify(e));if(a!==this.ownHostname)return void E.RainwayLogging.warning("message not for me? "+JSON.stringify(e));switch(n.discriminator){case o.RelayHello.discriminator:{const A=n.value;E.RainwayLogging.trace("got RelayHello"),null===(I=this.resolveConnectToRelayPromise)||void 0===I||I.call(this,A);break}case o.RelayAlert.discriminator:E.RainwayLogging.warning("RelayAlert: "+n.value);break;case o.RelayInitConnectionRequest.discriminator:E.RainwayLogging.warning("got InitConnectionRequest?! i am not a relay. ignoring");break;case o.RelayConnectionRequest.discriminator:{const{sourceExternalId:A,connectionRequestId:I}=n.value;this.hostnameToExternalId.set(i,A),this.connectionRequestHandler({hostname:i,externalId:n.value.sourceExternalId,accept:()=>{if(void 0===this.socket)throw new t.RainwayError("Couldn't send accept message because the connection to Rainway was lost.");const g=o.RelayDatagram.encode({magicNumber:o.RelayDatagram.opcode,syncKey:C,sourceHostname:this.ownHostname,destinationHostname:i,relayMessage:{discriminator:o.RelayConnectionAccepted.discriminator,value:{sourceExternalId:this.externalId,connectionRequestId:n.value.connectionRequestId,sessionTicket:"TODO",sessionProtocolVersion:BigInt(1)}}});this.socket.send(g),this.connections.set(i,{pending:!1,owned:!0,connectionRequestId:I}),this.addAcceptedPeer(i,A,I)},reject:A=>{if(void 0===this.socket)throw new t.RainwayError("Couldn't send reject message because the connection to Rainway was lost.");const I=o.RelayDatagram.encode({magicNumber:o.RelayDatagram.opcode,syncKey:C,sourceHostname:this.ownHostname,destinationHostname:i,relayMessage:{discriminator:o.RelayConnectionRejected.discriminator,value:{sourceExternalId:this.externalId,connectionRequestId:n.value.connectionRequestId,reason:A}}});this.socket.send(I)}});break}case o.RelayConnectionAccepted.discriminator:{const A=n.value.connectionRequestId,I=this.connections.get(i);if(void 0===I)return void E.RainwayLogging.warning("Ignoring RelayConnectionAccepted from unexpected hostname: "+i);if(!I.pending)return void E.RainwayLogging.warning("Ignoring RelayConnectionAccepted from already-connected hostname: "+i);I.resolve({canceled:!1,accepted:!0,connectionRequestId:A,hostExternalId:null!==(g=this.hostnameToExternalId.get(i))&&void 0!==g?g:"",transportProtocol:o.PeerTransportType.SCTP}),this.connections.set(i,{pending:!1,owned:!1,promise:I.promise,connectionRequestId:A});break}case o.RelayConnectionRejected.discriminator:{const A=n.value.connectionRequestId,I=this.connections.get(i);if(void 0===I)return void E.RainwayLogging.warning("Ignoring RelayConnectionRejected from unexpected hostname: "+i);if(!I.pending)return void E.RainwayLogging.warning("Ignoring RelayConnectionRejected from already-connected hostname: "+i);I.resolve({canceled:!1,accepted:!1,connectionRequestId:A,hostExternalId:null!==(B=this.hostnameToExternalId.get(i))&&void 0!==B?B:"",transportProtocol:o.PeerTransportType.SCTP,reason:n.value.reason}),this.connections.delete(i);break}case o.RelayPeerInformation.discriminator:E.RainwayLogging.trace("got peer info: "+JSON.stringify(n.value)),this.handlePeerInfo(n.value)}}})),this.onClose=A=>{this.die(A,"The connection to the Rainway server was closed.")},this.onError=A=>{this.die(A,"The connection to the Rainway server was lost.")},window.___rainwayRelay=this,this.url=s}get status(){return Q(this,B)}connect(){var A;return e(this,void 0,void 0,(function*(){return null!==(A=this.connectToRelayPromise)&&void 0!==A?A:this.connectToRelayPromise=new Promise(((A,I)=>{this.resolveConnectToRelayPromise=A,this.rejectConnectToRelayPromise=I,this.open()}))}))}open(){return e(this,void 0,void 0,(function*(){this.socket=yield this.makeWebSocket(this.url),E.RainwayLogging.debug("InstantRelay: connected WebSocket"),this.socket.addEventListener("message",this.onMessage),this.socket.addEventListener("close",this.onClose),C(this,B,n.Open)}))}makeWebSocket(A){return new Promise(((I,g)=>{const B=new WebSocket(A,["handshake",r(this.ownHostname,this.apiKey,this.externalId)]);B.binaryType="arraybuffer",B.onopen=()=>{I(B)},B.onerror=A=>{this.onError(A),g(A),this.connectToRelayPromise=void 0}}))}disconnect(){var A;if(E.RainwayLogging.debug("InstantRelay: close()"),void 0!==this.socket){this.socket.close(3e3,"Signaling websocket closed.");const A=this.socket;window.setTimeout((()=>{A.removeEventListener("close",this.onClose),A.removeEventListener("message",this.onMessage)}),0)}null===(A=this.rejectConnectToRelayPromise)||void 0===A||A.call(this,void 0),C(this,B,n.Closed),this.connectToRelayPromise=void 0,this.resolveConnectToRelayPromise=void 0,this.rejectConnectToRelayPromise=void 0,this.socket=void 0,this.connections.clear()}makeDatagram(A,I){return{magicNumber:o.RelayDatagram.opcode,syncKey:++this.syncKey,sourceHostname:this.ownHostname,destinationHostname:A,relayMessage:I}}connectToHost(A,I){const g=this.connections.get(A);if(void 0!==g){if(g.owned)throw new t.RainwayError("already connected in other direction");return g.promise}if(void 0===this.socket)throw new t.RainwayError("socket undefined in sendInitConnectionRequest");if(this.status!==n.Open)throw new t.RainwayError("signaling channel not open in sendInitConnectionRequest");const B=this.socket,e={pending:!0};return e.promise=new Promise(((g,Q)=>{e.resolve=g,e.reject=Q,E.RainwayLogging.trace(`InstantRelay: Adding ${A} to pendingConnections`);const C=this.makeDatagram(A,{discriminator:o.RelayInitConnectionRequest.discriminator,value:{desiredTransport:I}});this.connections.set(A,e),B.send(o.RelayDatagram.encode(C))})),e.promise}cancelConnectionAttempt(A){const I=this.connections.get(A);void 0!==I&&I.pending&&(I.resolve({canceled:!0}),this.connections.delete(A))}deleteConnection(A){this.connections.delete(A)}sendPeerInfo(A,I,g){if(void 0===this.socket)throw new t.RainwayError("socket unset in InstantRelay.sendPeerInfo");const B=this.connections.get(A);if(void 0===B)throw new t.RainwayError(`can't send peer info to unknown hostname ${A}`);if(B.pending)throw new t.RainwayError(`can't send peer info to pending hostname ${A}`);const e=this.makeDatagram(A,{discriminator:o.RelayPeerInformation.discriminator,value:{connectionRequestId:B.connectionRequestId,type:I,data:g}}),Q=o.RelayDatagram.encode(e);this.socket.send(Q)}sendOffer(A,I){E.RainwayLogging.debug("sending offer: "+I),this.sendPeerInfo(A,o.PeerInformationType.Offer,I)}sendAnswer(A,I){E.RainwayLogging.debug("sending offer: "+I),this.sendPeerInfo(A,o.PeerInformationType.Answer,I)}sendCandidate(A,I){E.RainwayLogging.debug("sending candidate"+I.candidate),this.sendPeerInfo(A,o.PeerInformationType.Candidate,I.candidate)}die(A,I){var g,B;null===(g=this.rejectConnectToRelayPromise)||void 0===g||g.call(this,A),this.connectToRelayPromise=void 0,this.resolveConnectToRelayPromise=void 0,this.rejectConnectToRelayPromise=void 0;for(const I of this.connections.values())I.pending&&I.reject(A);this.connections.clear(),null===(B=this.connectionLostEvent)||void 0===B||B.invoke(new t.RainwayError(I))}unsetConnectToRelayPromise(){this.connectToRelayPromise=void 0,this.resolveConnectToRelayPromise=void 0,this.rejectConnectToRelayPromise=void 0}},B=new WeakMap},643:function(A,I,g){"use strict";var B=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayRateController=I.defaultRateControlParameters=I.QualityAdjustment=void 0;const e=g(198),Q=g(434),C=g(464),i=g(695);var t;!function(A){A[A.Up=0]="Up",A[A.Down=1]="Down"}(t=I.QualityAdjustment||(I.QualityAdjustment={})),I.defaultRateControlParameters={beatMs:2500,windowMs:4500,badBeats:2,goodBeats:4,backoffFactor:2,latenessThresholdMs:200,latenessSmoothingFactor:.9375,badLateFrameRatio:.75,initialBitrateKbps:5e3,qualityStepFactor:1.1875},I.RainwayRateController=class{constructor(A=I.defaultRateControlParameters,g,C,t){this.chosenVideoConfig=g,this.performanceMonitor=t,this.badBeatCount=0,this.goodBeatCount=0,this.lastAdjustment=void 0,this.history=[],this.lowestDelta=void 0,this.smoothLateness=0,this.framesThisBeat=0,this.lateFramesThisBeat=0,this.debugLatenessSmoothing=!1,this.badCpuPerfThisBeat=!1,this.badDecoderPerfThisBeat=!1,this.badCpuPerfHandler=()=>{this.badCpuPerfThisBeat=!0},this.badDecoderPerfHandler=()=>{this.badDecoderPerfThisBeat=!0},this.handleVideoReadyState=A=>{A===Q.VideoReadyState.Detached||A===Q.VideoReadyState.Paused||A===Q.VideoReadyState.WaitingForKeyframe?this.stop():this.start()},this.check=()=>B(this,void 0,void 0,(function*(){0!==this.framesThisBeat&&((yield this.beatIsBad())?this.badBeat():this.goodBeat(),this.framesThisBeat=0,this.lateFramesThisBeat=0,this.badCpuPerfThisBeat=!1,this.badDecoderPerfThisBeat=!1)})),this.backoff=1,this.chosenVideoConfigMimeType=i.videoCodecMimeType(g.codec),this.parameters=Object.assign(Object.assign({},I.defaultRateControlParameters),A),this.suggestBitrateKbps=C,this.currentBitrateKbps=this.parameters.initialBitrateKbps,this.frameVarianceMs=new e.WindowTrack(this.parameters.windowMs,e.standardDeviation)}debug(A){C.RainwayLogging.debug(`[RateController] ${A}`)}info(A){C.RainwayLogging.information(`[RateController] ${A}`)}start(){var A,I;this.checkInterval||(this.info("Starting rate control!"),this.checkInterval=window.setInterval(this.check,this.parameters.beatMs),null===(A=this.performanceMonitor)||void 0===A||A.cpuStarvationEvent.addHandler(this.badCpuPerfHandler),null===(I=this.performanceMonitor)||void 0===I||I.decoderStrugglingEvent.addHandler(this.badDecoderPerfHandler))}stop(){var A,I;this.checkInterval&&(this.info("Stopping rate control!"),window.clearInterval(this.checkInterval),this.checkInterval=void 0,null===(A=this.performanceMonitor)||void 0===A||A.cpuStarvationEvent.removeHandler(this.badCpuPerfHandler),null===(I=this.performanceMonitor)||void 0===I||I.decoderStrugglingEvent.removeHandler(this.badDecoderPerfHandler))}feedFrameTimestamp(A){const I=performance.now()-A;(void 0===this.lowestDelta||I<this.lowestDelta||Math.abs(this.lowestDelta-I)>5e4)&&(this.lowestDelta=I);const g=I-this.lowestDelta,B=this.parameters.latenessSmoothingFactor;if(this.smoothLateness=B*this.smoothLateness+(1-B)*g,this.framesThisBeat++,this.smoothLateness>=this.parameters.latenessThresholdMs&&this.lateFramesThisBeat++,this.debugLatenessSmoothing){const A=new Array(100);A.fill("-");const I=g,B=this.smoothLateness;A[50]=".",A[Math.max(0,Math.min(Math.round(I/10+50),99))]="L",A[Math.max(0,Math.min(Math.round(B/10+50),99))]="S",this.beatIsBad().then((g=>C.RainwayLogging.debug(`${A.join("")} L=${I} S=${B} bad=${g} ld=${this.lowestDelta}`)))}}decodingInfoAtBitrate(A){return navigator.mediaCapabilities.decodingInfo({type:"media-source",video:{width:this.chosenVideoConfig.codec.width,height:this.chosenVideoConfig.codec.height,framerate:this.chosenVideoConfig.codec.refreshRate,bitrate:1e3*A,contentType:i.videoCodecMimeType(this.chosenVideoConfig.codec)}})}capabilitiesBad(){return B(this,void 0,void 0,(function*(){if(!("MediaSource"in window))return!1;if(!("mediaCapabilities"in navigator))return!1;const A=yield this.decodingInfoAtBitrate(this.currentBitrateKbps),I=yield this.decodingInfoAtBitrate(this.bitrateOneStepDownKbps());return I.smooth&&!A.smooth||I.powerEfficient&&!A.powerEfficient}))}lateFrameRatioBad(){return this.lateFramesThisBeat/this.framesThisBeat>=this.parameters.badLateFrameRatio}beatIsBad(){return B(this,void 0,void 0,(function*(){return this.badDecoderPerfThisBeat||this.badCpuPerfThisBeat||this.lateFrameRatioBad()||(yield this.capabilitiesBad())}))}badBeat(){if(this.currentBitrateKbps<=this.lowestSupportedBitrateKbps())return void this.debug(`crashed at ${this.currentBitrateKbps}kbps, ignoring bad beat`);this.badBeatCount++,this.goodBeatCount=0;const A=this.currentBitrateKbps,I=this.parameters.badBeats;this.debug(`[${A}kbps] bad beat: ${this.badBeatCount}/${I}`),this.badBeatCount>=this.parameters.badBeats&&(this.lastAdjustment===t.Up?this.backoff*=this.parameters.backoffFactor:this.backoff=this.parameters.backoffFactor,this.goodBeatCount=this.badBeatCount=0,this.qualityDown(),this.debug(`going down in quality to ${this.currentBitrateKbps}kbps`))}goodBeat(){if(this.currentBitrateKbps>=this.highestSupportedBitrateKbps())return void this.debug(`maxed at ${this.currentBitrateKbps}kbps, ignoring good beat`);this.goodBeatCount++,this.badBeatCount=0;const A=this.currentBitrateKbps,I=this.parameters.goodBeats*this.backoff;this.debug(`[${A}kbps] good beat: ${this.goodBeatCount}/${I}`),this.goodBeatCount>=I&&(this.lastAdjustment===t.Up&&(this.backoff=1),this.goodBeatCount=this.badBeatCount=0,this.qualityUp(),this.debug(`going up in quality to ${this.currentBitrateKbps}kbps`))}bitrateOneStepUpKbps(){return Math.min(this.highestSupportedBitrateKbps(),this.currentBitrateKbps*this.parameters.qualityStepFactor)}bitrateOneStepDownKbps(){return Math.max(this.lowestSupportedBitrateKbps(),this.currentBitrateKbps/this.parameters.qualityStepFactor)}qualityUp(){this.currentBitrateKbps=this.bitrateOneStepUpKbps(),this.suggestBitrateKbps(this.currentBitrateKbps),this.lastAdjustment=t.Up,this.history.push({time:performance.now(),bitrate:this.currentBitrateKbps})}qualityDown(){this.currentBitrateKbps=this.bitrateOneStepDownKbps(),this.suggestBitrateKbps(this.currentBitrateKbps),this.lastAdjustment=t.Down,this.history.push({time:performance.now(),bitrate:this.currentBitrateKbps}),this.lowestDelta=void 0}lowestSupportedBitrateKbps(){return 2e3}highestSupportedBitrateKbps(){var A;return Number(null!==(A=new URLSearchParams(window.location.search).get("max-bitrate"))&&void 0!==A?A:1e4)}}},145:function(A,I,g){"use strict";var B,e=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},Q=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},C=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.RTCTransport=void 0;const i=g(994),t=g(9),E=g(464),o=g(904),a=g(987),n={iceServers:[{urls:"stun:stun.rainway.com:3478"}]};class s extends t.RainwayTransport{constructor(A,I,g,e,C){var a;super(),this.ownHostname=A,this.targetHostname=I,this.sendLocalOfferSdp=g,this.sendLocalAnswerSdp=e,this.sendLocalIceCandidate=C,B.set(this,t.RainwayTransportStatus.Disconnected),this.rtcConfiguration=n,this.dataChannelsConfig={},this.syncKey=0,this.currentStreamId=void 0,this.onRainwayMessage=()=>{},this.onApplicationMessage=()=>{},this.onClose=()=>{},this.handlePeerInfo=A=>{var I,g,B;if(console.log(A),A.type===o.PeerInformationType.Answer)null===(I=this.peerConnection)||void 0===I||I.setRemoteDescription({type:"answer",sdp:A.data});else if(A.type===o.PeerInformationType.Offer)console.log(A),console.log(this.peerConnection),null===(g=this.peerConnection)||void 0===g||g.setRemoteDescription({type:"offer",sdp:A.data}),this.sendAnswer();else{if(A.type!==o.PeerInformationType.Candidate){const I=o.PeerInformationType[A.type];throw new i.RainwayError(`unexpected PeerInformationType ${I} in handlePeerInfo`)}null===(B=this.peerConnection)||void 0===B||B.addIceCandidate(new RTCIceCandidate({candidate:A.data,sdpMid:"",sdpMLineIndex:0}))}},this.handleLocalIceCandidate=A=>{A.candidate&&"1"===A.candidate.candidate.split(" ")[1]&&this.sendLocalIceCandidate(A.candidate)},this.handleIceConnectionStateChange=()=>{var A,I;const g=null===(A=this.peerConnection)||void 0===A?void 0:A.iceConnectionState;E.RainwayLogging.information(`ICE connection state changed to ${g}`),"closed"===g?(this.onClose(),Q(this,B,t.RainwayTransportStatus.Disconnected),this.dispose()):"failed"===g&&(null===(I=this.openReject)||void 0===I||I.call(this),this.onClose(),Q(this,B,t.RainwayTransportStatus.Failed),this.dispose())},this.handleDataChannelMessage=A=>{const I=A.target.label;this.handleLabelAndData(I,new Uint8Array(A.data))},this.chunkedMessages=new Map;const s=new URLSearchParams(window.location.search),r=s.get("ordered"),d=null!==(a=s.get("maxRetransmits"))&&void 0!==a?a:s.get("max-retransmits"),h={ordered:"false"!==r,maxRetransmits:null==d?void 0:Number(d),protocol:"sctp",negotiated:!1};console.log(h),this.dataChannelsConfig={Logic:Object.assign({id:0},h),Video:Object.assign({id:1},h),Audio:Object.assign({id:2},h),Input:Object.assign({id:3},h),Arbitrary:Object.assign({id:4},h)}}sendMessage(A,I){var g;if(!A)throw new i.RainwayError("sendMessage: no label");if(!this.dataChannels)throw new i.RainwayError("sendMessage: dataChannels not initialized");const B=null===(g=this.dataChannels)||void 0===g?void 0:g[A];if(!B)throw new i.RainwayError(`sendMessage: channel "${A}" does not exist`);if("open"!==B.readyState)throw new i.RainwayError(`sendMessage: channel "${A}" is not open`);B.send(I)}get status(){return C(this,B)}get maxMessageSize(){var A,I,g;return null!==(g=null===(I=null===(A=this.peerConnection)||void 0===A?void 0:A.sctp)||void 0===I?void 0:I.maxMessageSize)&&void 0!==g?g:262144}getStats(){return e(this,void 0,void 0,(function*(){if(!this.peerConnection)throw new i.RainwayError("getStats() but no peerConnection");const A=yield this.peerConnection.getStats(void 0),I={channels:{},raw:A};return A.forEach((A=>{"data-channel"===A.type&&(I.channels[A.label]=A)})),I}))}checkHeader(A){if(2036430674!==A.magicNumber)throw new i.RainwayError("Invalid magicNumber in checkHeader.");if(A.destinationHostname!==this.ownHostname)throw new i.RainwayError("Invalid destination host name (not ours) in checkHeader.")}handleLabelAndData(A,I){if("Arbitrary"===A){const A=o.ArbitraryDatagram.decode(I);this.checkHeader(A.header),this.handleChunk("Arbitrary",A.body)}else if("Logic"===A){const A=o.LogicDatagram.decode(I);this.checkHeader(A.header),this.onRainwayMessage({kind:"Logic",body:A.body})}else if("Input"===A){const A=o.InputDatagram.decode(I);this.checkHeader(A.header),this.onRainwayMessage({kind:"Input",body:A.body})}else if("Audio"===A||"Video"==A){const g=o.MediaDatagram.decode(I);this.checkHeader(g.header),g.body.discriminator===o.MediaChunk.discriminator?this.handleChunk(A,g.body.value.chunk):this.onRainwayMessage({kind:"Media",body:g.body})}else console.warn(`Unknown label ${A}?`)}getDatagramHeader(A){return{magicNumber:2036430674,syncKey:A?++this.syncKey:0,sourceHostname:this.ownHostname,destinationHostname:this.targetHostname}}sendArbitraryDatagram(A){a.eachChunk(A,(A=>{this.sendMessage("Arbitrary",o.ArbitraryDatagram.encode({header:this.getDatagramHeader(!0),body:A}))}))}sendLogicDatagram(A){this.sendMessage("Logic",o.LogicDatagram.encode({header:this.getDatagramHeader(!0),body:A}))}sendInputDatagram(A){this.sendMessage("Input",o.InputDatagram.encode({header:this.getDatagramHeader(!1),body:A}))}open(A){return e(this,void 0,void 0,(function*(){yield new Promise(((I,g)=>e(this,void 0,void 0,(function*(){this.openResolve=I,this.openReject=g,Q(this,B,t.RainwayTransportStatus.Connecting),this.peerConnection=new RTCPeerConnection(this.rtcConfiguration),this.peerConnection.addEventListener("iceconnectionstatechange",this.handleIceConnectionStateChange),this.dataChannels||(this.dataChannels={});for(const[A,I]of Object.entries(this.dataChannelsConfig))this.dataChannels[A]=this.peerConnection.createDataChannel(A,I);const e=Object.keys(this.dataChannelsConfig).length;let C=0;for(const[A,g]of Object.entries(this.dataChannels)){g.binaryType="arraybuffer";const A=()=>{var i;++C,C===e&&(null===(i=this.peerConnection)||void 0===i||i.removeEventListener("icecandidate",this.handleLocalIceCandidate),Q(this,B,t.RainwayTransportStatus.Connected),I()),g.removeEventListener("open",A)};g.addEventListener("open",A),g.addEventListener("message",this.handleDataChannelMessage)}this.peerConnection.addEventListener("icecandidate",this.handleLocalIceCandidate),"offer"===A&&(yield this.sendOffer())}))))}))}sendOffer(){return e(this,void 0,void 0,(function*(){if(void 0===this.peerConnection)throw new i.RainwayError("sendOffer(): no peer connection");const A=yield this.peerConnection.createOffer();if(yield this.peerConnection.setLocalDescription(A),!A.sdp)throw new i.RainwayError("Created offer contained no sdp?");this.sendLocalOfferSdp(A.sdp)}))}sendAnswer(){return e(this,void 0,void 0,(function*(){if(void 0===this.peerConnection)throw new i.RainwayError("sendOffer(): no peer connection");const A=yield this.peerConnection.createAnswer();if(yield this.peerConnection.setLocalDescription(A),!A.sdp)throw new i.RainwayError("Created answer contained no sdp?");this.sendLocalAnswerSdp(A.sdp)}))}close(){var A;this.status!==t.RainwayTransportStatus.Disconnected&&this.status!==t.RainwayTransportStatus.Failed&&(E.RainwayLogging.debug("rtc-transport close()."),null===(A=this.peerConnection)||void 0===A||A.close(),this.onClose(),this.dispose())}dispose(){var A,I;if(null===(A=this.peerConnection)||void 0===A||A.removeEventListener("iceconnectionstatechange",this.handleIceConnectionStateChange),null===(I=this.peerConnection)||void 0===I||I.removeEventListener("icecandidate",this.handleLocalIceCandidate),this.dataChannels)for(const A of Object.values(this.dataChannels))A.removeEventListener("message",this.handleDataChannelMessage);this.dataChannels=void 0,this.peerConnection=void 0,this.openResolve=void 0,this.openReject=void 0}handleChunk(A,I){let g=this.chunkedMessages.get(I.groupId);if(g||(g={receivedChunkCount:0,chunks:[]},this.chunkedMessages.set(I.groupId,g)),g.chunks[I.index]=I.data,g.receivedChunkCount++,g.receivedChunkCount===I.chunksInGroup){this.chunkedMessages.delete(I.groupId);const B=a.reassemble(g);"Arbitrary"===A?this.onApplicationMessage(B):this.handleLabelAndData(A,B)}}sendKeyframeRequest(){void 0!==this.currentStreamId&&this.sendLogicDatagram({discriminator:o.KeyframeRequest.discriminator,value:{streamId:this.currentStreamId}})}sendVideoBitrateRequest(A){void 0!==this.currentStreamId&&this.sendLogicDatagram({discriminator:o.VideoBitrateRequest.discriminator,value:{streamId:this.currentStreamId,bitsPerSecond:A}})}}I.RTCTransport=s,B=new WeakMap},9:(A,I)=>{"use strict";var g;Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayTransport=I.RainwayTransportStatus=void 0,(g=I.RainwayTransportStatus||(I.RainwayTransportStatus={}))[g.Disconnected=0]="Disconnected",g[g.Connecting=1]="Connecting",g[g.Connected=2]="Connected",g[g.Failed=3]="Failed",I.RainwayTransport=class{}},420:function(A,I,g){"use strict";var B,e,Q,C,i=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},t=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},E=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayPeer=I.PeerState=void 0;const o=g(904),a=g(514),n=g(876),s=g(994);var r;!function(A){A[A.ExchangingInfo=0]="ExchangingInfo",A[A.Ready=1]="Ready",A[A.Disconnected=2]="Disconnected"}(r=I.PeerState||(I.PeerState={})),I.RainwayPeer=class{constructor(A,I,g,i,E,o,a){this.transport=g,this.outerOnClose=i,this.onError=E,this.onStreamAnnouncement=o,this.onStreamStop=a,B.set(this,r.ExchangingInfo),e.set(this,void 0),Q.set(this,void 0),C.set(this,void 0),t(this,Q,A),t(this,C,I),g.onRainwayMessage=this.onMessage.bind(this),g.onClose=this.onClose.bind(this),this.readyToStream=new Promise(((A,I)=>{this.resolveReadyToStream=A}))}get state(){return E(this,B)}get stream(){return E(this,e)}get hostname(){return E(this,Q)}get externalId(){return E(this,C)}onClose(){t(this,B,r.Disconnected),this.outerOnClose()}sendDeviceInfoAndExchangeCodecs(){if(E(this,B)===r.Disconnected)throw new s.RainwayError("Couldn't send device info and exchange codecs: peer is disconnected");this.sendDeviceInfo(),this.exchangeCodecs().then((A=>{var I;this.transport.sendLogicDatagram({discriminator:o.ClientCapabilities.discriminator,value:a.makeClientCapabilities(A)}),null===(I=this.resolveReadyToStream)||void 0===I||I.call(this),t(this,B,r.Ready)}))}onMessage(A){"Logic"===A.kind?this.handleLogicMessage(A.body):"Input"===A.kind?this.handleInputMessage(A.body):"Media"===A.kind&&this.handleMediaMessage(A.body)}sendDeviceInfo(){if(E(this,B)===r.Disconnected)throw new s.RainwayError("Couldn't send device info: peer is disconnected");this.transport.sendLogicDatagram({discriminator:o.DeviceInfo.discriminator,value:{isWeb:!0,formFactor:o.FormFactor.Computer,deviceName:"deviceName",deviceId:"deviceId",deviceModel:"",deviceOs:o.OperatingSystem.Other,deviceOsVersion:"",userAgent:navigator.userAgent}})}send(A){if(E(this,B)===r.Disconnected)throw new s.RainwayError("Couldn't send message: peer is disconnected");this.transport.sendArbitraryDatagram(A)}disconnect(){this.transport.close()}requestStream(A){return i(this,void 0,void 0,(function*(){if(E(this,B)===r.Disconnected)throw new s.RainwayError("Couldn't request stream: peer is disconnected");return yield this.readyToStream,this.transport.sendLogicDatagram({discriminator:o.StreamRequest.discriminator,value:{inputLevel:A}}),new Promise(((A,I)=>{this.resolveStream=A,this.rejectStream=I}))}))}handleLogicMessage(A){var I;return i(this,void 0,void 0,(function*(){if(A.discriminator===o.DeviceInfo.discriminator)console.log("Got remote DeviceInfo:",A.value);else if(A.discriminator===o.CodecPackRequest.discriminator)this.transport.sendLogicDatagram({discriminator:o.CodecPackResponse.discriminator,value:{videoCodecs:[]}});else if(A.discriminator===o.CodecPackResponse.discriminator)console.log("Got remote CodecPackResponse:",A.value),null===(I=this.codecsResolve)||void 0===I||I.call(this,A.value.videoCodecs);else if(A.discriminator===o.ClientCapabilities.discriminator)console.log("Got remote ClientCapabilities:",A.value);else if(A.discriminator===o.StreamRequest.discriminator)console.warn("Got remote StreamRequest?",A.value);else if(A.discriminator===o.StreamStarting.discriminator){if(console.log("Got remote StreamStarting:",A.value),void 0===this.resolveStream)throw this.onStreamAnnouncement({info:A.value,join:()=>i(this,void 0,void 0,(function*(){return t(this,e,yield this.createStream(A.value)),this.transport.sendLogicDatagram({discriminator:o.JoinStream.discriminator,value:{streamId:A.value.streamId}}),E(this,e)}))}),new s.RainwayError("TODO: handle an unsolicited stream");t(this,e,yield this.createStream(A.value)),this.transport.sendLogicDatagram({discriminator:o.JoinStream.discriminator,value:{streamId:A.value.streamId}}),this.resolveStream(E(this,e)),this.resolveStream=void 0,this.rejectStream=void 0}else A.discriminator===o.LeaveStream.discriminator?console.warn("Got remote LeaveStream?",A.value):A.discriminator===o.StreamStopping.discriminator&&(console.log("Got remote StreamStopping:",A.value),this.discardStream())}))}createStream(A){return n.RainwayStream.createAndInitialize(A.inputLevel,A.chosenAudioConfig,A.chosenVideoConfig,(A=>this.transport.sendInputDatagram(A)),(A=>this.transport.sendLogicDatagram(A)),(()=>this.transport.getStats()),(()=>this.discardStream()))}discardStream(){E(this,e)&&this.onStreamStop(E(this,e)),t(this,e,void 0)}handleInputMessage(A){if(void 0!==this.stream)if(A.discriminator===o.GamepadRumble.discriminator){const I=A.value.leftMotorSpeed,g=A.value.rightMotorSpeed;this.stream.vibrateGamepad(A.value.port,{duration:100,startDelay:0,strongMagnitude:Math.max(I,g)/65535,weakMagnitude:0})}else console.warn(`Got unrecognized Input discriminator ${A.discriminator}`)}handleMediaMessage(A){if(void 0!==this.stream)if(A.discriminator===o.VideoData.discriminator){const{data:I,segmentTime:g,type:B}=A.value,e=I.buffer.slice(I.byteOffset,I.byteOffset+I.length);this.stream.renderVideoFrame({timestamp:1e-4*Number(g),x:0,y:0,width:1920,height:1080},e)}else if(A.discriminator===o.PointerData.discriminator)this.stream.processCursor({x:A.value.positionX,y:A.value.positionY,spotX:A.value.spotX,spotY:A.value.spotY,shapeWidth:A.value.shapeWidth,shapeHeight:A.value.shapeHeight,extentWidth:A.value.monitorWidth,extentHeight:A.value.monitorHeight,visible:A.value.visible,hasPointerImage:A.value.data.length>0,pointerImage:A.value.data});else if(A.discriminator===o.AudioData.discriminator){const{data:I,type:g}=A.value,B=I.buffer.slice(I.byteOffset,I.byteOffset+I.length);this.stream.processAudio(B)}}exchangeCodecs(){return i(this,void 0,void 0,(function*(){if(E(this,B)===r.Disconnected)throw new s.RainwayError("Couldn't exchange codecs: peer is disconnected");const A=yield new Promise((A=>{this.transport.sendLogicDatagram({discriminator:o.CodecPackRequest.discriminator,value:{}}),this.codecsResolve=A}));return this.codecsResolve=void 0,A}))}},B=new WeakMap,e=new WeakMap,Q=new WeakMap,C=new WeakMap},783:function(A,I,g){"use strict";var B,e,Q,C,i,t,E=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},o=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},a=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayRuntime=void 0;const n=g(104),s=g(994),r=g(464),d=g(145),h=g(904),c=g(420);null!==(B=(Q=DataView.prototype).setBigUint64)&&void 0!==B||(Q.setBigUint64=function(A,I,g){const B=BigInt(4294967295),e=Number(I>>BigInt(32)&B),Q=Number(I&B),[C,i]=g?[4,0]:[0,4];this.setUint32(A+C,e,g),this.setUint32(A+i,Q,g)}),null!==(e=(C=DataView.prototype).getBigUint64)&&void 0!==e||(C.getBigUint64=function(A,I){const[g,B]=I?[4,0]:[0,4],e=BigInt(this.getUint32(A+g,I)),Q=BigInt(this.getUint32(A+B,I));return e<<BigInt(32)|Q});class D{constructor(A,I){i.set(this,void 0),t.set(this,new Map),this.connectionTransports=new Map,this.documentVisibilityChangeHandler=()=>{var A,I,g;if(document.hidden)for(const g of this.peers.values())null===(A=g.stream)||void 0===A||A.releaseKeys(),null===(I=g.stream)||void 0===I||I.pause();else for(const A of this.peers.values())null===(g=A.stream)||void 0===g||g.play()},this.windowBlurHandler=()=>{var A;for(const I of this.peers.values())null===(A=I.stream)||void 0===A||A.releaseKeys()},this.beforeUnloadHandler=A=>{const I=location.hash;return[...this.peers.values()].some((A=>void 0!==A.stream))&&(setTimeout((()=>{location.hash="?hj="+~~(9999*Math.random()),location.hash=I}),0),A.preventDefault(),A.returnValue=""),!1},window.___rainwayRuntime=this,o(this,i,A),this.config=Object.assign({externalId:"",preventUnloadingPage:!0,logSink:()=>{}},I),this.setLogSink(this.config.logSink),this.relay=new n.InstantRelay(a(this,i),this.config.apiKey,this.config.externalId,(A=>this.handlePeerInfo(A)),(A=>this.config.onConnectionRequest(A)),((A,I,g)=>this.addPeer(A,I,g,"answer"))),this.relay.connectionLostEvent.addHandler((A=>{a(this,t).clear(),this.config.onRuntimeConnectionLost(A)}))}get peers(){return[...a(this,t).values()]}static initialize(A){return E(this,void 0,void 0,(function*(){if(D.initialized)throw new s.RainwayError("RainwayRuntime may only be initialized once. Don't worry: you can manage multiple Rainway connections from a single RainwayRuntime object.");const I=yield n.getHostnameGuidString(A.apiKey),g=new D(I,A);return yield g.relay.connect(),window.addEventListener("beforeunload",(A=>g.beforeUnloadHandler(A))),window.addEventListener("blur",(A=>g.windowBlurHandler())),document.addEventListener("visibilitychange",(A=>g.documentVisibilityChangeHandler())),D.initialized=!0,g}))}getHostname(){return a(this,i)}connect(A){return E(this,void 0,void 0,(function*(){if(yield this.relay.connect(),a(this,t).has(A))throw new s.RainwayError(`Already connected to ${A}`);const I=yield this.relay.connectToHost(A,h.PeerTransportType.SCTP);if(I.canceled)throw new s.RainwayError("The connection attempt was canceled.");if(!I.accepted)throw new s.RainwayError(`The peer at ${A} rejected the connection, with reason: ${I.reason}`);return this.addPeer(A,I.hostExternalId,I.connectionRequestId,"offer")}))}addPeer(A,I,g,B){return E(this,void 0,void 0,(function*(){const e=new d.RTCTransport(a(this,i),A,(I=>this.relay.sendOffer(A,I)),(I=>this.relay.sendAnswer(A,I)),(I=>this.relay.sendCandidate(A,I))),Q=new c.RainwayPeer(A,I,e,(()=>{this.config.onPeerDisconnect(Q),this.relay.deleteConnection(A),a(this,t).delete(A)}),(A=>{this.config.onPeerError(Q,A)}),(A=>{this.config.onStreamAnnouncement(Q,A)}),(A=>{this.config.onStreamStop(A)}));this.connectionTransports.set(g,e),e.onApplicationMessage=A=>this.config.onPeerMessage(Q,A);try{yield e.open(B)}finally{this.connectionTransports.delete(g)}return Q.sendDeviceInfoAndExchangeCodecs(),a(this,t).set(A,Q),this.config.onPeerConnect(Q),Q}))}cancelConnectionAttempt(A){this.relay.cancelConnectionAttempt(A)}connectToRelay(){return E(this,void 0,void 0,(function*(){return yield this.relay.connect()}))}disconnectFromRelay(){a(this,t).clear(),this.relay.disconnect()}handlePeerInfo(A){const I=this.connectionTransports.get(A.connectionRequestId);void 0!==I?I.handlePeerInfo(A):console.warn("Got peer info for unexpected crid?",A.connectionRequestId)}getMediaCapabilities(A){return navigator.mediaCapabilities.decodingInfo(A)}setLogSink(A){r.RainwayLogging.setLogSink(A)}}I.RainwayRuntime=D,i=new WeakMap,t=new WeakMap,D.initialized=!1},876:function(A,I,g){"use strict";var B,e=this&&this.__awaiter||function(A,I,g,B){return new(g||(g=Promise))((function(e,Q){function C(A){try{t(B.next(A))}catch(A){Q(A)}}function i(A){try{t(B.throw(A))}catch(A){Q(A)}}function t(A){var I;A.done?e(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(C,i)}t((B=B.apply(A,I||[])).next())}))},Q=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)},C=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayStream=void 0;const i=g(994),t=g(904),E=g(824),o=g(425),a=g(643),n=g(464);class s{constructor(A,I,g,e,Q,C,i){this.chosenAudioConfig=I,this.chosenVideoConfig=g,this.sendInput=e,this.sendLogic=Q,this.peerDiscardStream=i,B.set(this,!1);const n=document.createElement("div");n.tabIndex=0,n.style.touchAction="none",n.style.userSelect="none",n.style.webkitUserSelect="none",n.style.position="relative",n.className="rainway-inner-container";const s=document.createElement("div");s.style.display="flex",s.style.alignItems="center",s.style.justifyContent="center",s.style.position="relative",s.className="rainway-outer-container",s.appendChild(n),this.outerContainer=s,this.innerContainer=n,this.containerResizeObserver=new ResizeObserver((A=>{for(const I of A)this.resizeElement(I.contentRect,this.innerContainer)})),this.containerResizeObserver.observe(this.container),this.resizeElement(this.container.getBoundingClientRect(),this.innerContainer),this.inputManager=new E.RainwayInputManager(this),this.mediaManager=new o.MediaManager({},C),this.rateController=new a.RainwayRateController(void 0,g,(A=>this.sendLogic({discriminator:t.VideoBitrateRequest.discriminator,value:{streamId:0,bitsPerSecond:1e3*A}})),this.mediaManager.videoPerformanceMonitor),s.addEventListener("fullscreenchange",(()=>{setTimeout((()=>{this.resizeElement(this.container.getBoundingClientRect(),this.innerContainer)}),0)})),s.addEventListener("click",(()=>{this.resumeAudio()})),this.mediaManager.setContainer(n),this.mediaManager.videoNeedsRestartEvent.addHandler((()=>{this.sendLogic({discriminator:t.KeyframeRequest.discriminator,value:{streamId:0}})})),this.mediaManager.videoReadyStateChangeEvent.addHandler((A=>{this.rateController.handleVideoReadyState(A)})),this.inputManager.setContainer(n),this.inputManager.setInputLevel(A)}get dead(){return Q(this,B)}get container(){return this.outerContainer}get inputLevel(){return this.inputManager.getInputLevel()}static createAndInitialize(A,I,g,B,Q,C,i){return e(this,void 0,void 0,(function*(){const e=new s(A,I,g,B,Q,C,i);return yield e.mediaManager.initialize(),e}))}vibrateGamepad(A,I){this.inputManager.vibrateGamepad(A,I)}processAudio(A){this.mediaManager.processAudio(A)}processCursor(A){this.inputManager.processCursor(A)}renderVideoFrame(A,I){this.currentFrame=A,this.rateController.feedFrameTimestamp(A.timestamp),this.mediaManager.renderVideoFrame(A,I)}transformPointerOffsetToRemote(A,I){if(!this.currentFrame)return;const g=this.innerContainer.clientWidth,B=this.innerContainer.clientHeight,e=this.currentFrame.width,Q=this.currentFrame.height;return{x:A/g*e+this.currentFrame.x,y:I/B*Q+this.currentFrame.y}}releaseKeys(){this.inputManager.releaseKeys()}enableVideoStatsOverlay(){var A,I,g;null===(A=this.mediaManager)||void 0===A||A.enableStatsOverlay(),null===(I=this.mediaManager)||void 0===I||I.setContainer(this.innerContainer),null===(g=this.mediaManager)||void 0===g||g.play()}disableVideoStatsOverlay(){var A,I;null===(A=this.mediaManager)||void 0===A||A.disableStatsOverlay(),null===(I=this.mediaManager)||void 0===I||I.setContainer(this.innerContainer)}resizeElement(A,I){if(!this.currentFrame)return;const g=this.currentFrame.width,B=this.currentFrame.height,e=A.width,Q=A.height,C=g/B,i=e/Q;if(C-i>.01){const A=e*(1/C);I.style.width="100%",I.style.height=`${A}px`}else if(C-i<-.01){const A=Q*C;I.style.height="100%",I.style.width=`${A}px`}else I.style.height="100%",I.style.width="100%"}requestFullscreen(A){var I,g,B;const e=null===(I=null==A?void 0:A.lockKeyboard)||void 0===I||I,Q=null===(g=null==A?void 0:A.lockPointer)||void 0===g||g;if(this.outerContainer.requestFullscreen?this.outerContainer.requestFullscreen({navigationUI:"hide"}):this.outerContainer.webkitRequestFullscreen({navigationUI:"hide"}),e&&"keyboard"in navigator)try{navigator.keyboard.lock()}catch(A){}Q&&(null===(B=this.inputManager)||void 0===B||B.lockPointer())}play(){if(Q(this,B))throw new i.RainwayError("Attempted to play a dead stream");this.mediaManager.play(),this.rateController.start()}pause(){if(Q(this,B))throw new i.RainwayError("Attempted to pause a dead stream");this.mediaManager.pause(),this.rateController.stop()}leave(){var A;Q(this,B)?n.RainwayLogging.warning("Attempted to leave a dead stream"):(this.sendLogic({discriminator:t.LeaveStream.discriminator,value:{streamId:0}}),this.peerDiscardStream(),this.currentFrame=void 0,this.inputManager.setInputLevel(t.InputLevel.None),this.inputManager.unsetContainer(),this.mediaManager.dispose(),this.rateController.stop(),null===(A=this.containerResizeObserver)||void 0===A||A.unobserve(this.container),C(this,B,!0))}resumeAudio(){var A,I;null===(I=null===(A=this.mediaManager)||void 0===A?void 0:A.audioContext)||void 0===I||I.resume()}enableGestures(){var A;null===(A=this.inputManager)||void 0===A||A.enableGestures()}disableGestures(){var A;null===(A=this.inputManager)||void 0===A||A.disableGestures()}}I.RainwayStream=s,B=new WeakMap},994:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayError=void 0;class g extends Error{constructor(A){super(`Rainway SDK Error: ${A}`),this.name=this.constructor.name,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error(`Rainway SDK Error: ${A}`).stack,Object.setPrototypeOf(this,g.prototype)}}I.RainwayError=g},859:A=>{self,A.exports=(()=>{"use strict";var A={114:function(A,I,g){var B=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0});const e=B(g(170));class Q{initialize(){return this.id=Q.uniqueIdCounter++,new Promise(((A,I)=>{this.worker=new e.default,this.worker.addEventListener("message",(I=>{var g;const B=I.data;"decoderReady"===B.type?A(0):"pictureReady"===B.type&&(null===(g=this.onDecode)||void 0===g||g.call(this,B))}))}))}decode(A){this.worker&&this.worker.postMessage({type:"decode",data:A.buffer,offset:A.byteOffset,length:A.byteLength,renderStateId:this.id},[A.buffer])}release(){this.worker&&this.worker.postMessage({type:"release",renderStateId:this.id})}dispose(){this.worker&&(this.worker.terminate(),this.worker=void 0)}}I.default=Q,Q.uniqueIdCounter=1},170:(A,I,g)=>{g.r(I),g.d(I,{default:()=>Q});var B=g(614),e=g.n(B);function Q(){return e()('/*! For license information please see index.worker.js.LICENSE.txt */\n(()=>{var A={719:A=>{var I,g=(I="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(A){(A=A||{})||(A=void 0!==A?A:{});var g,B={};for(g in A)A.hasOwnProperty(g)&&(B[g]=A[g]);var Q,C=[],E="";E=self.location.href,I&&(E=I),E=0!==E.indexOf("blob:")?E.substr(0,E.lastIndexOf("/")+1):"",Q=function(A){var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)};var i,D,o=A.print||console.log.bind(console),a=A.printErr||console.warn.bind(console);for(g in B)B.hasOwnProperty(g)&&(A[g]=B[g]);B=null,A.arguments&&(C=A.arguments),A.thisProgram&&A.thisProgram,A.quit&&A.quit,A.wasmBinary&&(i=A.wasmBinary),A.noExitRuntime&&A.noExitRuntime,"object"!=typeof WebAssembly&&a("no native wasm support detected");var G,S,F,N,w,y,R,h=new WebAssembly.Table({initial:1,maximum:1,element:"anyfunc"}),s=!1;function k(I){G=I,A.HEAP8=S=new Int8Array(I),A.HEAP16=N=new Int16Array(I),A.HEAP32=w=new Int32Array(I),A.HEAPU8=F=new Uint8Array(I),A.HEAPU16=new Uint16Array(I),A.HEAPU32=new Uint32Array(I),A.HEAPF32=y=new Float32Array(I),A.HEAPF64=R=new Float64Array(I)}var L=A.INITIAL_MEMORY||16777216;function M(I){for(;I.length>0;){var g=I.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?A.dynCall_v(B):A.dynCall_vi(B,g.arg):B(void 0===g.arg?null:g.arg)}else g(A)}}(D=A.wasmMemory?A.wasmMemory:new WebAssembly.Memory({initial:L/65536,maximum:32768}))&&(G=D.buffer),L=G.byteLength,k(G),w[2188]=5251792;var U=[],Y=[],J=[],q=[],K=0,H=null,t=null;function c(I){throw A.onAbort&&A.onAbort(I),o(I+=""),a(I),s=!0,I="abort("+I+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(I)}function d(A){return I=A,g="data:application/octet-stream;base64,",String.prototype.startsWith?I.startsWith(g):0===I.indexOf(g);var I,g}A.preloadedImages={},A.preloadedAudios={};var n,p="TinyH264.wasm";function f(){try{if(i)return new Uint8Array(i);if(Q)return Q(p);throw"both async and sync fetching of the wasm failed"}catch(A){c(A)}}function r(A){try{return D.grow(A-G.byteLength+65535>>>16),k(D.buffer),1}catch(A){}}d(p)||(n=p,p=A.locateFile?A.locateFile(n,E):E+n),Y.push({func:function(){x()}});var e={a:function(A,I,g){F.copyWithin(A,I,I+g)},b:function(A){A>>>=0;var I=F.length,g=2147483648;if(A>g)return!1;for(var B,Q=1;Q<=4;Q*=2){var C=I*(1+.2/Q);if(C=Math.min(C,A+100663296),r(Math.min(g,((B=Math.max(16777216,A,C))%65536>0&&(B+=65536-B%65536),B))))return!0}return!1},memory:D,table:h},m=function(){var I={a:e};function g(I,g){var B=I.exports;A.asm=B,function(I){if(K--,A.monitorRunDependencies&&A.monitorRunDependencies(K),0==K&&(null!==H&&(clearInterval(H),H=null),t)){var g=t;t=null,g()}}()}function B(A){g(A.instance)}function Q(A){return(i||"function"!=typeof fetch?new Promise((function(A,I){A(f())})):fetch(p,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at \'"+p+"\'";return A.arrayBuffer()})).catch((function(){return f()}))).then((function(A){return WebAssembly.instantiate(A,I)})).then(A,(function(A){a("failed to asynchronously prepare wasm: "+A),c(A)}))}if(K++,A.monitorRunDependencies&&A.monitorRunDependencies(K),A.instantiateWasm)try{return A.instantiateWasm(I,g)}catch(A){return a("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(i||"function"!=typeof WebAssembly.instantiateStreaming||d(p)||"function"!=typeof fetch)return Q(B);fetch(p,{credentials:"same-origin"}).then((function(A){return WebAssembly.instantiateStreaming(A,I).then(B,(function(A){a("wasm streaming compile failed: "+A),a("falling back to ArrayBuffer instantiation"),Q(B)}))}))}(),{}}();A.asm=m;var W,x=A.___wasm_call_ctors=function(){return(x=A.___wasm_call_ctors=A.asm.c).apply(null,arguments)};function X(I){function g(){W||(W=!0,A.calledRun=!0,s||(M(Y),M(J),A.onRuntimeInitialized&&A.onRuntimeInitialized(),function(){if(A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)I=A.postRun.shift(),q.unshift(I);var I;M(q)}()))}I=I||C,K>0||(function(){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)I=A.preRun.shift(),U.unshift(I);var I;M(U)}(),K>0||(A.setStatus?(A.setStatus("Running..."),setTimeout((function(){setTimeout((function(){A.setStatus("")}),1),g()}),1)):g()))}if(A._h264bsdInit=function(){return(A._h264bsdInit=A.asm.d).apply(null,arguments)},A._malloc=function(){return(A._malloc=A.asm.e).apply(null,arguments)},A._free=function(){return(A._free=A.asm.f).apply(null,arguments)},A._h264bsdDecode=function(){return(A._h264bsdDecode=A.asm.g).apply(null,arguments)},A._h264bsdShutdown=function(){return(A._h264bsdShutdown=A.asm.h).apply(null,arguments)},A._h264bsdAlloc=function(){return(A._h264bsdAlloc=A.asm.i).apply(null,arguments)},A._h264bsdFree=function(){return(A._h264bsdFree=A.asm.j).apply(null,arguments)},A.asm=m,A.getValue=function(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return S[A>>0];case"i16":return N[A>>1];case"i32":case"i64":return w[A>>2];case"float":return y[A>>2];case"double":return R[A>>3];default:c("invalid type for getValue: "+I)}return null},A.then=function(I){if(W)I(A);else{var g=A.onRuntimeInitialized;A.onRuntimeInitialized=function(){g&&g(),I(A)}}return A},t=function A(){W||X(),W||(t=A)},A.run=X,A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);A.preInit.length>0;)A.preInit.pop()();return X(),A});A.exports=g},340:(A,I,g)=>{"use strict";g.r(I),g.d(I,{init:()=>o});var B=function(){function A(A,I){this.tinyH264Module=A,this.onPictureReady=I,this.pStorage=this.tinyH264Module._h264bsdAlloc(),this.pWidth=this.tinyH264Module._malloc(4),this.pHeight=this.tinyH264Module._malloc(4),this.pPicture=this.tinyH264Module._malloc(4),this._decBuffer=this.tinyH264Module._malloc(1048576),this.tinyH264Module._h264bsdInit(this.pStorage,0)}var I=A.prototype;return I.release=function(){var A=this.pStorage;0!==A&&(this.tinyH264Module._h264bsdShutdown(A),this.tinyH264Module._h264bsdFree(A)),this.tinyH264Module._free(this.pWidth),this.tinyH264Module._free(this.pHeight),this.tinyH264Module._free(this.pPicture),this.pStorage=0,this.pWidth=0,this.pHeight=0},I.decode=function(I){if(I instanceof ArrayBuffer&&(I=new Uint8Array(I)),this.tinyH264Module.HEAPU8.set(I,this._decBuffer),this.tinyH264Module._h264bsdDecode(this.pStorage,this._decBuffer,I.byteLength,this.pPicture,this.pWidth,this.pHeight)===A.PIC_RDY){var g=this.tinyH264Module.getValue(this.pWidth,"i32"),B=this.tinyH264Module.getValue(this.pHeight,"i32"),Q=this.tinyH264Module.getValue(this.pPicture,"i8*"),C=new Uint8Array(this.tinyH264Module.HEAPU8.subarray(Q,Q+g*B*3/2));this.onPictureReady(C,g,B)}},A}();B.RDY=0,B.PIC_RDY=1,B.HDRS_RDY=2,B.ERROR=3,B.PARAM_SET_ERROR=4,B.MEMALLOC_ERROR=5;const Q=B;var C=g(719),E=g.n(C),i={"TinyH264.wasm":"data:;base64,"},D={};function o(){var A,I=E()({locateFile:function(A){return i[A]}});return(A=I,new Promise((function(I){A.calledRun?I():A.onRuntimeInitialized=function(){return I()}}))).then((function(){self.addEventListener("message",(function(A){var g=A.data,B=g.renderStateId;switch(g.type){case"decode":var C=D[B];C||(C=new Q(I,(function(A,I,g){postMessage({type:"pictureReady",width:I,height:g,renderStateId:B,data:A.buffer},[A.buffer])})),D[B]=C),C.decode(new Uint8Array(g.data,g.offset,g.length));break;case"release":var E=D[B];E&&(E.release(),delete D[B])}})),self.postMessage({type:"decoderReady"})}))}}},I={};function g(B){var Q=I[B];if(void 0!==Q)return Q.exports;var C=I[B]={exports:{}};return A[B](C,C.exports,g),C.exports}g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var B in I)g.o(I,B)&&!g.o(A,B)&&Object.defineProperty(A,B,{enumerable:!0,get:I[B]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),g.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},(()=>{"use strict";g(340).init()})()})();',"Worker",void 0,void 0)}},614:A=>{A.exports=function(A,I,g,B){var e=self||window;try{try{var Q;try{Q=new e.Blob([A])}catch(I){(Q=new(e.BlobBuilder||e.WebKitBlobBuilder||e.MozBlobBuilder||e.MSBlobBuilder)).append(A),Q=Q.getBlob()}var C=e.URL||e.webkitURL,i=C.createObjectURL(Q),t=new e[I](i,g);return C.revokeObjectURL(i),t}catch(B){return new e[I]("data:application/javascript,".concat(encodeURIComponent(A)),g)}}catch(A){if(!B)throw Error("Inline worker is not supported");return new e[I](B,g)}}}},I={};function g(B){var e=I[B];if(void 0!==e)return e.exports;var Q=I[B]={exports:{}};return A[B].call(Q.exports,Q,Q.exports,g),Q.exports}return g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var B in I)g.o(I,B)&&!g.o(A,B)&&Object.defineProperty(A,B,{enumerable:!0,get:I[B]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),g.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},g(114)})()},53:A=>{self,A.exports=(()=>{"use strict";var A={114:function(A,I,g){var B=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0});const e=B(g(289));I.default=class{initialize(){return new Promise(((A,I)=>{this.worker=new e.default,this.worker.addEventListener("message",(I=>{var g;const B=I.data;"decoderReady"===B.type?A(0):"decodeDone"===B.type&&(null===(g=this.onDecode)||void 0===g||g.call(this,B))}))}))}startStream(A,I,g){this.worker&&this.worker.postMessage({type:"startStream",sampleRateHz:A,channelCount:I,decodedSamplesPerFrame:g})}stopStream(){this.worker&&this.worker.postMessage({type:"stopStream"})}decode(A,I){this.worker&&this.worker.postMessage({type:"decode",startTimestamp:A,inputData:I},[I])}release(){this.worker&&this.worker.postMessage({type:"release"})}dispose(){this.worker&&(this.worker.terminate(),this.worker=void 0)}}},289:(A,I,g)=>{g.r(I),g.d(I,{default:()=>Q});var B=g(614),e=g.n(B);function Q(){return e()('(()=>{var A={305:A=>{var I,g=(I="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(A){var g,B;(A=void 0!==(A=A||{})?A:{}).ready=new Promise((function(A,I){g=A,B=I}));var Q,C={};for(Q in A)A.hasOwnProperty(Q)&&(C[Q]=A[Q]);var E=[],i="./this.program",D=function(A,I){throw I},o="";"undefined"!=typeof document&&document.currentScript&&(o=document.currentScript.src),I&&(o=I),o=0!==o.indexOf("blob:")?o.substr(0,o.lastIndexOf("/")+1):"";var w,F,G=A.print||console.log.bind(console),R=A.printErr||console.warn.bind(console);for(Q in C)C.hasOwnProperty(Q)&&(A[Q]=C[Q]);C=null,A.arguments&&(E=A.arguments),A.thisProgram&&(i=A.thisProgram),A.quit&&(D=A.quit),A.wasmBinary&&(w=A.wasmBinary),A.noExitRuntime&&(F=A.noExitRuntime),"object"!=typeof WebAssembly&&n("no native wasm support detected");var S=!1;function U(I){var g,B=A["_"+I];return g="Cannot call unknown function "+I+", make sure it is exported",B||n("Assertion failed: "+g),B}function a(A,I,g,B,Q){var C={string:function(A){var I=0;if(null!=A&&0!==A){var g=1+(A.length<<2);!function(A,I,g){J(A,k,I,g)}(A,I=V(g),g)}return I},array:function(A){var I,g,B=V(A.length);return I=A,g=B,s.set(I,g),B}},E=U(A),i=[],D=0;if(B)for(var o=0;o<B.length;o++){var w=C[g[o]];w?(0===D&&(D=X()),i[o]=w(B[o])):i[o]=B[o]}var F=E.apply(null,i);return F=function(A){return"string"===I?H(A):"boolean"===I?Boolean(A):A}(F),0!==D&&Z(D),F}var s,k,h,N="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function y(A,I,g){for(var B=I+g,Q=I;A[Q]&&!(Q>=B);)++Q;if(Q-I>16&&A.subarray&&N)return N.decode(A.subarray(I,Q));for(var C="";I<Q;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var D=63&A[I++];if((E=224==(240&E)?(15&E)<<12|i<<6|D:(7&E)<<18|i<<12|D<<6|63&A[I++])<65536)C+=String.fromCharCode(E);else{var o=E-65536;C+=String.fromCharCode(55296|o>>10,56320|1023&o)}}else C+=String.fromCharCode((31&E)<<6|i)}else C+=String.fromCharCode(E)}return C}function H(A,I){return A?y(k,A,I):""}function J(A,I,g,B){if(!(B>0))return 0;for(var Q=g,C=g+B-1,E=0;E<A.length;++E){var i=A.charCodeAt(E);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&A.charCodeAt(++E)),i<=127){if(g>=C)break;I[g++]=i}else if(i<=2047){if(g+1>=C)break;I[g++]=192|i>>6,I[g++]=128|63&i}else if(i<=65535){if(g+2>=C)break;I[g++]=224|i>>12,I[g++]=128|i>>6&63,I[g++]=128|63&i}else{if(g+3>=C)break;I[g++]=240|i>>18,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}}return I[g]=0,g-Q}function L(A){var I=function(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&(B=65536+((1023&B)<<10)|1023&A.charCodeAt(++g)),B<=127?++I:I+=B<=2047?2:B<=65535?3:4}return I}(A)+1,g=V(I);return J(A,s,g,I),g}A.INITIAL_MEMORY;var q,M=[],K=[],c=[],Y=[];K.push({func:function(){l()}});var d=0,P=null,t=null;function n(I){A.onAbort&&A.onAbort(I),R(I+=""),S=!0,I="abort("+I+"). Build with -s ASSERTIONS=1 for more info.";var g=new WebAssembly.RuntimeError(I);throw B(g),g}A.preloadedImages={},A.preloadedAudios={};var r="data:application/octet-stream;base64,";function f(A){return I=A,g=r,String.prototype.startsWith?I.startsWith(g):0===I.indexOf(g);var I,g}var W,b="data:application/octet-stream;base64,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AXgB2AEEAGQAxAAkAYQBJACEAOQARAGkAUQApAAEAWQBxAEMAGwAzAAsAYwBLACMAOwATAGsAUwArAAMAWwBzAEUAHQA1AA0AZQBNACUAPQAVAG0AVQAtAAUAXQB1AEcAHwA3AA8AZwBPACcAPwAXAG8AVwAvAAcAXwB3AEBAGEAwQAhAYEBIQCBAOEAQQGhAUEAoQABAWEBwQEJAGkAyQApAYkBKQCJAOkASQGpAUkAqQAJAWkByQERAHEA0QAxAZEBMQCRAPEAUQGxAVEAsQARAXEB0QEZAHkA2QA5AZkBOQCZAPkAWQG5AVkAuQAZAXkB2QEFAGUAxQAlAYUBJQCFAOUARQGlAUUApQAFAWUBxQENAG0AzQAtAY0BLQCNAO0ATQGtAU0ArQANAW0BzQEVAHUA1QA1AZUBNQCVAPUAVQG1AVUAtQAVAXUB1QEdAH0A3QA9AZ0BPQCdAP0AXQG9AV0AvQAdAX0B3QECAGIAwgAiAYIBIgCCAOIAQgGiAUIAogACAWIBwgEKAGoAygAqAYoBKgCKAOoASgGqAUoAqgAKAWoBygESAHIA0gAyAZIBMgCSAPIAUgGyAVIAsgASAXIB0gEaAHoA2gA6AZoBOgCaAPoAWgG6AVoAugAaAXoB2gEGAGYAxgAmAYYBJgCGAOYARgGmAUYApgAGAWYBxgEOAG4AzgAuAY4BLgCOAO4ATgGuAU4ArgAOAW4BzgEWAHYA1gA2AZYBNgCWAPYAVgG2AVYAtgAWAXYB1gEeAH4A3gA+AZ4BPgCeAP4AXgG+AV4AvgAeAX4B3gEDAGMAwwAjAYMBIwCDAOMAQwGjAUMAowADAWMBwwELAGsAywArAYsBKwCLAOsASwGrAUsAqwALAWsBywETAHMA0wAzAZMBMwCTAPMAUwGzAVMAswATAXMB0wEbAHsA2wA7AZsBOwCbAPsAWwG7AVsAuwAbAXsB2wEHAGcAxwAnAYcBJwCHAOcARwGnAUcApwAHAWcBxwEPAG8AzwAvAY8BLwCPAO8ATwGvAU8ArwAPAW8BzwEXAHcA1wA3AZcBNwCXAPcAVwG3AVcAtwAXAXcB1wEfAH8A3wA/AZ8BPwCfAP8AXwG/AV8AvwAfAX8B3wEAAIA/AAAAgGP6fz+/dVa8i+l/Pwpx1rx5zX8/584gvS+mfz86Xla9r3N/PxPyhb35NX8/Kq+g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PjB8dD9M1Jc+NnV1P3VqkT53Y3Y/PvqKPupGdz/ug4Q+hB94P5wPfD487Xg/TQxvPgmweT+C/mE+4md6P83mVD6+FHs/wsVHPpi2ez/zmzo+Z018P/VpLT4l2Xw/XDAgPstZfT+77xI+Vc99P6ioBT68OX4/c7fwPf2Yfj8EE9Y9Eu1+PzNluz35NX8/Kq+gPa9zfz8T8oU9L6Z/PzpeVj15zX8/584gPYvpfz8KcdY8Y/p/P791VjwAADAAYACQAMAAEABAAHAAoADQACAAUACAALAA4AAEADQAZACUAMQAFABEAHQApADUACQAVACEALQA5AAIADgAaACYAMgAGABIAHgAqADYACgAWACIALgA6AAMADwAbACcAMwAHABMAHwArADcACwAXACMALwA7AABADEAYQCRAMEAEQBBAHEAoQDRACEAUQCBALEA4QAFADUAZQCVAMUAFQBFAHUApQDVACUAVQCFALUA5QAJADkAaQCZAMkAGQBJAHkAqQDZACkAWQCJALkA6QANAD0AbQCdAM0AHQBNAH0ArQDdAC0AXQCNAL0A7QACADIAYgCSAMIAEgBCAHIAogDSACIAUgCCALIA4gAGADYAZgCWAMYAFgBGAHYApgDWACYAVgCGALYA5gAKADoAagCaAMoAGgBKAHoAqgDaACoAWgCKALoA6gAOAD4AbgCeAM4AHgBOAH4ArgDeAC4AXgCOAL4A7gADADMAYwCTAMMAEwBDAHMAowDTACMAUwCDALMA4wAHADcAZwCXAMcAFwBHAHcApwDXACcAVwCHALcA5wALADsAawCbAMsAGwBLAHsAqwDbACsAWwCLALsA6wAPAD8AbwCfAM8AHwBPAH8ArwDfAC8AXwCPAL8A7wDwAAAAiYiIOwEAAAAFADAAAwAQAAQABAAEAAEAQYytAQsGgFQAAIBFAEGirQELiQIYADAASABgAAgAIAA4AFAAaAAQACgAQABYAHAABAAcADQATABkAAwAJAA8AFQAbAAUACwARABcAHQAAQAZADEASQBhAAkAIQA5AFEAaQARACkAQQBZAHEABQAdADUATQBlAA0AJQA9AFUAbQAVAC0ARQBdAHUAAgAaADIASgBiAAoAIgA6AFIAagASACoAQgBaAHIABgAeADYATgBmAA4AJgA+AFYAbgAWAC4ARgBeAHYAAwAbADMASwBjAAsAIwA7AFMAawATACsAQwBbAHMABwAfADcATwBnAA8AJwA/AFcAbwAXAC8ARwBfAHcAeAAAAIiICDwCAAAABQAYAAMACAACAAQABAABAEG8rwELBqBWAACARQBB0q8BC40BDAAYACQAMAAEABAAHAAoADQACAAUACAALAA4AAEADQAZACUAMQAFABEAHQApADUACQAVACEALQA5AAIADgAaACYAMgAGABIAHgAqADYACgAWACIALgA6AAMADwAbACcAMwAHABMAHwArADcACwAXACMALwA7ADwAAACJiIg8AwAAAAUADAADAAQABAABAEH0sAELTdBXAACARQAAAAAAAMBYAACAWwAAPF4AAPRgAACoYwAAWGYAAARpAABsagAAKGsAAJxrAADoawAAIGwAAEBsAABYbAAAZGwAAAAAAAABAEGEtwELowAAAAkAAAALAAAADQAAAA8AAAARAAAAEwAAABUAAAAXAAAAGQAAABsAAAAdAAAAHwAAACEAAAAjAAAAJQAAACcAAAApAAAAKwAAAC0AAAAvAAAAMQAAADMAAAA1AAAANwAAADkAAAA7AAAAPQAAAD8AAABBAAAAQwAAAEUAAABHAAAASQAAAEsAAABNAAAATwAAAFEAAABTAAAAVQAAAFcAAABZAAAAWwAAAF0AAABfAAAAYQAAAGMAAABlAAAAZwAAAGkAAABrAAAAbQAAAG8AAABxAAAAcwAAAHUAAAB3AAAAeQAAAHsAAAB9AAAAfwAAAIEAAACDAAAAhQAAAIcAAACJAAAAiwAAAI0AAACPAAAAkQAAAJMAAACVAAAAlwAAAJkAAACbAAAAnQAAAJ8AAAChAAAAowAAAKUAAACnAAAAqQAAAKsAAACtAAAArwAAALEAAACzAAAAtQAAALcAAAC5AAAAuwAAAL0AAAC/AAAAwQAAAMMAAADFAAAAxwAAAMkAAADLAAAAzQAAAM8AAADRAAAA0wAAANUAAADXAAAA2QAAANsAAADdAAAA3wAAAOEAAADjAAAA5QAAAOcAAADpAAAA6wAAAO0AAADvAAAA8QAAAPMAAAD1AAAA9wAAAPkAAAD7AAAA/QAAAP8AAAABAQAAAwEAAAUBAAAHAQAACQEAAAsBAAANAQAADwEAABEBAAATAQAAFQEAABcBAAAZAQAAGwEAAB0BAAAfAQAAIQEAACMB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";function e(A){try{if(A==b&&w)return new Uint8Array(w);var I=function(A){if(f(A))return function(A){try{for(var I=p(A),g=new Uint8Array(I.length),B=0;B<I.length;++B)g[B]=I.charCodeAt(B);return g}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(r.length))}(A);if(I)return I;throw"both async and sync fetching of the wasm failed"}catch(A){n(A)}}function x(I){for(;I.length>0;){var g=I.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?q.get(B)():q.get(B)(g.arg):B(void 0===g.arg?null:g.arg)}else g(A)}}f(b)||(W=b,b=A.locateFile?A.locateFile(W,o):o+W);var v={mappings:{},buffers:[null,[],[]],printChar:function(A,I){var g=v.buffers[A];0===I||10===I?((1===A?G:R)(y(g,0)),g.length=0):g.push(I)},varargs:void 0,get:function(){return v.varargs+=4,h[v.varargs-4>>2]},getStr:function(A){return H(A)},get64:function(A,I){return A}},p="function"==typeof atob?atob:function(A){var I,g,B,Q,C,E,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",D="",o=0;A=A.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");do{I=i.indexOf(A.charAt(o++))<<2|(Q=i.indexOf(A.charAt(o++)))>>4,g=(15&Q)<<4|(C=i.indexOf(A.charAt(o++)))>>2,B=(3&C)<<6|(E=i.indexOf(A.charAt(o++))),D+=String.fromCharCode(I),64!==C&&(D+=String.fromCharCode(g)),64!==E&&(D+=String.fromCharCode(B))}while(o<A.length);return D};var T,O={b:function(A,I,g){k.copyWithin(A,I,I+g)},c:function(A){n("OOM")},a:function(A,I,g,B){for(var Q=0,C=0;C<g;C++){for(var E=h[I+8*C>>2],i=h[I+(8*C+4)>>2],D=0;D<i;D++)v.printChar(A,k[E+D]);Q+=i}return h[B>>2]=Q,0}},l=(function(){var I={a:O};function g(I,g){var B,Q=I.exports;A.asm=Q,B=A.asm.d.buffer,A.HEAP8=s=new Int8Array(B),A.HEAP16=new Int16Array(B),A.HEAP32=h=new Int32Array(B),A.HEAPU8=k=new Uint8Array(B),A.HEAPU16=new Uint16Array(B),A.HEAPU32=new Uint32Array(B),A.HEAPF32=new Float32Array(B),A.HEAPF64=new Float64Array(B),q=A.asm.e,function(I){if(d--,A.monitorRunDependencies&&A.monitorRunDependencies(d),0==d&&(null!==P&&(clearInterval(P),P=null),t)){var g=t;t=null,g()}}()}function Q(A){g(A.instance)}function C(A){return(w||"function"!=typeof fetch?Promise.resolve().then((function(){return e(b)})):fetch(b,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at \'"+b+"\'";return A.arrayBuffer()})).catch((function(){return e(b)}))).then((function(A){return WebAssembly.instantiate(A,I)})).then(A,(function(A){R("failed to asynchronously prepare wasm: "+A),n(A)}))}if(d++,A.monitorRunDependencies&&A.monitorRunDependencies(d),A.instantiateWasm)try{return A.instantiateWasm(I,g)}catch(A){return R("Module.instantiateWasm callback failed with error: "+A),!1}(w||"function"!=typeof WebAssembly.instantiateStreaming||f(b)||"function"!=typeof fetch?C(Q):fetch(b,{credentials:"same-origin"}).then((function(A){return WebAssembly.instantiateStreaming(A,I).then(Q,(function(A){return R("wasm streaming compile failed: "+A),R("falling back to ArrayBuffer instantiation"),C(Q)}))}))).catch(B)}(),A.___wasm_call_ctors=function(){return(l=A.___wasm_call_ctors=A.asm.f).apply(null,arguments)}),X=(A._stopStream=function(){return(A._stopStream=A.asm.g).apply(null,arguments)},A._startStream=function(){return(A._startStream=A.asm.h).apply(null,arguments)},A._decode=function(){return(A._decode=A.asm.i).apply(null,arguments)},A._createBuffer=function(){return(A._createBuffer=A.asm.j).apply(null,arguments)},A._freeBuffer=function(){return(A._freeBuffer=A.asm.k).apply(null,arguments)},A._main=function(){return(A._main=A.asm.l).apply(null,arguments)},A.stackSave=function(){return(X=A.stackSave=A.asm.m).apply(null,arguments)}),Z=A.stackRestore=function(){return(Z=A.stackRestore=A.asm.n).apply(null,arguments)},V=A.stackAlloc=function(){return(V=A.stackAlloc=A.asm.o).apply(null,arguments)};function z(A){this.name="ExitStatus",this.message="Program terminated with exit("+A+")",this.status=A}function j(I){function B(){T||(T=!0,A.calledRun=!0,S||(x(K),x(c),g(A),A.onRuntimeInitialized&&A.onRuntimeInitialized(),u&&function(I){var g,B=A._main,Q=(I=I||[]).length+1,C=V(4*(Q+1));h[C>>2]=L(i);for(var E=1;E<Q;E++)h[(C>>2)+E]=L(I[E-1]);h[(C>>2)+Q]=0;try{g=B(Q,C),F&&0===g||(F||(A.onExit&&A.onExit(g),S=!0),D(g,new z(g)))}catch(A){if(A instanceof z)return;if("unwind"==A)return void(F=!0);var o=A;A&&"object"==typeof A&&A.stack&&(o=[A,A.stack]),R("exception thrown: "+o),D(1,A)}}(I),function(){if(A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)I=A.postRun.shift(),Y.unshift(I);var I;x(Y)}()))}I=I||E,d>0||(function(){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)I=A.preRun.shift(),M.unshift(I);var I;x(M)}(),d>0||(A.setStatus?(A.setStatus("Running..."),setTimeout((function(){setTimeout((function(){A.setStatus("")}),1),B()}),1)):B()))}if(A.cwrap=function(A,I,g,B){var Q=(g=g||[]).every((function(A){return"number"===A}));return"string"!==I&&Q&&!B?U(A):function(){return a(A,I,g,arguments)}},t=function A(){T||j(),T||(t=A)},A.run=j,A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);A.preInit.length>0;)A.preInit.pop()();var u=!0;return A.noInitialRun&&(u=!1),F=!0,j(),A.ready});A.exports=g}},I={};function g(B){var Q=I[B];if(void 0!==Q)return Q.exports;var C=I[B]={exports:{}};return A[B](C,C.exports,g),C.exports}g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var B in I)g.o(I,B)&&!g.o(A,B)&&Object.defineProperty(A,B,{enumerable:!0,get:I[B]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),(()=>{"use strict";var A,I=g(305),B=g.n(I),Q=0,C=0,E=0,i=0,D=0,o=0;!async function(){A=await B()(),self.addEventListener("message",(async function(I){var g=I.data;switch(g.type){case"startStream":o=g.decodedSamplesPerFrame,D=o*g.channelCount,A._startStream(g.sampleRateHz,g.channelCount);break;case"stopStream":A._stopStream();break;case"decode":{const I=g.startTimestamp,B=function(I){const g=I.byteLength;return 0!=Q&&C<g&&(A._freeBuffer(Q),Q=0,C=0),0==Q&&(Q=A._createBuffer(I.BYTES_PER_ELEMENT*g),C=g),A.HEAPU8.set(I,Q),Q}(new Uint8Array(g.inputData)),w=(0!=E&&i<D&&(A._freeBuffer(E),E=0,i=0),0==E&&(E=A._createBuffer(Float32Array.BYTES_PER_ELEMENT*D),i=D),E),F=new Float32Array(A.HEAPF32.buffer,w,D),G=A._decode(B,g.inputData.byteLength,w,o),R=F.buffer.slice(w,w+D*F.BYTES_PER_ELEMENT);postMessage({type:"decodeDone",startTimestamp:I,outputData:R,samplesDecoded:G},[R]);break}case"release":0!=Q&&(A._freeBuffer(Q),Q=0,C=0),0!=E&&(A._freeBuffer(E),E=0,i=0),A._stopStream()}})),postMessage({type:"decoderReady"})}()})()})();',"Worker",void 0,void 0)}},614:A=>{A.exports=function(A,I,g,B){var e=self||window;try{try{var Q;try{Q=new e.Blob([A])}catch(I){(Q=new(e.BlobBuilder||e.WebKitBlobBuilder||e.MozBlobBuilder||e.MSBlobBuilder)).append(A),Q=Q.getBlob()}var C=e.URL||e.webkitURL,i=C.createObjectURL(Q),t=new e[I](i,g);return C.revokeObjectURL(i),t}catch(B){return new e[I]("data:application/javascript,".concat(encodeURIComponent(A)),g)}}catch(A){if(!B)throw Error("Inline worker is not supported");return new e[I](B,g)}}}},I={};function g(B){var e=I[B];if(void 0!==e)return e.exports;var Q=I[B]={exports:{}};return A[B].call(Q.exports,Q,Q.exports,g),Q.exports}return g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var B in I)g.o(I,B)&&!g.o(A,B)&&Object.defineProperty(A,B,{enumerable:!0,get:I[B]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),g.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},g(114)})()},700:()=>{}},I={};function g(B){var e=I[B];if(void 0!==e)return e.exports;var Q=I[B]={exports:{}};return A[B].call(Q.exports,Q,Q.exports,g),Q.exports}g.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(A){if("object"==typeof window)return window}}();var B={};return(()=>{"use strict";var A=B;Object.defineProperty(A,"__esModule",{value:!0}),A.InputLevel=A.RainwayError=A.friendlyGamepadName=A.RainwayLogLevel=A.RainwayLogging=A.RainwayPeer=A.RainwayStream=A.RainwayRuntime=void 0;var I=g(783);Object.defineProperty(A,"RainwayRuntime",{enumerable:!0,get:function(){return I.RainwayRuntime}});var e=g(876);Object.defineProperty(A,"RainwayStream",{enumerable:!0,get:function(){return e.RainwayStream}});var Q=g(420);Object.defineProperty(A,"RainwayPeer",{enumerable:!0,get:function(){return Q.RainwayPeer}});var C=g(464);Object.defineProperty(A,"RainwayLogging",{enumerable:!0,get:function(){return C.RainwayLogging}}),Object.defineProperty(A,"RainwayLogLevel",{enumerable:!0,get:function(){return C.RainwayLogLevel}});var i=g(99);Object.defineProperty(A,"friendlyGamepadName",{enumerable:!0,get:function(){return i.friendlyGamepadName}});var t=g(994);Object.defineProperty(A,"RainwayError",{enumerable:!0,get:function(){return t.RainwayError}});var E=g(904);Object.defineProperty(A,"InputLevel",{enumerable:!0,get:function(){return E.InputLevel}})})(),B})()}));

/***/ }),

/***/ "./src/sandbox.ts":
/*!************************!*\
  !*** ./src/sandbox.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamSandbox": () => (/* binding */ StreamSandbox)
/* harmony export */ });
/* harmony import */ var rainway_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rainway-sdk */ "./node_modules/rainway-sdk/dist/index.js");
/* harmony import */ var rainway_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rainway_sdk__WEBPACK_IMPORTED_MODULE_0__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

let config = {};
try {
    config = __webpack_require__(/*! ../local-config.json */ "./local-config.json");
}
catch (e) { }
let sandboxApiKey = localStorage.getItem("api-key") || config.apiKey || "NO_KEY";
const allInput = rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Keyboard | rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Mouse | rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Gamepad;
const isDesktopSafari = /Macintosh;.*Safari/.test(navigator.userAgent) &&
    !/Chrome|Android/i.test(navigator.userAgent);
var SandboxState;
(function (SandboxState) {
    SandboxState[SandboxState["Disconnected"] = 0] = "Disconnected";
    SandboxState[SandboxState["ConnectingToRelay"] = 1] = "ConnectingToRelay";
    SandboxState[SandboxState["ConnectedToRelay"] = 2] = "ConnectedToRelay";
})(SandboxState || (SandboxState = {}));
var SandboxWidgetState;
(function (SandboxWidgetState) {
    SandboxWidgetState[SandboxWidgetState["Disconnected"] = 0] = "Disconnected";
    SandboxWidgetState[SandboxWidgetState["ConnectingToHost"] = 1] = "ConnectingToHost";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostNoStream"] = 2] = "ConnectedToHostNoStream";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostReadyToStream"] = 3] = "ConnectedToHostReadyToStream";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostStreaming"] = 4] = "ConnectedToHostStreaming";
})(SandboxWidgetState || (SandboxWidgetState = {}));
class StreamWidget {
    constructor(runtime, widgetClassName) {
        // Bind some DOM elements and set up listeners
        var _a, _b;
        this.runtime = runtime;
        this.widgetClassName = widgetClassName;
        this.state = SandboxWidgetState.Disconnected;
        this.getElement = (className) => document.querySelector(`.${this.widgetClassName} .${className}`);
        this.hostname = this.getElement("hostname");
        this.fullscreenButton = this.getElement("fullscreen-button");
        this.pauseButton = this.getElement("pause-button");
        this.statsButton = this.getElement("stats-button");
        this.chatHistory = this.getElement("chat-history");
        this.chatInput = this.getElement("chat-input");
        this.chatSendButton = this.getElement("chat-send-button");
        this.fullscreenButton.addEventListener("click", () => {
            var _a;
            (_a = this.stream) === null || _a === void 0 ? void 0 : _a.requestFullscreen();
        });
        this.statsButton.addEventListener("click", () => {
            var _a, _b;
            if (this.statsButton.innerText === "Show stats") {
                (_a = this.stream) === null || _a === void 0 ? void 0 : _a.enableVideoStatsOverlay();
                this.statsButton.innerText = "Hide stats";
            }
            else {
                (_b = this.stream) === null || _b === void 0 ? void 0 : _b.disableVideoStatsOverlay();
                this.statsButton.innerText = "Show stats";
            }
        });
        this.pauseButton.addEventListener("click", () => {
            var _a, _b;
            if (this.pauseButton.innerText === "Pause") {
                (_a = this.stream) === null || _a === void 0 ? void 0 : _a.pause();
                this.pauseButton.innerText = "Play";
            }
            else {
                (_b = this.stream) === null || _b === void 0 ? void 0 : _b.play();
                this.pauseButton.innerText = "Pause";
            }
        });
        this.chatInput.addEventListener("keydown", (e) => {
            if (e.key === "Enter")
                this.chatSendButton.click();
        });
        this.chatSendButton.addEventListener("click", () => {
            this.sendChatMessage(this.chatInput.value);
        });
        const startStreamButton = this.getElement("start-stream-button");
        const stopStreamButton = this.getElement("stop-stream-button");
        startStreamButton.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {
            var _c;
            if (this.peer === undefined)
                throw new rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayError("no peer to stream");
            const stream = yield this.peer.requestStream(allInput);
            this.stream = stream;
            this.setUIState(SandboxWidgetState.ConnectedToHostStreaming);
            (_c = this.getElement("stream-wrapper")) === null || _c === void 0 ? void 0 : _c.appendChild(stream.container);
            console.log(stream);
        }));
        stopStreamButton.addEventListener("click", () => {
            var _a;
            (_a = this.stream) === null || _a === void 0 ? void 0 : _a.leave();
        });
        // Populate hostname from config, then localStorage, and finally default to "608f3a6b-0100-0000-0000-000000000000"
        this.hostname.value =
            (_b = (_a = config.hostname) !== null && _a !== void 0 ? _a : localStorage.getItem("hostname-" + widgetClassName)) !== null && _b !== void 0 ? _b : "608f3a6b-0100-0000-0000-000000000000";
        // Persist hostname to localStorage for convenience
        this.hostname.addEventListener("change", () => {
            localStorage.setItem("hostname-" + widgetClassName, this.hostname.value);
        });
        this.getElement("connect-to-host-button").addEventListener("click", (e) => this.connectToHost());
        this.getElement("disconnect-from-host-button").addEventListener("click", (e) => this.disconnectFromHost());
        this.setUIState(SandboxWidgetState.Disconnected);
    }
    /** Send UTF-8 encoded message to peer over arbitrary messaging channel and display in the chatbox. */
    sendChatMessage(message) {
        if (this.peer) {
            this.peer.send(new TextEncoder().encode(message));
            this.displayChatMessage("You", message);
            this.chatInput.value = "";
        }
    }
    /** Add a message to the chatbox element. */
    displayChatMessage(speaker, message) {
        const p = document.createElement("p");
        const span = document.createElement("span");
        span.appendChild(document.createTextNode(speaker + ":"));
        p.appendChild(span);
        p.appendChild(document.createTextNode("\u00a0" + message));
        this.chatHistory.appendChild(p);
    }
    /** Add an "info" message to the chatbox. */
    displayChatInfo(message) {
        const p = document.createElement("p");
        p.appendChild(document.createTextNode(message));
        p.className = "chat-info";
        this.chatHistory.appendChild(p);
    }
    enableInputs(className, enabled) {
        const a = document.querySelectorAll(`.${this.widgetClassName} .${className}`);
        for (let i = 0; i < a.length; i++) {
            a[i].disabled = !enabled;
        }
    }
    /** Short version of hostname. */
    hostNickname() {
        return this.hostname.value.substring(29);
    }
    showError(e) {
        const error = String(e).replace(/^(.*Error: )+/, "");
        this.getElement("rainway-client-state").innerText = error;
    }
    /** Connect to a stream hosting-capable peer. Will connect parent runtime to instant relay first if not connected. */
    connectToHost() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.runtime === undefined)
                throw new Error();
            yield this.runtime.connectToRelay();
            this.setUIState(SandboxWidgetState.ConnectingToHost);
            try {
                this.peer = yield this.runtime.connect(this.hostname.value);
            }
            catch (e) {
                this.setUIState(SandboxWidgetState.Disconnected);
                this.showError(e);
                return;
            }
            this.setUIState(SandboxWidgetState.ConnectedToHostNoStream);
            this.displayChatInfo(`Connected to ${this.hostNickname()}. Say hi!`);
            yield this.peer.readyToStream;
            this.setUIState(SandboxWidgetState.ConnectedToHostReadyToStream);
            this.displayChatInfo("Ready to stream.");
        });
    }
    /** Disconnect from peer or cancel connection attempt in progress. */
    disconnectFromHost() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.runtime === undefined)
                throw new Error();
            this.setUIState(SandboxWidgetState.Disconnected);
            if (this.peer === undefined) {
                this.runtime.cancelConnectionAttempt(this.hostname.value);
                return;
            }
            this.peer.disconnect();
        });
    }
    /** Set new state and update UI appropriately. */
    setUIState(newState) {
        const S = SandboxWidgetState;
        const descriptions = {
            [S.Disconnected]: "Disconnected",
            [S.ConnectingToHost]: "Connecting to host...",
            [S.ConnectedToHostNoStream]: "Connected (preparing stream...)",
            [S.ConnectedToHostReadyToStream]: "Connected (ready to stream)",
            [S.ConnectedToHostStreaming]: "Streaming",
        };
        this.getElement("rainway-client-state").innerText = descriptions[newState];
        this.enableInputs("when-no-host", newState === S.Disconnected);
        this.enableInputs("when-host-or-connecting", newState >= S.ConnectingToHost);
        this.enableInputs("when-host", newState >= S.ConnectedToHostNoStream);
        this.enableInputs("when-ready-to-stream", newState === S.ConnectedToHostReadyToStream);
        this.enableInputs("when-streaming", newState >= S.ConnectedToHostStreaming);
        this.state = newState;
    }
}
class StreamSandbox {
    /**
     * Construct a sandbox with a number of widgets. Each widget can host a stream from a different peer.
     * Populated from url query param by default */
    constructor(numWidgets) {
        var _a, _b, _c, _d;
        this.numWidgets = numWidgets;
        this.state = SandboxState.Disconnected;
        this.widgets = [];
        this.querySelector = (query) => document.querySelector(query);
        this.handleLog = (level, message) => {
            if (level >= this.minimumLogLevel) {
                this.consoleLog(level, message);
            }
        };
        const template = this.querySelector("template.widget");
        const templateDiv = template.content.firstElementChild;
        for (let i = 1; i <= this.numWidgets; i++) {
            const w = templateDiv.cloneNode(true);
            w.className = `widget widget${i}`;
            this.querySelector(".widgets").appendChild(w);
        }
        ;
        this.querySelector(".api-key").value = sandboxApiKey;
        this.querySelector(".api-key").addEventListener("change", (event) => {
            localStorage.setItem("api-key", event.target.value);
            sandboxApiKey = event.target.value;
        });
        this.querySelector(".connect-to-relay-button").addEventListener("click", () => this.connectToRelay());
        this.querySelector(".disconnect-from-relay-button").addEventListener("click", () => this.disconnectFromRelay());
        this.runtime = undefined;
        let config = {};
        try {
            config = __webpack_require__(/*! ../local-config.json */ "./local-config.json");
        }
        catch (e) { }
        this.minimumLogLevel = (_a = config.minimumLogLevel) !== null && _a !== void 0 ? _a : rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Debug;
        this.logVideoStats = (_b = config.logVideoStats) !== null && _b !== void 0 ? _b : false;
        this.logTransportStats = (_c = config.logTransportStats) !== null && _c !== void 0 ? _c : false;
        this.rainwayLogsInConsole = (_d = config.rainwayLogsInConsole) !== null && _d !== void 0 ? _d : true;
    }
    /** Log to web console based on Rainway log level. */
    consoleLog(level, message) {
        if (level >= rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Error) {
            console.error(message);
        }
        else if (level >= rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Warning) {
            console.warn(message);
        }
        else if (level >= rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Information) {
            console.info(message);
        }
        else {
            console.log(message);
        }
    }
    enableInputs(className, enabled) {
        const a = document.querySelectorAll("." + className);
        for (let i = 0; i < a.length; i++) {
            a[i].disabled = !enabled;
        }
    }
    /** Instantiate runtime if not yet built, connect it to instant relay. */
    connectToRelay() {
        return __awaiter(this, void 0, void 0, function* () {
            // Make and attach the Rainway client.
            this.setUIState(SandboxState.ConnectingToRelay);
            if (!this.runtime) {
                this.runtime = yield rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayRuntime.initialize({
                    apiKey: sandboxApiKey,
                    externalId: "sandbox",
                    // Listener for instant relay connection loss
                    onRuntimeConnectionLost: (error) => {
                        console.log("Connection lost:", error);
                        this.setUIState(SandboxState.Disconnected);
                    },
                    // Listener for incoming connection requests
                    onConnectionRequest: (request) => {
                        // Auto-accept every request.
                        request.accept();
                    },
                    // Listener for incoming arbitrary messages
                    onPeerMessage: (peer, data) => {
                        // the only arbitrary messages we're listening for are basic chat messages
                        const w = this.widgets.find((w) => w.peer === peer);
                        if (w === undefined)
                            return;
                        w.displayChatMessage(w.hostNickname(), new TextDecoder().decode(data));
                    },
                    // Listener for errors from particular peers
                    onPeerError: (peer, error) => { },
                    // Listener for when a peer finishes connecting
                    onPeerConnect: (peer) => { },
                    // Listener for peer disconnect
                    onPeerDisconnect: (peer) => {
                        // remove appropriate stream container when a peer disconnects
                        const w = this.widgets.find((w) => w.peer === peer);
                        if (w === undefined)
                            return;
                        w.peer = undefined;
                        if (w.state > SandboxWidgetState.Disconnected) {
                            w.setUIState(SandboxWidgetState.Disconnected);
                        }
                        if (w.stream !== undefined)
                            w.stream.container.remove();
                    },
                    // Listener for peer stream announcement. Hosts can announce streams to clients.
                    // Don't do anything when a peer announces a stream (currently)
                    onStreamAnnouncement: (peer, announcement) => { },
                    // Listener for stream stop
                    onStreamStop: (stream) => {
                        // When the stream stops, remove the container from the DOM
                        const w = this.widgets.find((w) => { var _a; return ((_a = w.peer) === null || _a === void 0 ? void 0 : _a.stream) === stream; });
                        if (w === undefined)
                            return;
                        stream.container.remove();
                        if (w.state > SandboxWidgetState.ConnectedToHostReadyToStream) {
                            w.setUIState(SandboxWidgetState.ConnectedToHostReadyToStream);
                        }
                    },
                    // logSink is just a function that accepts a loglevel and a string
                    // all internal SDK logs will be sent there
                    logSink: this.handleLog.bind(this),
                });
            }
            // This call is not strictly necessary if the runtime was just constructed:
            yield this.runtime.connectToRelay();
            // The runtime automatically connects to instant relay when initialized.
            this.setUIState(SandboxState.ConnectedToRelay);
            if (this.widgets.length === 0) {
                for (let i = 1; i <= this.numWidgets; i++) {
                    this.widgets.push(new StreamWidget(this.runtime, `widget${i}`));
                    this.querySelector(`.widget${i}`).hidden = false;
                }
            }
        });
    }
    /** Set state and update UI appropriately. */
    setUIState(newState) {
        var _a;
        const S = SandboxState;
        const descriptions = {
            [S.Disconnected]: "Disconnected",
            [S.ConnectingToRelay]: "Connecting...",
            [S.ConnectedToRelay]: "Connected to relay as " + ((_a = this.runtime) === null || _a === void 0 ? void 0 : _a.getHostname()),
        };
        this.querySelector(".rainway-outer-state").innerText = descriptions[newState];
        this.enableInputs("when-no-relay", newState === S.Disconnected);
        this.enableInputs("when-relay", newState >= S.ConnectedToRelay);
        this.state = newState;
    }
    /** Disconnect from instant relay. Runtime can be reconnected later. */
    disconnectFromRelay() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = this.runtime) === null || _a === void 0 ? void 0 : _a.disconnectFromRelay();
            this.setUIState(SandboxState.Disconnected);
        });
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var sandbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sandbox */ "./src/sandbox.ts");
var _a;

const ss = new sandbox__WEBPACK_IMPORTED_MODULE_0__.StreamSandbox(Number((_a = new URLSearchParams(window.location.search).get("widgets")) !== null && _a !== void 0 ? _a : "1"));

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,