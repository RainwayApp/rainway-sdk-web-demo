/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./local-config.json":
/*!***************************!*\
  !*** ./local-config.json ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"input":true,"logVideoStats":false,"logTransportStats":false,"rainwayLogsInConsole":true,"minimumLogLevel":1,"peerId":"511781757009108992","apiKey":"pk_live_AOc6GRfwJfxzNCT3lIR7zePo"}');

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!./node_modules/postcss-loader/src/index.js??ruleSet[1].rules[2].use[2]!./src/style.css":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!./node_modules/postcss-loader/src/index.js??ruleSet[1].rules[2].use[2]!./src/style.css ***!
  \****************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.id, "canvas {\n  display: inline-block;\n}\n\npre.rainway-logs {\n  font-size: 12px;\n  height: 10em;\n  resize: vertical;\n  background-color: #ffffdd;\n  border: 1px solid rgba(0, 0, 0, 0.4);\n  padding: 5px;\n  overflow-y: scroll;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  height: 100%;\n  overflow: hidden;\n  padding: 0;\n  margin: 0;\n}\n\ndiv.h100 {\n  height: 100%;\n}\n\nbody {\n  font-family: sans-serif;\n  background: #dddddd;\n}\n\n.build-info {\n  float: right;\n}\n\n.page-container {\n  background: #eeeeee;\n  height: 100%;\n  max-width: 1600px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0.5em 1em;\n}\n\n.stream-wrapper {\n  min-height: 300px;\n  display: flex;\n  background: #dddddd;\n}\n\npre {\n  font-size: 75%;\n  background: #ffeecc;\n  font-family: \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", Consolas,\n    \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\",\n    \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier,\n    monospace;\n  overflow-x: scroll;\n  min-height: 100px;\n  resize: vertical;\n}\n\n.setting-name {\n  font-weight: bold;\n}\n\n.page-container > div {\n  margin-top: 1em;\n}\n\n.output-modes > div {\n  display: inline-block;\n}\n\ndiv.interactive {\n  display: flex;\n  align-items: stretch;\n}\n\n.stream-column {\n  flex: 1;\n}\n\n.stream-controls {\n  display: flex;\n  align-items: center;\n}\n\n.stream-controls > h2 ~ * {\n  -webkit-margin-start: 10px;\n          margin-inline-start: 10px;\n}\n\n.chat-column {\n  width: 20em;\n  -webkit-margin-start: 10px;\n          margin-inline-start: 10px;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-history {\n  border: 1px solid rgb(0, 0, 0, 0.4);\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n}\n\n.chat-bottom {\n  display: flex;\n}\n\n.chat-bottom input {\n  flex: 1;\n}\n\n.chat-history p {\n  margin: 0;\n}\n\n.chat-history p span {\n  font-weight: bold;\n}\n\n.chat-info {\n  opacity: 0.5;\n}\n\n.rainway-inner-container:focus {\n  /* This is a bad idea: http://www.outlinenone.com/ */\n  /* But the default obscures the stream a bit. In practice we should restyle it */\n  outline: none;\n}\n\n.widget {\n  background-color: rgb(0, 0, 0, 0.03);\n  padding: 1em;\n}\n\n.widget + .widget {\n  margin-top: 1em;\n}\n\n@media only screen and (max-width: 640px) {\n  h1 {\n    font-size: 22px;\n  }\n\n  .stream-controls {\n    flex-direction: column !important;\n    align-items: inherit !important;\n  }\n\n  .build-info {\n    float: none !important;\n  }\n\n  div.interactive {\n    flex-direction: column !important;\n  }\n\n  body,\n  div.h100,\n  body,\n  .page-container {\n    height: auto !important;\n    overflow: auto !important;\n  }\n\n  .page-container,\n  .widget-header {\n    display: flex;\n    flex-direction: column;\n  }\n\n  button {\n    font-size: 16px;\n  }\n}\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/rainway-sdk/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/rainway-sdk/dist/index.js ***!
  \************************************************/
/***/ ((module) => {

!function(A,I){ true?module.exports=I():0}(self,(function(){return(()=>{var A={120:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.BebopView=I.BebopRuntimeError=void 0;const e="0123456789abcdef",B=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],i=new Uint8Array(0),Q=[];for(const A of e)for(const I of e)Q.push(A+I);"undefined"==typeof TextDecoder&&(g.g.TextDecoder=g(700).TextDecoder);class C extends Error{constructor(A){super(A),this.name="BebopRuntimeError"}}I.BebopRuntimeError=C;class t{static textDecoder=new TextDecoder;static writeBuffer=new Uint8Array(256);static writeBufferView=new DataView(t.writeBuffer.buffer);static instance;static getInstance(){return t.instance||(t.instance=new t),t.instance}minimumTextDecoderLength=300;buffer;view;index;length;constructor(){this.buffer=t.writeBuffer,this.view=t.writeBufferView,this.index=0,this.length=0}startReading(A){this.buffer=A,this.view=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),this.index=0,this.length=A.length}startWriting(){this.buffer=t.writeBuffer,this.view=t.writeBufferView,this.index=0,this.length=0}guaranteeBufferLength(A){if(A>this.buffer.length){const I=new Uint8Array(A<<1);I.set(this.buffer),this.buffer=I,this.view=new DataView(I.buffer)}}growBy(A){this.length+=A,this.guaranteeBufferLength(this.length)}skip(A){this.index+=A}toArray(){return this.buffer.subarray(0,this.length)}readByte(){return this.buffer[this.index++]}readUint16(){const A=this.view.getUint16(this.index,!0);return this.index+=2,A}readInt16(){const A=this.view.getInt16(this.index,!0);return this.index+=2,A}readUint32(){const A=this.view.getUint32(this.index,!0);return this.index+=4,A}readInt32(){const A=this.view.getInt32(this.index,!0);return this.index+=4,A}readUint64(){const A=this.view.getBigUint64(this.index,!0);return this.index+=8,A}readInt64(){const A=this.view.getBigInt64(this.index,!0);return this.index+=8,A}readFloat32(){const A=this.view.getFloat32(this.index,!0);return this.index+=4,A}readFloat64(){const A=this.view.getFloat64(this.index,!0);return this.index+=8,A}writeByte(A){const I=this.length;this.growBy(1),this.buffer[I]=A}writeUint16(A){const I=this.length;this.growBy(2),this.view.setUint16(I,A,!0)}writeInt16(A){const I=this.length;this.growBy(2),this.view.setInt16(I,A,!0)}writeUint32(A){const I=this.length;this.growBy(4),this.view.setUint32(I,A,!0)}writeInt32(A){const I=this.length;this.growBy(4),this.view.setInt32(I,A,!0)}writeUint64(A){const I=this.length;this.growBy(8),this.view.setBigUint64(I,A,!0)}writeInt64(A){const I=this.length;this.growBy(8),this.view.setBigInt64(I,A,!0)}writeFloat32(A){const I=this.length;this.growBy(4),this.view.setFloat32(I,A,!0)}writeFloat64(A){const I=this.length;this.growBy(8),this.view.setFloat64(I,A,!0)}readBytes(){const A=this.readUint32();if(0===A)return i;const I=this.index,g=I+A;return this.index=g,this.buffer.subarray(I,g)}writeBytes(A){const I=A.length;if(this.writeUint32(I),0===I)return;const g=this.length;this.growBy(I),this.buffer.set(A,g)}readString(){const A=this.readUint32();if(0===A)return"";if(A>=this.minimumTextDecoderLength)return t.textDecoder.decode(this.buffer.subarray(this.index,this.index+=A));const I=this.index+A;let g,e="";for(;this.index<I;){const A=this.buffer[this.index++];if(A<192)g=A;else{const I=this.buffer[this.index++];if(A<224)g=(31&A)<<6|63&I;else{const e=this.buffer[this.index++];g=A<240?(15&A)<<12|(63&I)<<6|63&e:(7&A)<<18|(63&I)<<12|(63&e)<<6|63&this.buffer[this.index++]}}g<65536?e+=String.fromCharCode(g):(g-=65536,e+=String.fromCharCode(55296+(g>>10),56320+(1023&g)))}return this.index=I,e}writeString(A){const I=A.length;if(0===I)return void this.writeUint32(0);const g=4+3*I;this.guaranteeBufferLength(this.length+g);let e=this.length+4;const B=e;let i;for(let g=0;g<I;g++){const B=A.charCodeAt(g);i=g+1===I||B<55296||B>=56320?B:(B<<10)+A.charCodeAt(++g)+-56613888,i<128?this.buffer[e++]=i:(i<2048?this.buffer[e++]=i>>6&31|192:(i<65536?this.buffer[e++]=i>>12&15|224:(this.buffer[e++]=i>>18&7|240,this.buffer[e++]=i>>12&63|128),this.buffer[e++]=i>>6&63|128),this.buffer[e++]=63&i|128)}const Q=e-B;this.view.setUint32(this.length,Q,!0),this.length+=4+Q}readGuid(){const A=Q,I=this.buffer,g=this.index,e="-";var B=A[I[g+3]];return B+=A[I[g+2]],B+=A[I[g+1]],B+=A[I[g]],B+=e,B+=A[I[g+5]],B+=A[I[g+4]],B+=e,B+=A[I[g+7]],B+=A[I[g+6]],B+=e,B+=A[I[g+8]],B+=A[I[g+9]],B+=e,B+=A[I[g+10]],B+=A[I[g+11]],B+=A[I[g+12]],B+=A[I[g+13]],B+=A[I[g+14]],B+=A[I[g+15]],this.index+=16,B}writeGuid(A){const I=this.view,g=this.length;this.growBy(16);var e=0,i=0;i=(i=(i=(i=(i=(i=(i=(i=i<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)],e+=45===A.charCodeAt(e),I.setUint32(g,i,!0),i=(i=(i=(i=i<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)],e+=45===A.charCodeAt(e),I.setUint16(g+4,i,!0),i=(i=(i=(i=i<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)],e+=45===A.charCodeAt(e),I.setUint16(g+6,i,!0),i=(i=(i=(i=i<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)],e+=45===A.charCodeAt(e),i=(i=(i=(i=i<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)],I.setUint32(g+8,i,!1),i=(i=(i=(i=(i=(i=(i=(i=i<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)])<<4|B[A.charCodeAt(e++)],I.setUint32(g+12,i,!1)}readDate(){const A=this.readUint32(),I=1073741823&this.readUint32();return new Date(429496.7296*I+1e-4*A-621355968e5)}writeDate(A){const I=A.getTime()+621355968e5,g=I%429496.7296*1e4|0,e=I/429496.7296|1073741824;this.writeUint32(g),this.writeUint32(e)}writeEnum(A){var I=A;if(void 0===I)throw new Error("Couldn't convert enum value");this.writeUint32(I)}reserveMessageLength(){const A=this.length;return this.growBy(4),A}fillMessageLength(A,I){this.view.setUint32(A,I,!0)}readMessageLength(){const A=this.view.getUint32(this.index,!0);return this.index+=4,A}}I.BebopView=t},290:function(A,I,g){"use strict";var e=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.fetchNewPeerId=I.getOrganizationInfo=void 0;const B=g(464),i=g(994),Q="https://api.rainway.network/v1";I.getOrganizationInfo=function(A){return e(this,void 0,void 0,(function*(){try{const I=yield fetch(Q+"/keys/validate",{headers:{Authorization:`Bearer ${A}`}}),g=yield I.json();return{universeFlag:g.universe,organizationId:g.org_id}}catch(A){throw B.RainwayLogging.error(String(A)),new i.RainwayError("The Rainway API key is invalid.")}}))},I.fetchNewPeerId=function(){return e(this,void 0,void 0,(function*(){const A=yield fetch(Q+"/druid/next");return BigInt(yield A.text())}))}},434:(A,I)=>{"use strict";var g,e;Object.defineProperty(I,"__esModule",{value:!0}),I.AudioReadyState=I.VideoReadyState=void 0,(e=I.VideoReadyState||(I.VideoReadyState={}))[e.Detached=0]="Detached",e[e.Initializing=1]="Initializing",e[e.WaitingForKeyframe=2]="WaitingForKeyframe",e[e.Playing=3]="Playing",e[e.Paused=4]="Paused",e[e.Disposed=5]="Disposed",(g=I.AudioReadyState||(I.AudioReadyState={}))[g.Detached=0]="Detached",g[g.Uninitialized=1]="Uninitialized",g[g.Initializing=2]="Initializing",g[g.Playing=3]="Playing",g[g.Paused=4]="Paused"},528:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.isDesktopSafari=void 0,I.isDesktopSafari=/Macintosh;.*Safari/.test(navigator.userAgent)&&!/Chrome|Android/i.test(navigator.userAgent)},987:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.reassemble=I.eachChunk=void 0;let g=0;I.eachChunk=function(A,I,e=16e3){const B=Math.ceil(A.length/e),i=++g;for(let g=0;g<B;g++){const Q=g*e,C=Math.min((g+1)*e,A.length);I({chunksInGroup:B,groupId:i,index:g,data:A.slice(Q,C)})}},I.reassemble=function(A){let I=0;const g=A.chunks.length;for(let e=0;e<g;e++)I+=A.chunks[e].byteLength;const e=new Uint8Array(I);let B=0;for(let I=0;I<g;I++){const g=A.chunks[I];e.set(g,B),B+=g.byteLength}return e}},24:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.Action=void 0,I.Action=class{constructor(){this.handlers=[]}addHandler(A){this.handlers.push(A)}removeHandler(A){this.handlers=this.handlers.filter((I=>I!==A))}invoke(A){for(let I=0;I<this.handlers.length;I++)this.handlers[I](A)}}},930:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.boundingRectangle=void 0,I.boundingRectangle=function(A){const I=A.length;if(0===I)throw new Error("boundingRectangle() of 0 rectangles");const g=A[0];let{left:e,top:B}=g,i=e+g.width,Q=B+g.height;for(let g=1;g<I;g++){const I=A[g];e=Math.min(e,I.left),B=Math.min(B,I.top),i=Math.max(i,I.left+I.width),Q=Math.max(Q,I.top+I.height)}return{left:e,top:B,width:i-e,height:Q-B}}},198:(A,I)=>{"use strict";function g(A){if(0===A.length)return NaN;let I=0;for(const g of A)I+=g;return I/A.length}Object.defineProperty(I,"__esModule",{value:!0}),I.meanOrZero=I.mean=I.standardDeviation=I.interquartileRange=I.median=I.WindowTrack=void 0,I.WindowTrack=class{constructor(A,I){this.sizeMs=A,this.averageOperation=I,this.cachedAverage=void 0,this.buffer=[]}get values(){return this.trim(),this.buffer.map((A=>A.value))}get measurements(){return this.trim(),this.buffer}trim(){const A=performance.now(),I=this.buffer.findIndex((I=>I.time>A-this.sizeMs));I>0?(this.buffer.splice(0,I),this.cachedAverage=void 0):-1===I&&(this.buffer.splice(0,this.buffer.length),this.cachedAverage=void 0)}feed(A){const I=performance.now();this.buffer.push({time:I,value:A}),this.buffer.length>=500&&this.trim(),this.cachedAverage=void 0}average(){if(this.trim(),this.cachedAverage)return this.cachedAverage;const A=this.buffer.map((A=>A.value));return this.cachedAverage=this.averageOperation(A)}},I.median=function(A){return 0===A.length?NaN:(A.sort(((A,I)=>A-I)),A[Math.floor(A.length/2)])},I.interquartileRange=function(A){if(0===A.length)return NaN;A.sort(((A,I)=>A-I));const I=Math.floor(.25*A.length);return A[Math.floor(.75*A.length)]-A[I]},I.standardDeviation=function(A){if(0===A.length)return NaN;const I=A.length,g=A.reduce(((A,I)=>A+I),0)/I;return Math.sqrt(A.map((A=>Math.pow(A-g,2))).reduce(((A,I)=>A+I),0)/I)},I.mean=g,I.meanOrZero=function(A){return 0===A.length?0:g(A)}},904:function(A,I,g){"use strict";var e=this&&this.__createBinding||(Object.create?function(A,I,g,e){void 0===e&&(e=g),Object.defineProperty(A,e,{enumerable:!0,get:function(){return I[g]}})}:function(A,I,g,e){void 0===e&&(e=g),A[e]=I[g]}),B=this&&this.__exportStar||function(A,I){for(var g in A)"default"===g||Object.prototype.hasOwnProperty.call(I,g)||e(I,A,g)};Object.defineProperty(I,"__esModule",{value:!0}),B(g(162),I)},162:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.CodecPackResponse=I.CodecPackRequest=I.DeviceInfo=I.InputLevel=I.VideoConfig=I.CaptureMode=I.AudioConfig=I.LogicError=I.VideoContainer=I.AudioContainer=I.AudioCodec=I.AudioChannels=I.NetworkProtocol=I.OperatingSystem=I.FormFactor=I.VideoCodec=I.Vendor=I.VideoCodecType=I.InputBody=I.SetClipboardText=I.ViewportResize=I.PenAbsolute=I.TouchesAbsolute=I.LogicalInput=I.KeyboardInput=I.MouseScroll=I.MouseClick=I.MouseRelative=I.MouseAbsolute=I.GamepadRumble=I.GamepadReport=I.TouchAbsolute=I.PenFlags=I.PenMask=I.TouchMask=I.TouchPenPointerInfo=I.WindowsPointerFlags=I.VirtualKey=I.KeyboardAction=I.ScrollAxis=I.MouseButton=I.ButtonAction=I.XInputButtons=I.ArbitraryDatagram=I.MediaDatagram=I.LogicDatagram=I.InputDatagram=I.Chunk=I.RainwayHeader=I.Guid=void 0,I.RejectedConnectionRequest=I.AcceptedConnectionRequest=I.ConnectionRequest=I.GatewayResponseBody=I.GatewayHello=I.GatewayRequestBody=I.InitConnectionRequest=I.GatewayBody=I.GatewayForwardable=I.GatewayAlert=I.GatewayResponse=I.GatewayRequest=I.GatewayDatagram=I.GatewayHeader=I.PendingConnectionRequest=I.Peer=I.GatewayIdentity=I.GatewayTrunk=I.PeerInformationType=I.PeerTransportType=I.GatewayAlertDescription=I.GatewayAlertLevel=I.GatewayResponseContext=I.PeerSetKeyTemplate=I.AcceptedConnectionRequestKeyTemplate=I.PendingConnectionRequestKeyTemplate=I.PeerKeyTemplate=I.DatagramChannel=I.MediaBody=I.MediaChunk=I.AudioData=I.PointerData=I.VideoData=I.DesktopRect=I.AudioDataType=I.VideoDataType=I.LogicBody=I.InputLevelRequest=I.InputLevelUpdate=I.RejectStreamRequest=I.PauseStream=I.JoinStream=I.VideoBitrateRequest=I.KeyframeRequest=I.StreamStopping=I.LeaveStream=I.StreamStarting=I.StreamRequest=I.ErrorResponse=I.ClientCapabilities=void 0,I.TelemetryValueType=I.RainwayTelemetryDimension=I.RainwayTelemetryRecord=I.RainwayTelemetryRequest=I.TelemetryBatchesKeyTemplate=I.TelemetrySetKey=I.GatewayForwardableBody=I.PeerSignalingInformation=void 0;const e=g(120);var B,i,Q,C,t,E,o,a,n,s,r,d,h,c,D,w,y,u,l,S,F,R,G,k,m,U,N,p,f;I.Guid={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeGuid(A.value),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readGuid(),{value:I}}},I.RainwayHeader={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeUint32(A.magicNumber),I.writeUint32(A.syncKey),I.writeInt64(A.sourcePeerId),I.writeInt64(A.targetPeerId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B;return I=A.readUint32(),g=A.readUint32(),e=A.readInt64(),B=A.readInt64(),{magicNumber:I,syncKey:g,sourcePeerId:e,targetPeerId:B}}},I.Chunk={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeUint16(A.groupId),I.writeByte(A.index),I.writeByte(A.chunksInGroup),I.writeBytes(A.data),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B;return I=A.readUint16(),g=A.readByte(),e=A.readByte(),B=A.readBytes(),{groupId:I,index:g,chunksInGroup:e,data:B}}},I.InputDatagram={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.RainwayHeader.encodeInto(A.header,g),I.InputBody.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e;return g=I.RainwayHeader.readFrom(A),e=I.InputBody.readFrom(A),{header:g,body:e}}},I.LogicDatagram={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.RainwayHeader.encodeInto(A.header,g),I.LogicBody.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e;return g=I.RainwayHeader.readFrom(A),e=I.LogicBody.readFrom(A),{header:g,body:e}}},I.MediaDatagram={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.RainwayHeader.encodeInto(A.header,g),I.MediaBody.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e;return g=I.RainwayHeader.readFrom(A),e=I.MediaBody.readFrom(A),{header:g,body:e}}},I.ArbitraryDatagram={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.RainwayHeader.encodeInto(A.header,g),I.Chunk.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e;return g=I.RainwayHeader.readFrom(A),e=I.Chunk.readFrom(A),{header:g,body:e}}},(f=I.XInputButtons||(I.XInputButtons={}))[f.None=0]="None",f[f.DpadUp=1]="DpadUp",f[f.DpadDown=2]="DpadDown",f[f.DpadLeft=4]="DpadLeft",f[f.DpadRight=8]="DpadRight",f[f.Start=16]="Start",f[f.Back=32]="Back",f[f.LeftStick=64]="LeftStick",f[f.RightStick=128]="RightStick",f[f.LeftBumper=256]="LeftBumper",f[f.RightBumper=512]="RightBumper",f[f.Guide=1024]="Guide",f[f.A=4096]="A",f[f.B=8192]="B",f[f.X=16384]="X",f[f.Y=32768]="Y",(p=I.ButtonAction||(I.ButtonAction={}))[p.ButtonDown=0]="ButtonDown",p[p.ButtonUp=1]="ButtonUp",(N=I.MouseButton||(I.MouseButton={}))[N.Left=0]="Left",N[N.Right=1]="Right",N[N.Middle=2]="Middle",N[N.X1=3]="X1",N[N.X2=4]="X2",(U=I.ScrollAxis||(I.ScrollAxis={}))[U.Horizontal=0]="Horizontal",U[U.Vertical=1]="Vertical",(m=I.KeyboardAction||(I.KeyboardAction={}))[m.KeyDown=0]="KeyDown",m[m.KeyUp=1]="KeyUp",(k=I.VirtualKey||(I.VirtualKey={}))[k.None=0]="None",k[k.Cancel=1]="Cancel",k[k.Back=2]="Back",k[k.Tab=3]="Tab",k[k.LineFeed=4]="LineFeed",k[k.Clear=5]="Clear",k[k.Enter=6]="Enter",k[k.Pause=7]="Pause",k[k.CapsLock=8]="CapsLock",k[k.HangulMode=9]="HangulMode",k[k.JunjaMode=10]="JunjaMode",k[k.FinalMode=11]="FinalMode",k[k.HanjaMode=12]="HanjaMode",k[k.Escape=13]="Escape",k[k.ImeConvert=14]="ImeConvert",k[k.ImeNonConvert=15]="ImeNonConvert",k[k.ImeAccept=16]="ImeAccept",k[k.ImeModeChange=17]="ImeModeChange",k[k.Space=18]="Space",k[k.PageUp=19]="PageUp",k[k.PageDown=20]="PageDown",k[k.End=21]="End",k[k.Home=22]="Home",k[k.Left=23]="Left",k[k.Up=24]="Up",k[k.Right=25]="Right",k[k.Down=26]="Down",k[k.Select=27]="Select",k[k.Print=28]="Print",k[k.Execute=29]="Execute",k[k.PrintScreen=30]="PrintScreen",k[k.Insert=31]="Insert",k[k.Delete=32]="Delete",k[k.Help=33]="Help",k[k.D0=34]="D0",k[k.D1=35]="D1",k[k.D2=36]="D2",k[k.D3=37]="D3",k[k.D4=38]="D4",k[k.D5=39]="D5",k[k.D6=40]="D6",k[k.D7=41]="D7",k[k.D8=42]="D8",k[k.D9=43]="D9",k[k.A=44]="A",k[k.B=45]="B",k[k.C=46]="C",k[k.D=47]="D",k[k.E=48]="E",k[k.F=49]="F",k[k.G=50]="G",k[k.H=51]="H",k[k.I=52]="I",k[k.J=53]="J",k[k.K=54]="K",k[k.L=55]="L",k[k.M=56]="M",k[k.N=57]="N",k[k.O=58]="O",k[k.P=59]="P",k[k.Q=60]="Q",k[k.R=61]="R",k[k.S=62]="S",k[k.T=63]="T",k[k.U=64]="U",k[k.V=65]="V",k[k.W=66]="W",k[k.X=67]="X",k[k.Y=68]="Y",k[k.Z=69]="Z",k[k.LWin=70]="LWin",k[k.RWin=71]="RWin",k[k.Apps=72]="Apps",k[k.Sleep=73]="Sleep",k[k.NumPad0=74]="NumPad0",k[k.NumPad1=75]="NumPad1",k[k.NumPad2=76]="NumPad2",k[k.NumPad3=77]="NumPad3",k[k.NumPad4=78]="NumPad4",k[k.NumPad5=79]="NumPad5",k[k.NumPad6=80]="NumPad6",k[k.NumPad7=81]="NumPad7",k[k.NumPad8=82]="NumPad8",k[k.NumPad9=83]="NumPad9",k[k.Multiply=84]="Multiply",k[k.Add=85]="Add",k[k.Separator=86]="Separator",k[k.Subtract=87]="Subtract",k[k.Decimal=88]="Decimal",k[k.Divide=89]="Divide",k[k.F1=90]="F1",k[k.F2=91]="F2",k[k.F3=92]="F3",k[k.F4=93]="F4",k[k.F5=94]="F5",k[k.F6=95]="F6",k[k.F7=96]="F7",k[k.F8=97]="F8",k[k.F9=98]="F9",k[k.F10=99]="F10",k[k.F11=100]="F11",k[k.F12=101]="F12",k[k.F13=102]="F13",k[k.F14=103]="F14",k[k.F15=104]="F15",k[k.F16=105]="F16",k[k.F17=106]="F17",k[k.F18=107]="F18",k[k.F19=108]="F19",k[k.F20=109]="F20",k[k.F21=110]="F21",k[k.F22=111]="F22",k[k.F23=112]="F23",k[k.F24=113]="F24",k[k.NumLock=114]="NumLock",k[k.Scroll=115]="Scroll",k[k.LeftShift=116]="LeftShift",k[k.RightShift=117]="RightShift",k[k.LeftCtrl=118]="LeftCtrl",k[k.RightCtrl=119]="RightCtrl",k[k.LeftAlt=120]="LeftAlt",k[k.RightAlt=121]="RightAlt",k[k.BrowserBack=122]="BrowserBack",k[k.BrowserForward=123]="BrowserForward",k[k.BrowserRefresh=124]="BrowserRefresh",k[k.BrowserStop=125]="BrowserStop",k[k.BrowserSearch=126]="BrowserSearch",k[k.BrowserFavorites=127]="BrowserFavorites",k[k.BrowserHome=128]="BrowserHome",k[k.VolumeMute=129]="VolumeMute",k[k.VolumeDown=130]="VolumeDown",k[k.VolumeUp=131]="VolumeUp",k[k.MediaNextTrack=132]="MediaNextTrack",k[k.MediaPreviousTrack=133]="MediaPreviousTrack",k[k.MediaStop=134]="MediaStop",k[k.MediaPlayPause=135]="MediaPlayPause",k[k.LaunchMail=136]="LaunchMail",k[k.SelectMedia=137]="SelectMedia",k[k.LaunchApplication1=138]="LaunchApplication1",k[k.LaunchApplication2=139]="LaunchApplication2",k[k.Oem1=140]="Oem1",k[k.OemPlus=141]="OemPlus",k[k.OemComma=142]="OemComma",k[k.OemMinus=143]="OemMinus",k[k.OemPeriod=144]="OemPeriod",k[k.Oem2=145]="Oem2",k[k.Oem3=146]="Oem3",k[k.AbntC1=147]="AbntC1",k[k.AbntC2=148]="AbntC2",k[k.Oem4=149]="Oem4",k[k.Oem5=150]="Oem5",k[k.Oem6=151]="Oem6",k[k.Oem7=152]="Oem7",k[k.Oem8=153]="Oem8",k[k.Oem102=154]="Oem102",k[k.ImeProcessed=155]="ImeProcessed",k[k.System=156]="System",k[k.OemAttn=157]="OemAttn",k[k.OemFinish=158]="OemFinish",k[k.OemCopy=159]="OemCopy",k[k.OemAuto=160]="OemAuto",k[k.OemEnlw=161]="OemEnlw",k[k.OemBackTab=162]="OemBackTab",k[k.Attn=163]="Attn",k[k.CrSel=164]="CrSel",k[k.ExSel=165]="ExSel",k[k.EraseEof=166]="EraseEof",k[k.Play=167]="Play",k[k.Zoom=168]="Zoom",k[k.NoName=169]="NoName",k[k.Pa1=170]="Pa1",k[k.OemClear=171]="OemClear",k[k.DeadCharProcessed=172]="DeadCharProcessed",(G=I.WindowsPointerFlags||(I.WindowsPointerFlags={}))[G.New=1]="New",G[G.InRange=2]="InRange",G[G.InContact=4]="InContact",G[G.FirstButton=16]="FirstButton",G[G.SecondButton=32]="SecondButton",G[G.ThirdButton=64]="ThirdButton",G[G.FourthButton=128]="FourthButton",G[G.FifthButton=256]="FifthButton",G[G.Primary=8192]="Primary",G[G.Confidence=16384]="Confidence",G[G.Canceled=32768]="Canceled",G[G.Down=65536]="Down",G[G.Update=131072]="Update",G[G.Up=262144]="Up",G[G.Wheel=524288]="Wheel",G[G.HWheel=1048576]="HWheel",G[G.CaptureChanged=2097152]="CaptureChanged",G[G.HasTransform=4194304]="HasTransform",I.TouchPenPointerInfo={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeUint32(A.pointerId),I.writeUint32(A.frameId),I.writeUint32(A.pointerFlags),I.writeInt32(A.x),I.writeInt32(A.y),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B,i;return I=A.readUint32(),g=A.readUint32(),e=A.readUint32(),B=A.readInt32(),i=A.readInt32(),{pointerId:I,frameId:g,pointerFlags:e,x:B,y:i}}},(R=I.TouchMask||(I.TouchMask={}))[R.ContactArea=1]="ContactArea",R[R.Orientation=2]="Orientation",R[R.Pressure=4]="Pressure",(F=I.PenMask||(I.PenMask={}))[F.Pressure=1]="Pressure",F[F.Rotation=2]="Rotation",F[F.TiltX=4]="TiltX",F[F.TiltY=8]="TiltY",(S=I.PenFlags||(I.PenFlags={}))[S.Barrel=1]="Barrel",S[S.Inverted=2]="Inverted",S[S.Eraser=4]="Eraser",I.TouchAbsolute={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.TouchPenPointerInfo.encodeInto(A.pointerInfo,g),g.writeUint32(A.touchMask),g.writeInt32(A.contactLeft),g.writeInt32(A.contactTop),g.writeInt32(A.contactRight),g.writeInt32(A.contactBottom),g.writeUint32(A.orientation),g.writeUint32(A.pressure),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e,B,i,Q,C,t,E;return g=I.TouchPenPointerInfo.readFrom(A),e=A.readUint32(),B=A.readInt32(),i=A.readInt32(),Q=A.readInt32(),C=A.readInt32(),t=A.readUint32(),E=A.readUint32(),{pointerInfo:g,touchMask:e,contactLeft:B,contactTop:i,contactRight:Q,contactBottom:C,orientation:t,pressure:E}}},I.GamepadReport={discriminator:1,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeEnum(A.buttons),I.writeByte(A.leftTrigger),I.writeByte(A.rightTrigger),I.writeInt16(A.leftThumbX),I.writeInt16(A.leftThumbY),I.writeInt16(A.rightThumbX),I.writeInt16(A.rightThumbY),I.writeByte(A.slot),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B,i,Q,C,t;return I=A.readUint32(),g=A.readByte(),e=A.readByte(),B=A.readInt16(),i=A.readInt16(),Q=A.readInt16(),C=A.readInt16(),t=A.readByte(),{buttons:I,leftTrigger:g,rightTrigger:e,leftThumbX:B,leftThumbY:i,rightThumbX:Q,rightThumbY:C,slot:t}}},I.GamepadRumble={discriminator:2,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.port),I.writeUint16(A.leftMotorSpeed),I.writeUint16(A.rightMotorSpeed),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e;return I=A.readByte(),g=A.readUint16(),e=A.readUint16(),{port:I,leftMotorSpeed:g,rightMotorSpeed:e}}},I.MouseAbsolute={discriminator:3,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt32(A.x),I.writeInt32(A.y),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readInt32(),g=A.readInt32(),{x:I,y:g}}},I.MouseRelative={discriminator:4,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt32(A.dx),I.writeInt32(A.dy),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readInt32(),g=A.readInt32(),{dx:I,dy:g}}},I.MouseClick={discriminator:5,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeEnum(A.action),I.writeEnum(A.button),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readUint32(),{action:I,button:g}}},I.MouseScroll={discriminator:6,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeEnum(A.axis),I.writeInt32(A.delta),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readInt32(),{axis:I,delta:g}}},I.KeyboardInput={discriminator:7,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;I.writeEnum(A.action);{const g=A.keycodes.length;I.writeUint32(g);for(let e=0;e<g;e++)I.writeEnum(A.keycodes[e])}return I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;I=A.readUint32();{let I=A.readUint32();g=new Array(I);for(let e=0;e<I;e++){let I;I=A.readUint32(),g[e]=I}}return{action:I,keycodes:g}}},I.LogicalInput={discriminator:8,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeString(A.inputString),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readString(),{inputString:I}}},I.TouchesAbsolute={discriminator:9,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;{const e=A.touches.length;g.writeUint32(e);for(let B=0;B<e;B++)I.TouchAbsolute.encodeInto(A.touches[B],g)}return g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;{let e=A.readUint32();g=new Array(e);for(let B=0;B<e;B++){let e;e=I.TouchAbsolute.readFrom(A),g[B]=e}}return{touches:g}}},I.PenAbsolute={discriminator:10,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.TouchPenPointerInfo.encodeInto(A.pointerInfo,g),g.writeUint32(A.penFlags),g.writeUint32(A.penMask),g.writeUint32(A.pressure),g.writeUint32(A.rotation),g.writeInt32(A.tiltX),g.writeInt32(A.tiltY),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e,B,i,Q,C,t;return g=I.TouchPenPointerInfo.readFrom(A),e=A.readUint32(),B=A.readUint32(),i=A.readUint32(),Q=A.readUint32(),C=A.readInt32(),t=A.readInt32(),{pointerInfo:g,penFlags:e,penMask:B,pressure:i,rotation:Q,tiltX:C,tiltY:t}}},I.ViewportResize={discriminator:11,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeUint32(A.width),I.writeUint32(A.height),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readUint32(),{width:I,height:g}}},I.SetClipboardText={discriminator:12,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeString(A.text),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readString(),{text:I}}},I.InputBody={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.GamepadReport.encodeInto(A.value,g);break;case 2:I.GamepadRumble.encodeInto(A.value,g);break;case 3:I.MouseAbsolute.encodeInto(A.value,g);break;case 4:I.MouseRelative.encodeInto(A.value,g);break;case 5:I.MouseClick.encodeInto(A.value,g);break;case 6:I.MouseScroll.encodeInto(A.value,g);break;case 7:I.KeyboardInput.encodeInto(A.value,g);break;case 8:I.LogicalInput.encodeInto(A.value,g);break;case 9:I.TouchesAbsolute.encodeInto(A.value,g);break;case 10:I.PenAbsolute.encodeInto(A.value,g);break;case 11:I.ViewportResize.encodeInto(A.value,g);break;case 12:I.SetClipboardText.encodeInto(A.value,g)}const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),B=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.GamepadReport.readFrom(A)};case 2:return{discriminator:2,value:I.GamepadRumble.readFrom(A)};case 3:return{discriminator:3,value:I.MouseAbsolute.readFrom(A)};case 4:return{discriminator:4,value:I.MouseRelative.readFrom(A)};case 5:return{discriminator:5,value:I.MouseClick.readFrom(A)};case 6:return{discriminator:6,value:I.MouseScroll.readFrom(A)};case 7:return{discriminator:7,value:I.KeyboardInput.readFrom(A)};case 8:return{discriminator:8,value:I.LogicalInput.readFrom(A)};case 9:return{discriminator:9,value:I.TouchesAbsolute.readFrom(A)};case 10:return{discriminator:10,value:I.PenAbsolute.readFrom(A)};case 11:return{discriminator:11,value:I.ViewportResize.readFrom(A)};case 12:return{discriminator:12,value:I.SetClipboardText.readFrom(A)};default:throw A.index=B,new e.BebopRuntimeError("Unrecognized discriminator while decoding InputBody")}}},(l=I.VideoCodecType||(I.VideoCodecType={}))[l.Baseline=1]="Baseline",l[l.Main=2]="Main",l[l.High=4]="High",l[l.H264=7]="H264",l[l.H265=8]="H265",(u=I.Vendor||(I.Vendor={}))[u.Unknown=0]="Unknown",u[u.Amd=4098]="Amd",u[u.Nvidia=4318]="Nvidia",u[u.Intel=32902]="Intel",I.VideoCodec={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeString(A.friendlyName),I.writeUint32(A.width),I.writeUint32(A.height),I.writeUint32(A.refreshRate),I.writeBytes(A.data),I.writeEnum(A.type),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B,i,Q;return I=A.readString(),g=A.readUint32(),e=A.readUint32(),B=A.readUint32(),i=A.readBytes(),Q=A.readUint32(),{friendlyName:I,width:g,height:e,refreshRate:B,data:i,type:Q}}},(y=I.FormFactor||(I.FormFactor={}))[y.Unknown=0]="Unknown",y[y.Phone=1]="Phone",y[y.Tablet=2]="Tablet",y[y.Computer=3]="Computer",y[y.Console=4]="Console",y[y.Tv=5]="Tv",(w=I.OperatingSystem||(I.OperatingSystem={}))[w.Other=0]="Other",w[w.IOS=1]="IOS",w[w.TvOS=2]="TvOS",w[w.Android=3]="Android",w[w.Windows=4]="Windows",w[w.MacOS=5]="MacOS",w[w.Linux=6]="Linux",w[w.Roku=7]="Roku",(D=I.NetworkProtocol||(I.NetworkProtocol={}))[D.WebRTC=0]="WebRTC",D[D.Geyser=1]="Geyser",(c=I.AudioChannels||(I.AudioChannels={}))[c.Mono=0]="Mono",c[c.Stereo=1]="Stereo",c[c.Surround51=2]="Surround51",c[c.Surround71=3]="Surround71",(h=I.AudioCodec||(I.AudioCodec={}))[h.Opus=0]="Opus",h[h.Aac=1]="Aac",(d=I.AudioContainer||(I.AudioContainer={}))[d.Raw=0]="Raw",d[d.WebM=1]="WebM",d[d.IsoBMFF=2]="IsoBMFF",(r=I.VideoContainer||(I.VideoContainer={}))[r.Raw=0]="Raw",r[r.IsoBMFF=1]="IsoBMFF",(s=I.LogicError||(I.LogicError={}))[s.UnknownError=0]="UnknownError",s[s.DisplaysMissing=1]="DisplaysMissing",s[s.NoAvailableEncoder=2]="NoAvailableEncoder",s[s.InvalidEncodingConfig=3]="InvalidEncodingConfig",s[s.NoCodecsExchanged=4]="NoCodecsExchanged",s[s.NoCapabilities=5]="NoCapabilities",s[s.NoSuchStream=6]="NoSuchStream",s[s.ForceSegmentFailed=7]="ForceSegmentFailed",I.AudioConfig={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeEnum(A.codec),I.writeEnum(A.container),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readUint32(),{codec:I,container:g}}},(n=I.CaptureMode||(I.CaptureMode={}))[n.Unknown=0]="Unknown",n[n.FullDesktop=1]="FullDesktop",n[n.AppIsolation=2]="AppIsolation",n[n.BYOFB=3]="BYOFB",I.VideoConfig={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.VideoCodec.encodeInto(A.codec,g),g.writeEnum(A.container),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e;return g=I.VideoCodec.readFrom(A),e=A.readUint32(),{codec:g,container:e}}},(a=I.InputLevel||(I.InputLevel={}))[a.None=0]="None",a[a.GamepadPort1=1]="GamepadPort1",a[a.GamepadPort2=2]="GamepadPort2",a[a.GamepadPort3=4]="GamepadPort3",a[a.GamepadPort4=8]="GamepadPort4",a[a.Gamepad=15]="Gamepad",a[a.Mouse=16]="Mouse",a[a.Keyboard=32]="Keyboard",a[a.Clipboard=64]="Clipboard",I.DeviceInfo={discriminator:1,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeEnum(A.formFactor),I.writeString(A.deviceName),I.writeEnum(A.deviceOs),I.writeString(A.deviceOsVersion),I.writeString(A.deviceModel),I.writeString(A.userAgent),I.writeString(A.deviceId),I.writeByte(Number(A.isWeb)),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B,i,Q,C,t;return I=A.readUint32(),g=A.readString(),e=A.readUint32(),B=A.readString(),i=A.readString(),Q=A.readString(),C=A.readString(),t=!!A.readByte(),{formFactor:I,deviceName:g,deviceOs:e,deviceOsVersion:B,deviceModel:i,userAgent:Q,deviceId:C,isWeb:t}}},I.CodecPackRequest={discriminator:2,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom:A=>({})},I.CodecPackResponse={discriminator:3,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;{const e=A.videoCodecs.length;g.writeUint32(e);for(let B=0;B<e;B++)I.VideoCodec.encodeInto(A.videoCodecs[B],g)}return g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;{let e=A.readUint32();g=new Array(e);for(let B=0;B<e;B++){let e;e=I.VideoCodec.readFrom(A),g[B]=e}}return{videoCodecs:g}}},I.ClientCapabilities={discriminator:4,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;g.writeUint32(A.preferredWidth),g.writeUint32(A.preferredHeight),g.writeUint32(A.preferredFps),g.writeUint32(A.preferredAudioBitrate),g.writeUint32(A.preferredVideoBitrate),g.writeEnum(A.preferredAudioChannels),I.AudioConfig.encodeInto(A.preferredAudioConfig,g),I.VideoConfig.encodeInto(A.preferredVideoConfig,g);{const I=A.supportedAudioChannels.length;g.writeUint32(I);for(let e=0;e<I;e++)g.writeEnum(A.supportedAudioChannels[e])}{const e=A.supportedAudioConfigs.length;g.writeUint32(e);for(let B=0;B<e;B++)I.AudioConfig.encodeInto(A.supportedAudioConfigs[B],g)}{const e=A.supportedVideoConfigs.length;g.writeUint32(e);for(let B=0;B<e;B++)I.VideoConfig.encodeInto(A.supportedVideoConfigs[B],g)}return g.writeByte(Number(A.supportsOver1080P)),g.writeByte(Number(A.supportsTemporalScaling)),g.writeByte(Number(A.supportsAppIsolation)),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e,B,i,Q,C,t,E,o,a,n,s,r,d;g=A.readUint32(),e=A.readUint32(),B=A.readUint32(),i=A.readUint32(),Q=A.readUint32(),C=A.readUint32(),t=I.AudioConfig.readFrom(A),E=I.VideoConfig.readFrom(A);{let I=A.readUint32();o=new Array(I);for(let g=0;g<I;g++){let I;I=A.readUint32(),o[g]=I}}{let g=A.readUint32();a=new Array(g);for(let e=0;e<g;e++){let g;g=I.AudioConfig.readFrom(A),a[e]=g}}{let g=A.readUint32();n=new Array(g);for(let e=0;e<g;e++){let g;g=I.VideoConfig.readFrom(A),n[e]=g}}return s=!!A.readByte(),r=!!A.readByte(),d=!!A.readByte(),{preferredWidth:g,preferredHeight:e,preferredFps:B,preferredAudioBitrate:i,preferredVideoBitrate:Q,preferredAudioChannels:C,preferredAudioConfig:t,preferredVideoConfig:E,supportedAudioChannels:o,supportedAudioConfigs:a,supportedVideoConfigs:n,supportsOver1080P:s,supportsTemporalScaling:r,supportsAppIsolation:d}}},I.ErrorResponse={discriminator:5,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeEnum(A.error),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readUint32(),{error:I}}},I.StreamRequest={discriminator:6,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeUint32(A.inputLevel),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readUint32(),{inputLevel:I}}},I.StreamStarting={discriminator:7,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return g.writeByte(A.streamId),g.writeUint32(A.inputLevel),g.writeFloat32(A.temporalScaleFactor),I.AudioConfig.encodeInto(A.chosenAudioConfig,g),I.VideoConfig.encodeInto(A.chosenVideoConfig,g),g.writeEnum(A.captureMode),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e,B,i,Q,C;return g=A.readByte(),e=A.readUint32(),B=A.readFloat32(),i=I.AudioConfig.readFrom(A),Q=I.VideoConfig.readFrom(A),C=A.readUint32(),{streamId:g,inputLevel:e,temporalScaleFactor:B,chosenAudioConfig:i,chosenVideoConfig:Q,captureMode:C}}},I.LeaveStream={discriminator:8,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.StreamStopping={discriminator:9,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.KeyframeRequest={discriminator:10,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.VideoBitrateRequest={discriminator:11,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.writeUint32(A.bitsPerSecond),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readByte(),g=A.readUint32(),{streamId:I,bitsPerSecond:g}}},I.JoinStream={discriminator:12,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.PauseStream={discriminator:13,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readByte(),{streamId:I}}},I.RejectStreamRequest={discriminator:14,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeString(A.reason),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readString(),{reason:I}}},I.InputLevelUpdate={discriminator:15,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.writeUint32(A.inputLevel),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readByte(),g=A.readUint32(),{streamId:I,inputLevel:g}}},I.InputLevelRequest={discriminator:16,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeByte(A.streamId),I.writeUint32(A.inputLevel),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readByte(),g=A.readUint32(),{streamId:I,inputLevel:g}}},I.LogicBody={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.DeviceInfo.encodeInto(A.value,g);break;case 2:I.CodecPackRequest.encodeInto(A.value,g);break;case 3:I.CodecPackResponse.encodeInto(A.value,g);break;case 4:I.ClientCapabilities.encodeInto(A.value,g);break;case 5:I.ErrorResponse.encodeInto(A.value,g);break;case 6:I.StreamRequest.encodeInto(A.value,g);break;case 7:I.StreamStarting.encodeInto(A.value,g);break;case 8:I.LeaveStream.encodeInto(A.value,g);break;case 9:I.StreamStopping.encodeInto(A.value,g);break;case 10:I.KeyframeRequest.encodeInto(A.value,g);break;case 11:I.VideoBitrateRequest.encodeInto(A.value,g);break;case 12:I.JoinStream.encodeInto(A.value,g);break;case 13:I.PauseStream.encodeInto(A.value,g);break;case 14:I.RejectStreamRequest.encodeInto(A.value,g);break;case 15:I.InputLevelUpdate.encodeInto(A.value,g);break;case 16:I.InputLevelRequest.encodeInto(A.value,g)}const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),B=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.DeviceInfo.readFrom(A)};case 2:return{discriminator:2,value:I.CodecPackRequest.readFrom(A)};case 3:return{discriminator:3,value:I.CodecPackResponse.readFrom(A)};case 4:return{discriminator:4,value:I.ClientCapabilities.readFrom(A)};case 5:return{discriminator:5,value:I.ErrorResponse.readFrom(A)};case 6:return{discriminator:6,value:I.StreamRequest.readFrom(A)};case 7:return{discriminator:7,value:I.StreamStarting.readFrom(A)};case 8:return{discriminator:8,value:I.LeaveStream.readFrom(A)};case 9:return{discriminator:9,value:I.StreamStopping.readFrom(A)};case 10:return{discriminator:10,value:I.KeyframeRequest.readFrom(A)};case 11:return{discriminator:11,value:I.VideoBitrateRequest.readFrom(A)};case 12:return{discriminator:12,value:I.JoinStream.readFrom(A)};case 13:return{discriminator:13,value:I.PauseStream.readFrom(A)};case 14:return{discriminator:14,value:I.RejectStreamRequest.readFrom(A)};case 15:return{discriminator:15,value:I.InputLevelUpdate.readFrom(A)};case 16:return{discriminator:16,value:I.InputLevelRequest.readFrom(A)};default:throw A.index=B,new e.BebopRuntimeError("Unrecognized discriminator while decoding LogicBody")}}},(o=I.VideoDataType||(I.VideoDataType={}))[o.Metadata=0]="Metadata",o[o.CleanPointFrame=1]="CleanPointFrame",o[o.FrameDiff=2]="FrameDiff",(E=I.AudioDataType||(I.AudioDataType={}))[E.Metadata=0]="Metadata",E[E.Frame=1]="Frame",I.DesktopRect={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt32(A.left),I.writeInt32(A.top),I.writeUint32(A.width),I.writeUint32(A.height),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B;return I=A.readInt32(),g=A.readInt32(),e=A.readUint32(),B=A.readUint32(),{left:I,top:g,width:e,height:B}}},I.VideoData={discriminator:1,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;g.writeBytes(A.data),g.writeUint64(A.segmentTime),g.writeEnum(A.type),g.writeByte(A.streamId),I.DesktopRect.encodeInto(A.desktopRect,g);{const e=A.mask.length;g.writeUint32(e);for(let B=0;B<e;B++)I.DesktopRect.encodeInto(A.mask[B],g)}return g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e,B,i,Q,C;g=A.readBytes(),e=A.readUint64(),B=A.readUint32(),i=A.readByte(),Q=I.DesktopRect.readFrom(A);{let g=A.readUint32();C=new Array(g);for(let e=0;e<g;e++){let g;g=I.DesktopRect.readFrom(A),C[e]=g}}return{data:g,segmentTime:e,type:B,streamId:i,desktopRect:Q,mask:C}}},I.PointerData={discriminator:2,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeBytes(A.data),I.writeUint32(A.monitorWidth),I.writeUint32(A.monitorHeight),I.writeUint32(A.shapeWidth),I.writeUint32(A.shapeHeight),I.writeInt32(A.spotX),I.writeInt32(A.spotY),I.writeByte(Number(A.visible)),I.writeInt32(A.positionX),I.writeInt32(A.positionY),I.writeByte(A.streamId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B,i,Q,C,t,E,o,a;return I=A.readBytes(),g=A.readUint32(),e=A.readUint32(),B=A.readUint32(),i=A.readUint32(),Q=A.readInt32(),C=A.readInt32(),t=!!A.readByte(),E=A.readInt32(),o=A.readInt32(),a=A.readByte(),{data:I,monitorWidth:g,monitorHeight:e,shapeWidth:B,shapeHeight:i,spotX:Q,spotY:C,visible:t,positionX:E,positionY:o,streamId:a}}},I.AudioData={discriminator:3,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeBytes(A.data),I.writeEnum(A.type),I.writeByte(A.streamId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e;return I=A.readBytes(),g=A.readUint32(),e=A.readByte(),{data:I,type:g,streamId:e}}},I.MediaChunk={discriminator:4,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.Chunk.encodeInto(A.chunk,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;return g=I.Chunk.readFrom(A),{chunk:g}}},I.MediaBody={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.VideoData.encodeInto(A.value,g);break;case 2:I.PointerData.encodeInto(A.value,g);break;case 3:I.AudioData.encodeInto(A.value,g);break;case 4:I.MediaChunk.encodeInto(A.value,g)}const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),B=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.VideoData.readFrom(A)};case 2:return{discriminator:2,value:I.PointerData.readFrom(A)};case 3:return{discriminator:3,value:I.AudioData.readFrom(A)};case 4:return{discriminator:4,value:I.MediaChunk.readFrom(A)};default:throw A.index=B,new e.BebopRuntimeError("Unrecognized discriminator while decoding MediaBody")}}},I.DatagramChannel="network:datagrams",I.PeerKeyTemplate="network:peers:{0}",I.PendingConnectionRequestKeyTemplate="network:connection.requests:pending:{0}",I.AcceptedConnectionRequestKeyTemplate="network:connection.requests:accepted:{0}",I.PeerSetKeyTemplate="network:active.peers:{0}",I.GatewayResponseContext={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return g.writeInt64(A.sourcePeerId),g.writeInt64(A.targetPeerId),I.GatewayDatagram.encodeInto(A.datagram,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e,B;return g=A.readInt64(),e=A.readInt64(),B=I.GatewayDatagram.readFrom(A),{sourcePeerId:g,targetPeerId:e,datagram:B}}},(t=I.GatewayAlertLevel||(I.GatewayAlertLevel={}))[t.Unknown=0]="Unknown",t[t.Warning=1]="Warning",t[t.Fatal=2]="Fatal",(C=I.GatewayAlertDescription||(I.GatewayAlertDescription={}))[C.CloseNotify=0]="CloseNotify",C[C.UnexpectedMessage=10]="UnexpectedMessage",C[C.RecordOverflow=20]="RecordOverflow",C[C.TicketValidationError=30]="TicketValidationError",C[C.AccessDenied=49]="AccessDenied",C[C.DecodeError=50]="DecodeError",C[C.DecryptError=51]="DecryptError",C[C.ProtocolVersion=70]="ProtocolVersion",C[C.InternalError=80]="InternalError",C[C.PeerGoneAway=90]="PeerGoneAway",C[C.CommitFailure=100]="CommitFailure",C[C.ResourceExpired=200]="ResourceExpired",(Q=I.PeerTransportType||(I.PeerTransportType={}))[Q.Invalid=0]="Invalid",Q[Q.SCTP=1]="SCTP",Q[Q.GUDP=2]="GUDP",Q[Q.Reserved=3]="Reserved",(i=I.PeerInformationType||(I.PeerInformationType={}))[i.Invalid=0]="Invalid",i[i.Offer=1]="Offer",i[i.Answer=2]="Answer",i[i.Candidate=3]="Candidate",I.GatewayTrunk={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeString(A.machineId),I.writeDate(A.startDate),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readString(),g=A.readDate(),{machineId:I,startDate:g}}},I.GatewayIdentity={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeString(A.apiKey),I.writeInt64(A.id),I.writeString(A.externalId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e;return I=A.readString(),g=A.readInt64(),e=A.readString(),{apiKey:I,id:g,externalId:e}}},I.Peer={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt64(A.id),I.writeString(A.externalId),I.writeDate(A.connectionDate),I.writeInt64(A.organizationId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B;return I=A.readInt64(),g=A.readString(),e=A.readDate(),B=A.readInt64(),{id:I,externalId:g,connectionDate:e,organizationId:B}}},I.PendingConnectionRequest={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt64(A.sourcePeerId),I.writeInt64(A.targetPeerId),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readInt64(),g=A.readInt64(),{sourcePeerId:I,targetPeerId:g}}},I.GatewayHeader={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeUint32(A.syncKey),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I;return I=A.readUint32(),{syncKey:I}}},I.GatewayDatagram={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.GatewayHeader.encodeInto(A.header,g),I.GatewayBody.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e;return g=I.GatewayHeader.readFrom(A),e=I.GatewayBody.readFrom(A),{header:g,body:e}}},I.GatewayRequest={discriminator:1,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.GatewayRequestBody.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;return g=I.GatewayRequestBody.readFrom(A),{body:g}}},I.GatewayResponse={discriminator:2,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return I.GatewayResponseBody.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g;return g=I.GatewayResponseBody.readFrom(A),{body:g}}},I.GatewayAlert={discriminator:3,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeEnum(A.level),I.writeEnum(A.description),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readUint32(),g=A.readUint32(),{level:I,description:g}}},I.GatewayForwardable={discriminator:4,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length;return g.writeInt64(A.targetPeerId),I.GatewayForwardableBody.encodeInto(A.body,g),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g,e;return g=A.readInt64(),e=I.GatewayForwardableBody.readFrom(A),{targetPeerId:g,body:e}}},I.GatewayBody={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.GatewayRequest.encodeInto(A.value,g);break;case 2:I.GatewayResponse.encodeInto(A.value,g);break;case 3:I.GatewayAlert.encodeInto(A.value,g);break;case 4:I.GatewayForwardable.encodeInto(A.value,g)}const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),B=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.GatewayRequest.readFrom(A)};case 2:return{discriminator:2,value:I.GatewayResponse.readFrom(A)};case 3:return{discriminator:3,value:I.GatewayAlert.readFrom(A)};case 4:return{discriminator:4,value:I.GatewayForwardable.readFrom(A)};default:throw A.index=B,new e.BebopRuntimeError("Unrecognized discriminator while decoding GatewayBody")}}},I.InitConnectionRequest={discriminator:1,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt64(A.targetPeerId),I.writeEnum(A.desiredTransport),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readInt64(),g=A.readUint32(),{targetPeerId:I,desiredTransport:g}}},I.GatewayRequestBody={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.InitConnectionRequest.encodeInto(A.value,g)}const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),B=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.InitConnectionRequest.readFrom(A)};default:throw A.index=B,new e.BebopRuntimeError("Unrecognized discriminator while decoding GatewayRequestBody")}}},I.GatewayHello={discriminator:1,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom:A=>({})},I.GatewayResponseBody={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.GatewayHello.encodeInto(A.value,g)}const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),B=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.GatewayHello.readFrom(A)};default:throw A.index=B,new e.BebopRuntimeError("Unrecognized discriminator while decoding GatewayResponseBody")}}},I.ConnectionRequest={discriminator:1,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt64(A.sourcePeerId),I.writeString(A.sourceExternalId),I.writeEnum(A.desiredTransport),I.writeGuid(A.id),I.writeDate(A.expirationDate),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B,i;return I=A.readInt64(),g=A.readString(),e=A.readUint32(),B=A.readGuid(),i=A.readDate(),{sourcePeerId:I,sourceExternalId:g,desiredTransport:e,id:B,expirationDate:i}}},I.AcceptedConnectionRequest={discriminator:2,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt64(A.sourcePeerId),I.writeString(A.sourceExternalId),I.writeGuid(A.id),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e;return I=A.readInt64(),g=A.readString(),e=A.readGuid(),{sourcePeerId:I,sourceExternalId:g,id:e}}},I.RejectedConnectionRequest={discriminator:3,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeInt64(A.sourcePeerId),I.writeString(A.sourceExternalId),I.writeGuid(A.id),I.writeString(A.reason),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e,B;return I=A.readInt64(),g=A.readString(),e=A.readGuid(),B=A.readString(),{sourcePeerId:I,sourceExternalId:g,id:e,reason:B}}},I.PeerSignalingInformation={discriminator:4,encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeGuid(A.id),I.writeEnum(A.type),I.writeString(A.data),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g,e;return I=A.readGuid(),g=A.readUint32(),e=A.readString(),{id:I,type:g,data:e}}},I.GatewayForwardableBody={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length+1;switch(g.writeByte(A.discriminator),A.discriminator){case 1:I.ConnectionRequest.encodeInto(A.value,g);break;case 2:I.AcceptedConnectionRequest.encodeInto(A.value,g);break;case 3:I.RejectedConnectionRequest.encodeInto(A.value,g);break;case 4:I.PeerSignalingInformation.encodeInto(A.value,g)}const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){const g=A.readMessageLength(),B=A.index+1+g;switch(A.readByte()){case 1:return{discriminator:1,value:I.ConnectionRequest.readFrom(A)};case 2:return{discriminator:2,value:I.AcceptedConnectionRequest.readFrom(A)};case 3:return{discriminator:3,value:I.RejectedConnectionRequest.readFrom(A)};case 4:return{discriminator:4,value:I.PeerSignalingInformation.readFrom(A)};default:throw A.index=B,new e.BebopRuntimeError("Unrecognized discriminator while decoding GatewayForwardableBody")}}},I.TelemetrySetKey="network:telemetry:batches",I.TelemetryBatchesKeyTemplate="network:telemetry:batches:{0}",I.RainwayTelemetryRequest={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length;if(null!=A.records){g.writeByte(1);{const e=A.records.length;g.writeUint32(e);for(let B=0;B<e;B++)I.RainwayTelemetryRecord.encodeInto(A.records[B],g)}}null!=A.commonAttributes&&(g.writeByte(2),I.RainwayTelemetryRecord.encodeInto(A.commonAttributes,g)),g.writeByte(0);const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g={};const e=A.readMessageLength(),B=A.index+e;for(;;)switch(A.readByte()){case 0:return g;case 1:{let e=A.readUint32();g.records=new Array(e);for(let B=0;B<e;B++){let e;e=I.RainwayTelemetryRecord.readFrom(A),g.records[B]=e}}break;case 2:g.commonAttributes=I.RainwayTelemetryRecord.readFrom(A);break;default:return A.index=B,g}}},I.RainwayTelemetryRecord={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,g){const e=g.length,B=g.reserveMessageLength(),i=g.length;if(null!=A.name&&(g.writeByte(1),g.writeString(A.name)),null!=A.value&&(g.writeByte(2),g.writeString(A.value)),null!=A.time&&(g.writeByte(3),g.writeDate(A.time)),null!=A.type&&(g.writeByte(4),g.writeEnum(A.type)),null!=A.dimensions){g.writeByte(5);{const e=A.dimensions.length;g.writeUint32(e);for(let B=0;B<e;B++)I.RainwayTelemetryDimension.encodeInto(A.dimensions[B],g)}}g.writeByte(0);const Q=g.length;return g.fillMessageLength(B,Q-i),g.length-e},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let g={};const e=A.readMessageLength(),B=A.index+e;for(;;)switch(A.readByte()){case 0:return g;case 1:g.name=A.readString();break;case 2:g.value=A.readString();break;case 3:g.time=A.readDate();break;case 4:g.type=A.readUint32();break;case 5:{let e=A.readUint32();g.dimensions=new Array(e);for(let B=0;B<e;B++){let e;e=I.RainwayTelemetryDimension.readFrom(A),g.dimensions[B]=e}}break;default:return A.index=B,g}}},I.RainwayTelemetryDimension={encode(A){const I=e.BebopView.getInstance();return I.startWriting(),this.encodeInto(A,I),I.toArray()},encodeInto(A,I){const g=I.length;return I.writeString(A.name),I.writeString(A.value),I.length-g},decode(A){const I=e.BebopView.getInstance();return I.startReading(A),this.readFrom(I)},readFrom(A){let I,g;return I=A.readString(),g=A.readString(),{name:I,value:g}}},(B=I.TelemetryValueType||(I.TelemetryValueType={}))[B.Double=0]="Double",B[B.BigInt=1]="BigInt",B[B.VarChar=2]="VarChar",B[B.Bool=3]="Bool"},14:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.InputLevel=I.RainwayError=I.friendlyGamepadName=I.RainwayLogLevel=I.RainwayLogging=I.RainwayPeer=I.RainwayStream=I.RainwayRuntime=void 0;var e=g(783);Object.defineProperty(I,"RainwayRuntime",{enumerable:!0,get:function(){return e.RainwayRuntime}});var B=g(876);Object.defineProperty(I,"RainwayStream",{enumerable:!0,get:function(){return B.RainwayStream}});var i=g(420);Object.defineProperty(I,"RainwayPeer",{enumerable:!0,get:function(){return i.RainwayPeer}});var Q=g(464);Object.defineProperty(I,"RainwayLogging",{enumerable:!0,get:function(){return Q.RainwayLogging}}),Object.defineProperty(I,"RainwayLogLevel",{enumerable:!0,get:function(){return Q.RainwayLogLevel}});var C=g(99);Object.defineProperty(I,"friendlyGamepadName",{enumerable:!0,get:function(){return C.friendlyGamepadName}});var t=g(994);Object.defineProperty(I,"RainwayError",{enumerable:!0,get:function(){return t.RainwayError}});var E=g(904);Object.defineProperty(I,"InputLevel",{enumerable:!0,get:function(){return E.InputLevel}})},65:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayCursorPainter=void 0,I.RainwayCursorPainter=class{constructor(A,I,g,e=100){this.correctRemoteCursor=A,this.transformPointerOffsetToRemote=I,this.getCurrentFrameSize=g,this.cursorSyncInterval=e,this.container=void 0,this.video=void 0,this.canvas=void 0,this.cursorDiv=void 0,this.cursorImg=void 0,this.cursorState={visible:!1,x:0,y:0,spotX:0,spotY:0,extentWidth:0,extentHeight:0},this.wantsRemotePosition=!0,this.videoRect=new DOMRect(0,0,0,0),this.windowWidth=void 0,this.windowHeight=void 0,this.drawDebugDot=!1,this.debugDot=void 0,this.setVideoDimensions=()=>{for(const A of[this.video,this.canvas]){if(!A)continue;const I=A.getBoundingClientRect();if(I.width>0&&I.height>0)return this.videoRect=I,void this.applyCursorDivTransform()}},this.cursorSyncCounter=this.cursorSyncInterval,this.videoResizeObserver=new ResizeObserver((()=>{this.setVideoDimensions()})),["webkitfullscreenchange","mozfullscreenchange","fullscreenchange","MSFullscreenChange"].forEach((A=>{document.addEventListener(A,this.setVideoDimensions,!1)})),window.addEventListener("resize",this.setWindowDimensions)}detach(){["webkitfullscreenchange","mozfullscreenchange","fullscreenchange","MSFullscreenChange"].forEach((A=>{document.removeEventListener(A,this.setVideoDimensions,!1)})),window.removeEventListener("resize",this.setWindowDimensions),this.videoResizeObserver.disconnect()}setWindowDimensions(){this.windowWidth=window.innerWidth,this.windowHeight=window.innerHeight}setContainer(A){this.container=A,A.style.overflow="hidden",this.video&&this.videoResizeObserver.unobserve(this.video),this.canvas&&this.videoResizeObserver.unobserve(this.canvas),this.cursorDiv=void 0;const I=A.childNodes;for(let A=0;A<I.length;A++){const g=I[A];g instanceof HTMLVideoElement?(this.video=g,this.setVideoDimensions(),this.videoResizeObserver.observe(this.video)):g instanceof HTMLCanvasElement&&(g.classList.contains("rainway-canvas")||g.classList.contains("rainway-isolation-canvas"))?(this.canvas=g,this.setVideoDimensions(),this.videoResizeObserver.observe(this.canvas)):g instanceof HTMLDivElement&&(g.className.includes("rainway-cursor")?this.cursorDiv=g:g.className.includes("rainway-debug-dot")&&(this.debugDot=g))}this.cursorDiv||(this.cursorDiv=document.createElement("div"),this.cursorDiv.className="rainway-cursor",this.cursorDiv.style.position="absolute",this.cursorDiv.style.top="0px",this.cursorDiv.style.left="0px",this.cursorDiv.style.zIndex="1",this.cursorDiv.style.pointerEvents="none",this.cursorDiv.style.willChange="transform",this.cursorDiv.style.transformOrigin="top left",this.applyCursorDivTransform(),this.cursorImg=document.createElement("img"),this.cursorDiv.appendChild(this.cursorImg),A.appendChild(this.cursorDiv)),this.drawDebugDot&&!this.debugDot&&(this.debugDot=document.createElement("div"),this.debugDot.className="rainway-debug-dot",this.debugDot.style.position="absolute",this.debugDot.style.top="0px",this.debugDot.style.left="0px",this.debugDot.style.zIndex="1",this.debugDot.style.pointerEvents="none",this.debugDot.style.willChange="transform",this.debugDot.style.transformOrigin="top left",this.debugDot.style.width="3px",this.debugDot.style.height="3px",this.debugDot.style.backgroundColor="#ff0000",A.appendChild(this.debugDot))}unsetContainer(){var A,I;this.detach(),null===(A=this.cursorDiv)||void 0===A||A.remove(),null===(I=this.debugDot)||void 0===I||I.remove(),this.container=void 0}computeTransform(A){var I,g;const{x:e,y:B,spotX:i,spotY:Q}=A,C={left:0,top:0,width:A.extentWidth,height:A.extentHeight},{width:t,height:E}=this.videoRect,o=this.getCurrentFrameSize(),a=o.codecWidth,n=o.codecHeight,s=null!==(I=o.streamBounds)&&void 0!==I?I:C,r=null!==(g=o.fullDesktopBounds)&&void 0!==g?g:C,{left:d,top:h,width:c,height:D}=r,{left:w,top:y,width:u,height:l}=s,S=u*a/c,F=l*n/D,R=Math.min(t/S,E/F),G=Math.round(e-i-(w-d)),k=Math.round(B-Q-(y-h)),m=R*a/c,U=R*n/D;return`translate(${Math.round((t-R*S)/2)}px,${Math.round((E-R*F)/2)}px) scale(${m},${U}) translate(${G}px,${k}px)`}applyCursorDivTransform(){this.cursorDiv&&(this.cursorState.visible?(this.cursorDiv.style.visibility="visible",this.cursorDiv.style.transform=this.computeTransform(this.cursorState)):this.cursorDiv.style.visibility="hidden")}moveDebugDotTo(A){this.debugDot&&(this.debugDot.style.transform=this.computeTransform(A))}processCursor(A){if(this.cursorDiv)if(A.visible&&!this.cursorState.visible&&(this.wantsRemotePosition=!0),this.cursorState.visible=A.visible,this.cursorState.spotX=A.spotX,this.cursorState.spotY=A.spotY,this.cursorState.extentWidth=A.extentWidth,this.cursorState.extentHeight=A.extentHeight,this.drawDebugDot&&this.moveDebugDotTo(A),this.cursorState.visible){if(this.wantsRemotePosition?(this.cursorState.x=A.x,this.cursorState.y=A.y,this.wantsRemotePosition=!1,this.cursorSyncCounter=this.cursorSyncInterval):0==--this.cursorSyncCounter&&(this.correctRemoteCursor(this.cursorState.x,this.cursorState.y),this.cursorSyncCounter=this.cursorSyncInterval),this.cursorDiv.style.width=`${A.shapeWidth}px`,this.cursorDiv.style.height=`${A.shapeHeight}px`,A.hasPointerImage&&this.cursorImg){const I=function(A){let I="";const g=new Uint8Array(A),e=g.byteLength;for(let A=0;A<e;A++)I+=String.fromCharCode(g[A]);return window.btoa(I)}(A.pointerImage);this.cursorImg.src=`data:image/png;base64,${I}`}this.applyCursorDivTransform()}else this.cursorDiv.style.visibility="hidden"}update(A,I,g){if(this.cursorDiv&&("pointermove"===A.type||"mousemove"===A.type)){if("mouse"!==A.pointerType){const A=this.transformPointerOffsetToRemote(I,g);A&&(this.cursorState.x=A.x,this.cursorState.y=A.y)}else{const I=this.cursorState,g=A.movementX,e=A.movementY,B=this.getCurrentFrameSize();if(B.streamBounds){const{top:A,left:i,height:Q,width:C}=B.streamBounds;this.cursorState.x=Math.max(i,Math.min(I.x+g,i+C)),this.cursorState.y=Math.max(A,Math.min(I.y+e,A+Q))}else console.warn("Don't have streamBounds in CursorPainter.update?"),this.cursorState.x=Math.max(0,Math.min(I.x+g,I.extentWidth)),this.cursorState.y=Math.max(0,Math.min(I.y+e,I.extentHeight))}this.applyCursorDivTransform()}}}},99:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.friendlyGamepadName=void 0;const g={"054c":{"0268":"DualShock 3","05c4":"DualShock 4","09cc":"DualShock 4 (2nd Gen)"},"2dc8":{6101:"N30 Pro"},"0955":{b400:"NVIDIA Shield"},2563:{"0523":"ShanWan PS3 Controller"},"045e":{"02d1":"Xbox One Controller","02dd":"Xbox One Controller (Firmware 2015)","02e3":"Xbox One Elite Controller","02ea":"Xbox One S Controller","02fd":"Xbox One S Controller (Bluetooth)","028f":"Xbox360 Wireless Controller","028e":"Xbox360 Controller","0289":"Xbox Controller S","0285":"Xbox Controller S","0202":"Xbox Controller"},"046d":{c299:"G25 Racing Wheel",c29B:"G27 Racing Wheel",caa3:"DriveFX Racing Wheel",c295:"Momo Force Steering Wheel",c298:"Driving Force Pro"}};I.friendlyGamepadName=function(A,I){var e,B,i,Q;const C=A.id.split("(")[0].trim()||"Unknown gamepad",t=A.id.match(/\b([0-9a-f]{4})\b.*\b([0-9a-f]{4})\b/);if(!t)return C;const E=t[1],o=t[2];return null!==(Q=null!==(B=null===(e=null==I?void 0:I[E])||void 0===e?void 0:e[o])&&void 0!==B?B:null===(i=g[E])||void 0===i?void 0:i[o])&&void 0!==Q?Q:C}},322:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayGestureRecognizer=void 0;const g={clickDurationMs:60,dragDelayMs:300,rightClickDelayMs:500,touchSlopRadius:8,doubleTapWindowMs:400,doubleTapRadius:12,scrollGestureThresholdPixels:20,scrollEpsilonPixels:5,scrollSensitivity:4};var e,B,i;function Q(A){return A==B.left?1:A==B.middle?4:A==B.right?2:0}!function(A){A[A.idle=0]="idle",A[A.oneFingerDeciding=1]="oneFingerDeciding",A[A.twoFingersDeciding=2]="twoFingersDeciding",A[A.moving=3]="moving",A[A.dragging=4]="dragging",A[A.holdingRightMouseButton=5]="holdingRightMouseButton",A[A.zooming=6]="zooming",A[A.scrolling=7]="scrolling"}(e||(e={})),function(A){A[A.left=0]="left",A[A.middle=1]="middle",A[A.right=2]="right"}(B||(B={})),function(A){A[A.pixels=0]="pixels",A[A.lines=1]="lines",A[A.pages=2]="pages"}(i||(i={})),I.RainwayGestureRecognizer=class{constructor(A,I,i=g){this.reportPointerEvent=A,this.reportWheelEvent=I,this.parameters=i,this.state=e.idle,this.primary=void 0,this.secondary=void 0,this.centroidY=0,this.lastTapTime=new Date,this.rightClickTimer=void 0,this.rightClick=()=>{this.reportMouseDown(B.right),this.toState(e.holdingRightMouseButton),this.rightClickTimer=void 0},this.tapReleaseTimer=void 0,this.tapRelease=()=>{this.reportMouseUp(B.left),this.toState(e.idle),this.rightClickTimer=void 0},this.onPointerDown=A=>{const I={pointerId:A.pointerId,homeOffsetX:A.offsetX,homeOffsetY:A.offsetY,currentOffsetX:A.offsetX,currentOffsetY:A.offsetY,downTime:new Date,awake:!1};void 0===this.primary?(this.toState(e.oneFingerDeciding),this.primary=I,window.clearTimeout(this.rightClickTimer),this.rightClickTimer=window.setTimeout(this.rightClick,this.parameters.rightClickDelayMs)):void 0===this.secondary&&(this.toState(e.twoFingersDeciding),this.secondary=I,window.clearTimeout(this.rightClickTimer))},this.onPointerUp=A=>{var I;window.clearTimeout(this.rightClickTimer);const g=A.pointerId===(null===(I=this.primary)||void 0===I?void 0:I.pointerId);if(this.state===e.oneFingerDeciding&&g){this.log("pointer up from deciding, tapping"),window.clearTimeout(this.rightClickTimer);const I=Object.assign(Object.assign({},A),{offsetX:A.offsetX,offsetY:A.offsetY,pointerType:"touch",type:"pointermove"});this.reportPointerEvent(I),this.reportMouseDown(B.left),this.primary=void 0,this.lastTapTime=new Date,this.tapReleaseTimer=window.setTimeout(this.tapRelease,this.parameters.clickDurationMs)}else this.primary&&this.secondary?(this.log("stopping two finger gesture"),this.primary=void 0,this.secondary=void 0,this.toState(e.idle)):this.state===e.moving&&g?(this.log("stop moving"),this.primary=void 0,this.toState(e.idle)):this.state===e.dragging&&g?(this.log("stop dragging"),this.reportMouseUp(B.left),this.primary=void 0,this.toState(e.idle)):this.state===e.holdingRightMouseButton&&g&&(this.log("stop right click"),this.reportMouseUp(B.right),this.primary=void 0,this.toState(e.idle))},this.onPointerMove=A=>{var I,g;const i=A.pointerId===(null===(I=this.primary)||void 0===I?void 0:I.pointerId),Q=A.pointerId===(null===(g=this.secondary)||void 0===g?void 0:g.pointerId);if(this.primary&&i?(this.primary.currentOffsetX=A.offsetX,this.primary.currentOffsetY=A.offsetY):this.secondary&&Q&&(this.secondary.currentOffsetX=A.offsetX,this.secondary.currentOffsetY=A.offsetY),this.primary&&i&&!this.secondary)this.state===e.oneFingerDeciding&&function(A,I){const g=A.currentOffsetX-A.homeOffsetX,e=A.currentOffsetY-A.homeOffsetY;return g*g+e*e>I*I}(this.primary,this.parameters.touchSlopRadius)?(this.log("left touch slop radius"),window.clearTimeout(this.rightClickTimer),this.primary.awake=!0,(new Date).valueOf()-this.lastTapTime.valueOf()<this.parameters.dragDelayMs?(this.reportMouseDown(B.left),this.toState(e.dragging)):this.toState(e.moving)):this.state!==e.dragging&&this.state!==e.moving&&this.state!==e.holdingRightMouseButton||this.reportPointerEvent(A);else if(this.primary&&this.secondary)if(this.state===e.twoFingersDeciding){const A=this.primary.currentOffsetY-this.primary.homeOffsetY,I=this.secondary.currentOffsetY-this.secondary.homeOffsetY,g=this.parameters.scrollGestureThresholdPixels;(A>g&&I>g||A<g&&I<g)&&(this.toState(e.scrolling),this.centroidY=(A+I)/2)}else if(this.state===e.scrolling){const A=this.parameters.scrollEpsilonPixels,I=(this.primary.currentOffsetY-this.primary.homeOffsetY+(this.secondary.currentOffsetY-this.secondary.homeOffsetY))/2;I>this.centroidY+A?(this.reportScroll(this.parameters.scrollSensitivity*A),this.centroidY=I):I<this.centroidY-A&&(this.reportScroll(this.parameters.scrollSensitivity*-A),this.centroidY=I)}}}log(...A){}reportMouseUp(A){this.log("--\x3e report pointerup",A);const I=new PointerEvent("pointerup",{pointerType:"mouse",buttons:0,button:A});this.reportPointerEvent(I)}reportMouseDown(A){this.log("--\x3e report pointerdown",A);const I=new PointerEvent("pointerdown",{pointerType:"mouse",buttons:Q(A),button:A});this.reportPointerEvent(I)}reportScroll(A){const I=new WheelEvent("syntheticWheel",{deltaY:A,deltaMode:i.pixels});this.reportWheelEvent(I)}toState(A){this.log(["idle","oneFingerDeciding","twoFingersDeciding","moving","dragging","holdingRightMouseButton","zooming","scrolling"][A]),this.state=A}processPointerEvent(A){if("touch"===A.pointerType)switch(A.type){case"pointerdown":this.onPointerDown(A);break;case"pointerup":this.onPointerUp(A);break;case"pointerrawupdate":case"pointermove":this.onPointerMove(A)}else this.reportPointerEvent(A)}}},824:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayInputManager=I.mouseClickFrom=void 0;const e=g(994),B=g(904),i=g(40),Q=g(322),C=g(65),t=g(528),E=g(904);function o(A){let I,g;switch(A.button){default:case 0:I=0!=(1&A.buttons),g=E.MouseButton.Left;break;case 1:I=0!=(4&A.buttons),g=E.MouseButton.Middle;break;case 2:I=0!=(2&A.buttons),g=E.MouseButton.Right;break;case 3:I=0!=(8&A.buttons),g=E.MouseButton.X1;break;case 4:I=0!=(16&A.buttons),g=E.MouseButton.X2}return{button:g,action:I?E.ButtonAction.ButtonDown:E.ButtonAction.ButtonUp}}function a(A){return A.axes.length>=4&&A.buttons.length>=16}function n(A,I){if(A===I)return!0;if(A.length!==I.length)return!1;for(let g=0;g<A.length;++g)if(A[g]!==I[g])return!1;return!0}I.mouseClickFrom=o,I.RainwayInputManager=class{constructor(A,I={touchGestures:!1,unlockedMousePointer:!1,embraceMouseAcceleration:!1}){this.rainwayStream=A,this.options=I,this.level=B.InputLevel.None,this.container=void 0,this.heldCodes=new Set,this.alwaysReportGamepadPoll=!0,this.lockPointer=()=>{if(this.options.unlockedMousePointer)return;if(!this.container)return;if(!this.container.requestPointerLock)return;const A=!this.options.embraceMouseAcceleration,I=A?this.container.requestPointerLock({unadjustedMovement:!0}):this.container.requestPointerLock();I instanceof Promise?I.catch((I=>{var g;"NotSupportedError"===I.name&&A&&(null===(g=this.container)||void 0===g||g.requestPointerLock())})):this.container.onpointerlockerror=()=>{var I;A&&(null===(I=this.container)||void 0===I||I.requestPointerLock())},this.container.focus()},this.focusContainer=()=>{var A;return null===(A=this.container)||void 0===A?void 0:A.focus()},this.onPointerEventWithGestureProcessing=A=>{(A.pointerType&&"mouse"!==A.pointerType||document.pointerLockElement===this.container)&&(this.options.touchGestures&&"touch"===A.pointerType?(A.preventDefault(),this.gestureRecognizer.processPointerEvent(A)):this.onPointerEvent(A))},this.onPointerEventFromGestureRecognizer=A=>{this.onPointerEvent(A)},this.onPointerEvent=A=>{this.cursorPainter.update(A,this.rememberedOffsetX,this.rememberedOffsetY),this.reportPointerEvent(A)},this.scrolledAmount=0,this.onWheelEvent=A=>{this.scrolledAmount+=.05*A.deltaY,this.scrolledAmount>=1?(this.sendVerticalScroll(Math.floor(this.scrolledAmount)),this.scrolledAmount%=1):this.scrolledAmount<=-1&&(this.sendVerticalScroll(Math.ceil(this.scrolledAmount)),this.scrolledAmount%=-1)},this.onKeyboardEvent=A=>{A.preventDefault(),"keydown"===A.type?this.heldCodes.add(A.code):"keyup"===A.type&&this.heldCodes.delete(A.code);const I=i.RainwayVirtualKeyFromWebKeyCode[A.code];I&&this.sendInputDatagram({discriminator:E.KeyboardInput.discriminator,value:{action:"keydown"===A.type?E.KeyboardAction.KeyDown:E.KeyboardAction.KeyUp,keycodes:[I]}})},this.onGamepadConnectedEvent=A=>{},this.onGamepadDisconnectedEvent=A=>{},this.onDeviceMotion=A=>{},this.onDeviceOrientation=A=>{},this.gamepadCache=new Map,this.pollGamepads=A=>{if(navigator.getGamepads){if(this.container===document.activeElement){const A=[];for(const I of navigator.getGamepads()){if(!I||!a(I))continue;const g=I.buttons.map((A=>A.value)),e=this.gamepadCache.get(I.index);e&&n(e.axes,I.axes)&&n(e.buttonValues,g)||(A.push(this.makeGamepadInputEvent(I)),this.gamepadCache.set(I.index,{axes:[...I.axes],buttonValues:g}))}(this.alwaysReportGamepadPoll||A.length>0)&&this.reportGamepadEvents(A)}this.level&B.InputLevel.Gamepad&&(this.gamepadFrameHandle=window.requestAnimationFrame(this.pollGamepads))}},this.reportGamepadEvents=A=>{for(const I of A){let A=0;I.buttons.dpadUp&&(A|=1),I.buttons.dpadDown&&(A|=2),I.buttons.dpadLeft&&(A|=4),I.buttons.dpadRight&&(A|=8),I.buttons.start&&(A|=16),I.buttons.select&&(A|=32),I.buttons.leftStickPressed&&(A|=64),I.buttons.rightStickPressed&&(A|=128),I.buttons.leftShoulder&&(A|=256),I.buttons.rightShoulder&&(A|=512),I.buttons.a&&(A|=4096),I.buttons.b&&(A|=8192),I.buttons.x&&(A|=16384),I.buttons.y&&(A|=32768);const g={buttons:A,leftTrigger:Math.round(255*I.buttons.leftTrigger),rightTrigger:Math.round(255*I.buttons.rightTrigger),leftThumbX:Math.round(32767*I.sticks.left.x),leftThumbY:Math.round(32767*-I.sticks.left.y),rightThumbX:Math.round(32767*I.sticks.right.x),rightThumbY:Math.round(32767*-I.sticks.right.y),slot:1};this.sendInputDatagram({discriminator:E.GamepadReport.discriminator,value:g})}},this.moveMouseRelativeXY=(A,I)=>{this.sendMouseMove("relative",A,I)},this.moveMouseAbsoluteXY=(A,I)=>{this.sendMouseMove("absolute",A,I)},this.pointerFrameId=0,this.rememberedOffsetX=0,this.rememberedOffsetY=0,this.touches=new Map,this.reportPointerEvent=A=>{if("touch"===A.pointerType||"pen"===A.pointerType){if(document.pointerLockElement===this.container){const I=this.container.clientWidth,g=this.container.clientHeight,e=A.movementX,B=A.movementY;this.rememberedOffsetX=Math.max(0,Math.min(I,this.rememberedOffsetX+e)),this.rememberedOffsetY=Math.max(0,Math.min(g,this.rememberedOffsetY+B))}else this.rememberedOffsetX=A.offsetX,this.rememberedOffsetY=A.offsetY;const I=this.rainwayStream.transformPointerOffsetToRemote(this.rememberedOffsetX,this.rememberedOffsetY);if(!I)return;const{x:g,y:e}=I,i=Math.ceil(A.width/2),Q=Math.ceil(A.height/2),{pointerId:C,buttons:t}=A,E="pointercancel"===A.type||"pointerout"===A.type||"pointerleave"===A.type,o=t>0,a=("pointerover"===A.type?B.WindowsPointerFlags.New:0)|(o?B.WindowsPointerFlags.InContact:0)|(1==(3&t)?B.WindowsPointerFlags.FirstButton:0)|(3==(3&t)?B.WindowsPointerFlags.SecondButton:0)|(A.isPrimary?B.WindowsPointerFlags.Primary:0)|("pointercancel"===A.type?B.WindowsPointerFlags.Canceled:0)|("pointerdown"===A.type?B.WindowsPointerFlags.Down:"pointerup"===A.type?B.WindowsPointerFlags.Up:B.WindowsPointerFlags.Update)|(E?o?B.WindowsPointerFlags.Up:B.WindowsPointerFlags.Update:B.WindowsPointerFlags.InRange),n={pointerId:C,frameId:++this.pointerFrameId,pointerFlags:a,x:g,y:e},s=Math.round(A.twist)%360,r=Math.round(1024*A.pressure);if("touch"===A.pointerType){const A={pointerInfo:n,touchMask:B.TouchMask.ContactArea|B.TouchMask.Orientation|B.TouchMask.Pressure,contactLeft:g-i,contactTop:e-Q,contactRight:g+i,contactBottom:e+Q,orientation:s,pressure:r};this.touches.set(C,A),this.sendInputDatagram({discriminator:B.TouchesAbsolute.discriminator,value:{touches:[...this.touches.values()]}}),E&&this.touches.delete(C)}else{const I=(2&t?B.PenFlags.Barrel:0)|(32&t?B.PenFlags.Eraser:0);this.sendInputDatagram({discriminator:B.PenAbsolute.discriminator,value:{pointerInfo:n,penMask:B.PenMask.Pressure|B.PenMask.Rotation|B.PenMask.TiltX|B.PenMask.TiltY,penFlags:I,rotation:s,pressure:r,tiltX:Math.round(A.tiltX),tiltY:Math.round(A.tiltY)}})}}else if((A.movementX||A.movementY)&&this.sendMouseMove("relative",A.movementX,A.movementY),A.button>-1){const I=o(A);this.sendMouseClick(I)}},this.cursorPainter=new C.RainwayCursorPainter(this.moveMouseAbsoluteXY,((A,I)=>this.rainwayStream.transformPointerOffsetToRemote(A,I)),(()=>this.rainwayStream.currentFrameSize)),this.gestureRecognizer=new Q.RainwayGestureRecognizer(this.onPointerEventFromGestureRecognizer,this.onWheelEvent)}setContainer(A){if(this.cursorPainter.setContainer(A),this.container){const I=this.level;this.setInputLevel(B.InputLevel.None,!1),this.container=A,this.setInputLevel(I,!1)}else this.container=A}unsetContainer(){this.setInputLevel(B.InputLevel.None,!1),this.cursorPainter.unsetContainer(),this.container=void 0}setInputLevel(A,I=!0,g=!0){this.alwaysReportGamepadPoll=g;const e=A&~this.level,i=this.level&~A;this.level=A,e&B.InputLevel.Gamepad&&this.startGamepad(I),i&B.InputLevel.Gamepad&&this.stopGamepad(),e&B.InputLevel.Mouse&&this.startMouse(),i&B.InputLevel.Mouse&&this.stopMouse(),e&B.InputLevel.Keyboard&&this.startKeyboard(),i&B.InputLevel.Keyboard&&this.stopKeyboard()}getInputLevel(){return this.level}startGamepad(A){window.addEventListener("gamepadconnected",this.onGamepadConnectedEvent),window.addEventListener("gamepaddisconnected",this.onGamepadDisconnectedEvent),this.gamepadFrameHandle=window.requestAnimationFrame(this.pollGamepads),A&&this.reportConnectedGamepads()}reportConnectedGamepads(){for(const A of navigator.getGamepads())A&&this.onGamepadConnectedEvent(new GamepadEvent("gamepadconnected",{gamepad:A}))}stopGamepad(){window.removeEventListener("gamepadconnected",this.onGamepadConnectedEvent),window.removeEventListener("gamepaddisconnected",this.onGamepadDisconnectedEvent),this.gamepadFrameHandle&&window.cancelAnimationFrame(this.gamepadFrameHandle),this.gamepadFrameHandle=void 0}pointerEventListeners(A){if(!window.PointerEvent)throw new Error("browser does not support PointerEvent");A(t.isDesktopSafari&&navigator.maxTouchPoints<1?"mousemove":window.onpointerrawupdate?"pointerrawupdate":"pointermove",this.onPointerEventWithGestureProcessing),A("pointerdown",this.onPointerEventWithGestureProcessing),A("pointerup",this.onPointerEventWithGestureProcessing),A("pointerover",this.onPointerEventWithGestureProcessing),A("pointerenter",this.onPointerEventWithGestureProcessing),A("pointercancel",this.onPointerEventWithGestureProcessing),A("pointerout",this.onPointerEventWithGestureProcessing),A("pointerleave",this.onPointerEventWithGestureProcessing),A("wheel",this.onWheelEvent),A("mouseup",this.lockPointer)}startMouse(){if(!this.container)throw new e.RainwayError("Rainway tried to add an event listener to its container to handle mouse input, but no container element is set. Try calling setContainer() first.");this.pointerEventListeners(this.container.addEventListener.bind(this.container))}stopMouse(){this.container&&this.pointerEventListeners(this.container.removeEventListener.bind(this.container))}startKeyboard(){if(!this.container)throw new e.RainwayError("Rainway tried to add an event listener to its container to handle keyboard input, but no container element is set. Try calling setContainer() first.");this.container.addEventListener("keydown",this.onKeyboardEvent),this.container.addEventListener("keyup",this.onKeyboardEvent),this.container.addEventListener("click",this.focusContainer),this.container.focus()}stopKeyboard(){this.container&&(this.releaseKeys(),this.container.removeEventListener("keydown",this.onKeyboardEvent),this.container.removeEventListener("keyup",this.onKeyboardEvent),this.container.removeEventListener("click",this.focusContainer))}startDeviceMotionEvents(){window.addEventListener("devicemotion",this.onDeviceMotion)}stopDeviceMotionEvents(){window.removeEventListener("devicemotion",this.onDeviceMotion)}startDeviceOrientationEvents(){window.addEventListener("deviceorientation",this.onDeviceOrientation)}stopDeviceOrientationEvents(){window.removeEventListener("deviceorientation",this.onDeviceOrientation)}sendVerticalScroll(A){this.sendInputDatagram({discriminator:E.MouseScroll.discriminator,value:{axis:E.ScrollAxis.Vertical,delta:A}})}makeGamepadInputEvent(A){var I,g,e,B,i,Q,C,t,E,o,a,n,s,r,d,h,c,D,w,y,u,l,S,F,R,G,k,m,U,N,p,f,M,L,H,K,q,J;return{id:A.id,index:A.index,buttons:{a:null!==(g=null===(I=A.buttons[0])||void 0===I?void 0:I.value)&&void 0!==g?g:0,b:null!==(B=null===(e=A.buttons[1])||void 0===e?void 0:e.value)&&void 0!==B?B:0,x:null!==(Q=null===(i=A.buttons[2])||void 0===i?void 0:i.value)&&void 0!==Q?Q:0,y:null!==(t=null===(C=A.buttons[3])||void 0===C?void 0:C.value)&&void 0!==t?t:0,leftShoulder:null!==(o=null===(E=A.buttons[4])||void 0===E?void 0:E.value)&&void 0!==o?o:0,rightShoulder:null!==(n=null===(a=A.buttons[5])||void 0===a?void 0:a.value)&&void 0!==n?n:0,leftTrigger:null!==(r=null===(s=A.buttons[6])||void 0===s?void 0:s.value)&&void 0!==r?r:0,rightTrigger:null!==(h=null===(d=A.buttons[7])||void 0===d?void 0:d.value)&&void 0!==h?h:0,select:null!==(D=null===(c=A.buttons[8])||void 0===c?void 0:c.value)&&void 0!==D?D:0,start:null!==(y=null===(w=A.buttons[9])||void 0===w?void 0:w.value)&&void 0!==y?y:0,leftStickPressed:null!==(l=null===(u=A.buttons[10])||void 0===u?void 0:u.value)&&void 0!==l?l:0,rightStickPressed:null!==(F=null===(S=A.buttons[11])||void 0===S?void 0:S.value)&&void 0!==F?F:0,dpadUp:null!==(G=null===(R=A.buttons[12])||void 0===R?void 0:R.value)&&void 0!==G?G:0,dpadDown:null!==(m=null===(k=A.buttons[13])||void 0===k?void 0:k.value)&&void 0!==m?m:0,dpadLeft:null!==(N=null===(U=A.buttons[14])||void 0===U?void 0:U.value)&&void 0!==N?N:0,dpadRight:null!==(f=null===(p=A.buttons[15])||void 0===p?void 0:p.value)&&void 0!==f?f:0,home:null!==(L=null===(M=A.buttons[16])||void 0===M?void 0:M.value)&&void 0!==L?L:0},sticks:{left:{x:null!==(H=A.axes[0])&&void 0!==H?H:0,y:null!==(K=A.axes[1])&&void 0!==K?K:0},right:{x:null!==(q=A.axes[2])&&void 0!==q?q:0,y:null!==(J=A.axes[3])&&void 0!==J?J:0}}}}feedGamepadInputEvent(A){this.reportGamepadEvents(A)}vibrateGamepad(A,I){var g,e;const B=navigator.getGamepads()[A];if(null==B?void 0:B.vibrationActuator)null===(e=(g=B.vibrationActuator).playEffect)||void 0===e||e.call(g,"dual-rumble",I);else if(null==B?void 0:B.hapticActuators){const A=null==B?void 0:B.hapticActuators;setTimeout((()=>{var g,e,B;for(const i of A)if("pulse"in i){const A=Math.max(null!==(g=I.strongMagnitude)&&void 0!==g?g:0,null!==(e=I.weakMagnitude)&&void 0!==e?e:0);i.pulse(A,null!==(B=I.duration)&&void 0!==B?B:0)}}),I.startDelay)}}feedKeyboardEvent(A){this.onKeyboardEvent(A)}releaseKeys(){for(const A of this.heldCodes)this.onKeyboardEvent(new KeyboardEvent("keyup",{code:A}));this.heldCodes.clear()}feedPointerEvent(A){this.onPointerEvent(A)}feedWheelEvent(A){this.onWheelEvent(A)}processCursor(A){this.cursorPainter.processCursor(A)}enableGestures(){this.options.touchGestures=!0}disableGestures(){this.options.touchGestures=!1}sendMouseMove(A,I,g){"absolute"===A?this.sendInputDatagram({discriminator:E.MouseAbsolute.discriminator,value:{x:I,y:g}}):this.sendInputDatagram({discriminator:E.MouseRelative.discriminator,value:{dx:I,dy:g}})}sendMouseClick(A){this.sendInputDatagram({discriminator:E.MouseClick.discriminator,value:A})}sendInputDatagram(A){this.rainwayStream.sendInput(A)}dispose(){this.unsetContainer()}}},40:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayVirtualKeyFromWebKeyCode=void 0;const e=g(904);I.RainwayVirtualKeyFromWebKeyCode={Unidentified:e.VirtualKey.None,Cancel:e.VirtualKey.Cancel,Backspace:e.VirtualKey.Back,Tab:e.VirtualKey.Tab,Enter:e.VirtualKey.Enter,Pause:e.VirtualKey.Pause,CapsLock:e.VirtualKey.CapsLock,HangulMode:e.VirtualKey.HangulMode,KanaMode:e.VirtualKey.HangulMode,Lang1:e.VirtualKey.HangulMode,Hanja:e.VirtualKey.HanjaMode,Lang2:e.VirtualKey.HanjaMode,Escape:e.VirtualKey.Escape,Convert:e.VirtualKey.ImeConvert,NonConvert:e.VirtualKey.ImeNonConvert,Space:e.VirtualKey.Space," ":e.VirtualKey.Space,Spacebar:e.VirtualKey.Space,PageUp:e.VirtualKey.PageUp,PageDown:e.VirtualKey.PageDown,End:e.VirtualKey.End,Home:e.VirtualKey.Home,ArrowLeft:e.VirtualKey.Left,ArrowUp:e.VirtualKey.Up,ArrowRight:e.VirtualKey.Right,ArrowDown:e.VirtualKey.Down,Select:e.VirtualKey.Select,PrintScreen:e.VirtualKey.PrintScreen,Insert:e.VirtualKey.Insert,Delete:e.VirtualKey.Delete,Help:e.VirtualKey.Help,Digit0:e.VirtualKey.D0,Digit1:e.VirtualKey.D1,Digit2:e.VirtualKey.D2,Digit3:e.VirtualKey.D3,Digit4:e.VirtualKey.D4,Digit5:e.VirtualKey.D5,Digit6:e.VirtualKey.D6,Digit7:e.VirtualKey.D7,Digit8:e.VirtualKey.D8,Digit9:e.VirtualKey.D9,KeyA:e.VirtualKey.A,KeyB:e.VirtualKey.B,KeyC:e.VirtualKey.C,KeyD:e.VirtualKey.D,KeyE:e.VirtualKey.E,KeyF:e.VirtualKey.F,KeyG:e.VirtualKey.G,KeyH:e.VirtualKey.H,KeyI:e.VirtualKey.I,KeyJ:e.VirtualKey.J,KeyK:e.VirtualKey.K,KeyL:e.VirtualKey.L,KeyM:e.VirtualKey.M,KeyN:e.VirtualKey.N,KeyO:e.VirtualKey.O,KeyP:e.VirtualKey.P,KeyQ:e.VirtualKey.Q,KeyR:e.VirtualKey.R,KeyS:e.VirtualKey.S,KeyT:e.VirtualKey.T,KeyU:e.VirtualKey.U,KeyV:e.VirtualKey.V,KeyW:e.VirtualKey.W,KeyX:e.VirtualKey.X,KeyY:e.VirtualKey.Y,KeyZ:e.VirtualKey.Z,MetaLeft:e.VirtualKey.LWin,OSLeft:e.VirtualKey.LWin,MetaRight:e.VirtualKey.RWin,OSRight:e.VirtualKey.RWin,ContextMenu:e.VirtualKey.Apps,Sleep:e.VirtualKey.Sleep,Numpad0:e.VirtualKey.NumPad0,Numpad1:e.VirtualKey.NumPad1,Numpad2:e.VirtualKey.NumPad2,Numpad3:e.VirtualKey.NumPad3,Numpad4:e.VirtualKey.NumPad4,Numpad5:e.VirtualKey.NumPad5,Numpad6:e.VirtualKey.NumPad6,Numpad7:e.VirtualKey.NumPad7,Numpad8:e.VirtualKey.NumPad8,Numpad9:e.VirtualKey.NumPad9,NumpadMultiply:e.VirtualKey.Multiply,NumpadAdd:e.VirtualKey.Add,NumpadComma:e.VirtualKey.Separator,NumpadSubtract:e.VirtualKey.Subtract,NumpadDecimal:e.VirtualKey.Decimal,NumpadDivide:e.VirtualKey.Divide,F1:e.VirtualKey.F1,F2:e.VirtualKey.F2,F3:e.VirtualKey.F3,F4:e.VirtualKey.F4,F5:e.VirtualKey.F5,F6:e.VirtualKey.F6,F7:e.VirtualKey.F7,F8:e.VirtualKey.F8,F9:e.VirtualKey.F9,F10:e.VirtualKey.F10,F11:e.VirtualKey.F11,F12:e.VirtualKey.F12,F13:e.VirtualKey.F13,F14:e.VirtualKey.F14,F15:e.VirtualKey.F15,F16:e.VirtualKey.F16,F17:e.VirtualKey.F17,F18:e.VirtualKey.F18,F19:e.VirtualKey.F19,F20:e.VirtualKey.F20,F21:e.VirtualKey.F21,F22:e.VirtualKey.F22,F23:e.VirtualKey.F23,F24:e.VirtualKey.F24,NumLock:e.VirtualKey.NumLock,ScrollLock:e.VirtualKey.Scroll,ShiftLeft:e.VirtualKey.LeftShift,ShiftRight:e.VirtualKey.RightShift,ControlLeft:e.VirtualKey.LeftCtrl,ControlRight:e.VirtualKey.RightCtrl,AltLeft:e.VirtualKey.LeftAlt,AltRight:e.VirtualKey.RightAlt,BrowserBack:e.VirtualKey.BrowserBack,BrowserForward:e.VirtualKey.BrowserForward,BrowserRefresh:e.VirtualKey.BrowserRefresh,BrowserStop:e.VirtualKey.BrowserStop,BrowserSearch:e.VirtualKey.BrowserSearch,BrowserFavorites:e.VirtualKey.BrowserFavorites,BrowserHome:e.VirtualKey.BrowserHome,AudioVolumeMute:e.VirtualKey.VolumeMute,AudioVolumeDown:e.VirtualKey.VolumeDown,AudioVolumeUp:e.VirtualKey.VolumeUp,MediaTrackNext:e.VirtualKey.MediaNextTrack,MediaTrackPrevious:e.VirtualKey.MediaPreviousTrack,MediaStop:e.VirtualKey.MediaStop,MediaPlayPause:e.VirtualKey.MediaPlayPause,LaunchMail:e.VirtualKey.LaunchMail,LaunchMediaPlayer:e.VirtualKey.SelectMedia,MediaSelect:e.VirtualKey.SelectMedia,LaunchApp1:e.VirtualKey.LaunchApplication1,LaunchApp2:e.VirtualKey.LaunchApplication2,Semicolon:e.VirtualKey.Oem1,Equal:e.VirtualKey.OemPlus,Comma:e.VirtualKey.OemComma,Minus:e.VirtualKey.OemMinus,Period:e.VirtualKey.OemPeriod,Slash:e.VirtualKey.Oem2,Backquote:e.VirtualKey.Oem3,BracketLeft:e.VirtualKey.Oem4,Backslash:e.VirtualKey.Oem5,BracketRight:e.VirtualKey.Oem6,Quote:e.VirtualKey.Oem7,IntlBackslash:e.VirtualKey.Oem102}},464:(A,I)=>{"use strict";var g;Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayLogging=I.RainwayLogLevel=void 0,function(A){A[A.Trace=0]="Trace",A[A.Debug=1]="Debug",A[A.Information=2]="Information",A[A.Warning=3]="Warning",A[A.Error=4]="Error",A[A.Critical=5]="Critical",A[A.Silent=6]="Silent"}(g=I.RainwayLogLevel||(I.RainwayLogLevel={}));class e{static setLogSink(A){e._logSink=A}static log(A,I){var g;null===(g=e._logSink)||void 0===g||g.call(e,A,I)}}I.RainwayLogging=e,e.trace=A=>e.log(g.Trace,A),e.debug=A=>e.log(g.Debug,A),e.information=A=>e.log(g.Information,A),e.warning=A=>e.log(g.Warning,A),e.error=A=>e.log(g.Error,A),e.critical=A=>e.log(g.Critical,A)},585:function(A,I,g){"use strict";var e=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},B=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0}),I.AudioStream=void 0;const i=B(g(53)),Q=g(994),C=g(464);I.AudioStream=class{constructor(){this.sampleRateHz=48e3,this.sampleRateKhz=48,this.channelCount=2,this.decodedCount=0,this.totalSamplesDecoded=0,this.waitingToDecodeQueue=[],this.decodeQueueSize=0,this.logPerformance=!1,this.maxDecodingTimeMs=0,this.totalDecodingTimeMs=0,this.totalQueuedSize=0,this.maxQueuedSize=0,this.startStreamTimeMs=0,this.outputBuffers=[],this.currentOutputBuffer=void 0,this.currentBufferReadIndex=0,this.nextStartTime=void 0,this.playing=!1,this.dataDurationMs=10,this.minLatencyMs=60,this.maxLatencyMs=100,this.prevDroppedFrameTimeMs=void 0,this.decodedSamplesPerFrame=0,this.audioBufferSize=0,this.audioBufferPool=[],this.maxAudioBufferPoolCount=5,this.resampledAudioBufferSize=0,this.onDecode=({startTimestamp:A,outputData:I,samplesDecoded:g})=>{--this.decodeQueueSize;const e=new Float32Array(I);this.outputBuffers.push(e);try{if(g>0&&(++this.decodedCount,this.totalSamplesDecoded+=g,this.logPerformance&&this.logPerfTiming(A),this.totalSamplesDecoded>=this.audioBufferSize&&(this.nextStartTime&&this.nextStartTime<this.audioContext.currentTime&&(this.nextStartTime=void 0),this.nextStartTime||this.totalSamplesDecoded>=2*this.audioBufferSize))){const A=Math.floor(this.totalSamplesDecoded/this.audioBufferSize);for(let I=0;I<A;++I){const A=this.nextStartTime?1e3*(this.nextStartTime-this.audioContext.currentTime):0;if(A>this.maxLatencyMs){let I=0;const g=Date.now(),e=this.prevDroppedFrameTimeMs?g-this.prevDroppedFrameTimeMs:void 0,B=1e4;if(e&&e<B)I=this.dropDecodedSamples(this.totalSamplesDecoded);else{const g=A-this.maxLatencyMs+this.dataDurationMs,e=Math.floor(this.sampleRateKhz*g);I=this.dropDecodedSamples(e)}this.prevDroppedFrameTimeMs=g,this.totalSamplesDecoded-=I}if(!(this.totalSamplesDecoded>=this.audioBufferSize))break;{const A=this.copyDecodedSamplesToAudioBuffer();this.scheduleBufferForPlaybackFunc(A),this.totalSamplesDecoded-=A.length}}}}catch(A){C.RainwayLogging.warning("Caught exception in AudioStream onDecode: "+A+" "+A.stack),this.stop(),this.play()}this.sendDecoderWaitingToDecodeFrames()}}initialize(){return e(this,void 0,void 0,(function*(){this.opusDecoderWorker=new i.default,yield this.opusDecoderWorker.initialize(),this.opusDecoderWorker.onDecode=this.onDecode.bind(this)}))}dispose(){var A;null===(A=this.opusDecoderWorker)||void 0===A||A.dispose(),this.opusDecoderWorker=void 0}configure({audioContext:A,sampleRateHz:I,channelCount:g,dataDurationMs:e,minLatencyMs:B,maxLatencyMs:i}){if(this.sampleRateHz=null!=I?I:this.sampleRateHz,8e3!=this.sampleRateHz&&12e3!=this.sampleRateHz&&16e3!=this.sampleRateHz&&24e3!=this.sampleRateHz&&48e3!=this.sampleRateHz)throw new Q.RainwayError(`invalid audio sample rate: ${this.sampleRateHz} (must be 8000, 12000, 16000, 24000, or 48000)`);if(this.sampleRateKhz=this.sampleRateHz/1e3,this.channelCount=null!=g?g:this.channelCount,1!=this.channelCount&&2!=this.channelCount&&6!=this.channelCount)throw new Q.RainwayError(`invalid channel count: ${this.channelCount} (must be 1, 2, or 6)`);if(this.dataDurationMs=null!=e?e:this.dataDurationMs,this.minLatencyMs=null!=B?B:this.minLatencyMs,this.maxLatencyMs=null!=i?i:this.maxLatencyMs,this.dataDurationMs<=0)throw new Q.RainwayError(`dataDurationMs must be positive, but is ${this.dataDurationMs}`);if(this.dataDurationMs>this.minLatencyMs)throw new Q.RainwayError("dataDurationMs may not exceed minLatencyMs");if(this.maxLatencyMs<=this.minLatencyMs)throw new Q.RainwayError("maxLatencyMs must be greater than minLatencyMs");this.decodedSamplesPerFrame=this.dataDurationMs*this.sampleRateKhz,this.currentOutputBuffer=void 0,this.currentBufferReadIndex=0;const t=this.sampleRateKhz*this.minLatencyMs;this.audioBufferSize=Math.floor(t/2),null==A?(this.audioContext=new(window.AudioContext||window.webkitAudioContext)({latencyHint:"interactive",sampleRate:this.sampleRateHz}),this.audioContext.createBufferSource()):this.audioContext=A,this.volumeNode=this.audioContext.createGain(),this.volumeNode.connect(this.audioContext.destination),this.audioContext.resume(),"suspended"==this.audioContext.state&&C.RainwayLogging.information("AudioContext is suspended. Note, on Safari, must be created directly from user interaction (i.e. no 'await'))."),this.audioContext.sampleRate!=this.sampleRateHz?(C.RainwayLogging.warning("Configured sample rate: "+this.sampleRateHz+" does not match AudioContext: "+this.audioContext.sampleRate+". Resampling is required!"),this.resampledAudioBufferSize=Math.floor(this.audioContext.sampleRate/1e3*this.minLatencyMs/2),this.scheduleBufferForPlaybackFunc=this.resampleBufferThenScheduleForPlayback.bind(this)):this.scheduleBufferForPlaybackFunc=this.scheduleBufferForPlayback.bind(this),this.audioBufferPool=[];let E=!1;this.playing&&(E=!0,this.stop()),E&&this.play()}play(){if(!this.opusDecoderWorker)throw new Q.RainwayError("play() has no opusDecoderWorker");if(!this.sampleRateHz)throw new Q.RainwayError("play() has no sampleRateHz");if(!this.channelCount)throw new Q.RainwayError("play() has no channelCount");if(!this.audioContext)throw new Q.RainwayError("play() has no audioContext");this.playing||(this.maxDecodingTimeMs=0,this.totalDecodingTimeMs=0,this.totalQueuedSize=0,this.maxQueuedSize=0,this.startStreamTimeMs=Date.now(),this.opusDecoderWorker.startStream(this.sampleRateHz,this.channelCount,this.decodedSamplesPerFrame),this.playing=!0)}stop(){if(!this.opusDecoderWorker)throw new Q.RainwayError("stop() has no opusDecoderWorker");this.waitingToDecodeQueue=[],this.outputBuffers=[],this.nextStartTime=void 0,this.totalSamplesDecoded=0,this.currentOutputBuffer=void 0,this.currentBufferReadIndex=0,this.prevDroppedFrameTimeMs=void 0,this.opusDecoderWorker.stopStream(),this.playing=!1}pushData(A){this.playing&&this.audioContext&&this.opusDecoderWorker&&(0==this.decodeQueueSize?(0!=this.waitingToDecodeQueue.length&&(C.RainwayLogging.error("[AudioStream] empty decoder queue, but waiting to decode queue not empty!"),this.waitingToDecodeQueue=[]),this.sendToDecoder({startTimestamp:Date.now(),inputData:A})):(this.waitingToDecodeQueue.push({startTimestamp:Date.now(),inputData:A}),this.decodeQueueSize<3&&this.sendDecoderWaitingToDecodeFrames()))}sendDecoderWaitingToDecodeFrames(){const A=(this.decodeQueueSize+this.waitingToDecodeQueue.length)*this.dataDurationMs;if(A>this.maxLatencyMs){const I=A-this.maxLatencyMs,g=Math.floor(I/this.dataDurationMs),e=Math.max(Math.max(this.waitingToDecodeQueue.length-g,3-this.decodeQueueSize),1),B=this.waitingToDecodeQueue.length-e;this.waitingToDecodeQueue=this.waitingToDecodeQueue.slice(B)}for(;this.decodeQueueSize<3&&this.waitingToDecodeQueue.length>0;){const A=this.waitingToDecodeQueue.shift();this.sendToDecoder(A)}}sendToDecoder(A){++this.decodeQueueSize,this.opusDecoderWorker.decode(A.startTimestamp,A.inputData)}dropDecodedSamples(A){let I=0;for(this.currentOutputBuffer&&(I+=this.dropCurrentOutputBufferSamples(A),A-=I);A>0&&this.outputBuffers.length>0;)if(A<this.decodedSamplesPerFrame){this.currentOutputBuffer=this.outputBuffers.shift(),this.currentBufferReadIndex=0;const g=this.dropCurrentOutputBufferSamples(A);I+=g,A-=g}else this.outputBuffers.shift(),I+=this.decodedSamplesPerFrame,A-=this.decodedSamplesPerFrame;return I}dropCurrentOutputBufferSamples(A){const I=Math.floor((this.currentOutputBuffer.length-this.currentBufferReadIndex)/this.channelCount),g=Math.min(I,A);return this.currentBufferReadIndex+=g*this.channelCount,this.currentBufferReadIndex>=this.currentOutputBuffer.length&&(this.currentOutputBuffer=void 0),g}copyDecodedSamplesToAudioBuffer(){const A=this.getOrCreateAudioBuffer();for(let I=0;I<this.audioBufferSize;){this.currentOutputBuffer||(this.currentOutputBuffer=this.outputBuffers.shift(),this.currentBufferReadIndex=0);const g=this.currentOutputBuffer;if(1==this.channelCount){const e=A.getChannelData(0);for(;this.currentBufferReadIndex<g.length&&(e[I]=g[this.currentBufferReadIndex],this.currentBufferReadIndex+=this.channelCount,++I,!(I>=this.audioBufferSize)););}else if(2==this.channelCount){const e=A.getChannelData(0),B=A.getChannelData(1);for(;this.currentBufferReadIndex<g.length&&(e[I]=g[this.currentBufferReadIndex],B[I]=g[this.currentBufferReadIndex+1],this.currentBufferReadIndex+=this.channelCount,++I,!(I>=this.audioBufferSize)););}else{const e=A.getChannelData(0),B=A.getChannelData(1),i=A.getChannelData(2),Q=A.getChannelData(3),C=A.getChannelData(4),t=A.getChannelData(5);for(;this.currentBufferReadIndex<g.length&&(e[I]=g[this.currentBufferReadIndex],B[I]=g[this.currentBufferReadIndex+1],C[I]=g[this.currentBufferReadIndex+2],t[I]=g[this.currentBufferReadIndex+3],i[I]=g[this.currentBufferReadIndex+4],Q[I]=g[this.currentBufferReadIndex+5],this.currentBufferReadIndex+=this.channelCount,++I,!(I>=this.audioBufferSize)););}this.currentBufferReadIndex>=this.currentOutputBuffer.length&&(this.currentOutputBuffer=void 0)}return A}getOrCreateAudioBuffer(){return 0==this.audioBufferPool.length?this.audioContext.createBuffer(this.channelCount,this.audioBufferSize,this.sampleRateHz):this.audioBufferPool.pop()}returnAudioBufferToPool(A,I){this.audioBufferPool.length<this.maxAudioBufferPoolCount&&this.audioBufferPool.push(A)}logPerfTiming(A){const I=Date.now(),g=I-A;this.totalDecodingTimeMs+=g,g>this.maxDecodingTimeMs&&(this.maxDecodingTimeMs=g);const e=this.waitingToDecodeQueue.length+this.decodeQueueSize;this.totalQueuedSize+=e,e>this.maxQueuedSize&&(this.maxQueuedSize=e),1500==this.decodedCount&&(C.RainwayLogging.information("[AudioStream] Avg queue: "+this.totalQueuedSize/this.decodedCount+", Max: "+this.maxQueuedSize+" Avg FPS: "+this.decodedCount/((I-this.startStreamTimeMs)/1e3)+" Avg decode: "+this.totalDecodingTimeMs/this.decodedCount+"ms, Max: "+this.maxDecodingTimeMs+"ms"),this.totalDecodingTimeMs=0,this.maxDecodingTimeMs=0,this.totalQueuedSize=0,this.maxQueuedSize=0,this.decodedCount=0,this.startStreamTimeMs=I)}resampleBufferThenScheduleForPlayback(A){const I=new(window.OfflineAudioContext||window.webkitOfflineAudioContext)(this.channelCount,this.resampledAudioBufferSize,this.audioContext.sampleRate),g=I.createBufferSource();g.buffer=A,g.connect(I.destination),g.start(),I.startRendering(),I.oncomplete=this.scheduleResampledBufferPlayback.bind(this,A)}scheduleResampledBufferPlayback(A,I){this.schedulePlaybackWithOnEnded(I.renderedBuffer),this.returnAudioBufferToPool(A,I)}scheduleBufferForPlayback(A){this.schedulePlaybackWithOnEnded(A,this.returnAudioBufferToPool.bind(this,A))}schedulePlaybackWithOnEnded(A,I=null){const g=this.audioContext.createBufferSource();g.buffer=A,this.nextStartTime||(this.nextStartTime=this.audioContext.currentTime),g.playbackRate.value=1,g.connect(this.volumeNode),g.start(this.nextStartTime),g.onended=I,this.nextStartTime+=A.duration}setVolume(A){this.volumeNode.gain.value=A}}},514:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.makeClientCapabilities=void 0;const e=g(904),B=g(643),i=g(695);I.makeClientCapabilities=function(A){const{filtered:I,preferred:g}=i.filterCodecPack(A),Q={codec:e.AudioCodec.Opus,container:e.AudioContainer.Raw},C="MediaSource"in window?e.VideoContainer.IsoBMFF:e.VideoContainer.Raw,t=!!window.chrome;return{preferredWidth:screen.availWidth,preferredHeight:screen.availHeight,preferredFps:60,preferredAudioBitrate:96e3,preferredVideoBitrate:1e3*B.defaultRateControlParameters.initialBitrateKbps,preferredAudioChannels:e.AudioChannels.Stereo,preferredAudioConfig:Q,preferredVideoConfig:{codec:g,container:C},supportedAudioChannels:[e.AudioChannels.Mono,e.AudioChannels.Stereo],supportedAudioConfigs:[Q],supportedVideoConfigs:I.map((A=>({codec:A,container:C}))),supportsOver1080P:!1,supportsTemporalScaling:!0,supportsAppIsolation:t}}},695:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.filterCodecPack=I.videoCodecMimeType=void 0;const e=g(904);function B(A){const I=A.data;return`video/mp4; codecs="avc1.${(I[5]<<16|I[6]<<8|I[7]).toString(16).padStart(6,"0")}"`}function i(A){if(!("MediaSource"in window))return!1;const I=A.data;if(I.length<8||7!=(31&I[4]))return!1;const g=B(A);return MediaSource.isTypeSupported(g)}function Q(A){const I=A.data;if(I.length<8||7!=(31&I[4]))return e.VideoCodecType.Baseline;const g=I[5];return I[6],116==g||122==g||110==g||100==g?e.VideoCodecType.High:88==g||77==g?e.VideoCodecType.Main:e.VideoCodecType.Baseline}I.videoCodecMimeType=B,I.filterCodecPack=function(A){if(!A||0===A.length)throw new Error("Host supplied an empty CodecPack");let I=A.filter(i);if(0===I.length&&(console.warn("Found no browser-confirmed working codec, falling back to baseline"),I=A.filter((A=>Q(A)<=e.VideoCodecType.Baseline))),0===I.length)throw new Error("Host supplied an unsupported CodecPack");const g=I.reduce(((A,I)=>Q(A)>Q(I)?A:I));return{filtered:I,preferred:g}}},919:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0});const e=g(464);class B{constructor(A,I,g){this.glCtx=void 0,this.program=void 0,this.glCtx=A,this.program=this.glCtx.createProgram(),this.glCtx.attachShader(this.program,I),this.glCtx.attachShader(this.program,g),this.glCtx.linkProgram(this.program),this.glCtx.getProgramParameter(this.program,this.glCtx.LINK_STATUS)||e.RainwayLogging.error("Shader link failed.")}static compile(A,I,g){let B;return B="vertex"===I?A.createShader(A.VERTEX_SHADER):A.createShader(A.FRAGMENT_SHADER),A.shaderSource(B,g),A.compileShader(B),0==A.getShaderParameter(B,A.COMPILE_STATUS)&&e.RainwayLogging.error("Shader compile failed, log: "+A.getShaderInfoLog(B)),B}static create(A,I,g){const e=B.compile(A,"vertex",I),i=B.compile(A,"fragment",g);return new B(A,e,i)}use(){this.glCtx.useProgram(this.program)}getAttributeLocation(A){return this.glCtx.getAttribLocation(this.program,A)}getUniformLocation(A){const I=this.glCtx.getUniformLocation(this.program,A);if(I)return I}setMatrixUniform(A,I){this.glCtx.uniformMatrix4fv(A,!1,I)}}I.default=B},756:function(A,I,g){"use strict";var e=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0}),I.yuvFragShaderSrc=void 0;const B=e(g(919));I.yuvFragShaderSrc="\n    precision lowp float;\n    \n    varying vec2 vTexCoord;\n    \n    uniform sampler2D yTexture;\n    uniform sampler2D uTexture;\n    uniform sampler2D vTexture;\n    const mat3 conversion = mat3(\n        1.164, 0.000,  1.596,\n        1.164, -0.391, -0.813,\n        1.164, 2.018,  0.000\n    );\n\n    const vec3 offset = vec3(0.0625, 0.5, 0.5);\n        \n    void main(void) {\n        float y = texture2D(yTexture, vTexCoord).x;\n        float u = texture2D(uTexture, vTexCoord).x;\n        float v = texture2D(vTexture, vTexCoord).x;\n        vec3 yuv = vec3(y, u, v) - offset;\n\n        vec3 rgb = (yuv * conversion);\n\n        gl_FragColor = vec4(rgb, 1.0);\n    }\n";class i{constructor(A,I,g,e,B,i,Q,C,t){this.glCtx=A,this.program=I,this.projectionMtxLoc=g,this.positionAttr=e,this.texCoordAttr=B,this.vertexBuffer=i,this.yTextureLoc=Q,this.uTextureLoc=C,this.vTextureLoc=t}static create(A){const g=B.default.create(A,"\n    precision mediump float;\n\n    uniform mat4 uProjection;\n    attribute vec2 aPosition;\n    attribute vec2 aTexCoord;\n\n    varying vec2 vTexCoord;\n    void main(){\n        vTexCoord = aTexCoord;\n        gl_Position = uProjection * vec4(aPosition, 0.0, 1.0);\n    }\n",I.yuvFragShaderSrc);g.use();const e=g.getUniformLocation("uProjection"),Q=g.getAttributeLocation("aPosition");A.enableVertexAttribArray(Q);const C=g.getAttributeLocation("aTexCoord");A.enableVertexAttribArray(C);const t=A.createBuffer(),E=g.getUniformLocation("yTexture"),o=g.getUniformLocation("uTexture"),a=g.getUniformLocation("vTexture");return new i(A,g,e,Q,C,t,E,o,a)}bindInputTextures(A,I,g){const e=this.glCtx;e.uniform1i(this.yTextureLoc,0),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,A.textureId),e.uniform1i(this.uTextureLoc,1),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,I.textureId),e.uniform1i(this.vTextureLoc,2),e.activeTexture(e.TEXTURE2),e.bindTexture(e.TEXTURE_2D,g.textureId)}use(){this.program.use()}drop(){this.glCtx.useProgram(0)}update(A,I,g,e){this.glCtx.viewport(0,0,A,I),this.program.setMatrixUniform(this.projectionMtxLoc,[2/A,0,0,0,0,2/-I,0,0,0,0,1,0,-1,1,0,1]),this.glCtx.bindBuffer(this.glCtx.ARRAY_BUFFER,this.vertexBuffer),this.glCtx.bufferData(this.glCtx.ARRAY_BUFFER,new Float32Array([0,0,0,0,A,0,g,0,A,I,g,e,A,I,g,e,0,I,0,e,0,0,0,0]),this.glCtx.DYNAMIC_DRAW),this.glCtx.vertexAttribPointer(this.positionAttr,2,this.glCtx.FLOAT,!1,16,0),this.glCtx.vertexAttribPointer(this.texCoordAttr,2,this.glCtx.FLOAT,!1,16,8)}draw(){const A=this.glCtx;A.clear(A.COLOR_BUFFER_BIT|A.DEPTH_BUFFER_BIT|A.STENCIL_BUFFER_BIT),A.drawArrays(A.TRIANGLE_STRIP,0,6),A.bindTexture(A.TEXTURE_2D,null)}}I.default=i},346:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0});class g{constructor(A,I){this.glCtx=void 0,this.textureId=void 0,this.glCtx=A,this.textureId=I}static create(A){const I=A.createTexture();return A.bindTexture(A.TEXTURE_2D,I),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MAG_FILTER,A.NEAREST),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MIN_FILTER,A.NEAREST),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_S,A.CLAMP_TO_EDGE),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_T,A.CLAMP_TO_EDGE),A.bindTexture(A.TEXTURE_2D,null),new g(A,I)}uploadBuffer(A,I,g){const e=this.glCtx;e.bindTexture(e.TEXTURE_2D,this.textureId),e.texImage2D(e.TEXTURE_2D,0,e.LUMINANCE,I,g,0,e.LUMINANCE,e.UNSIGNED_BYTE,A),e.bindTexture(e.TEXTURE_2D,null)}delete(){null!=this.glCtx&&0!=this.textureId&&(this.glCtx.deleteTexture(this.textureId),this.textureId=0)}}I.default=g},425:function(A,I,g){"use strict";var e,B=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},i=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},Q=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.MediaManager=I.RainwayVideoFormat=I.RainwayVideoDecoder=void 0;const C=g(900),t=g(585),E=g(78),o=g(914),a=g(146),n=g(930),s=g(904),r=g(14);var d,h;!function(A){A[A.MSE=0]="MSE",A[A.Software=1]="Software"}(d=I.RainwayVideoDecoder||(I.RainwayVideoDecoder={})),function(A){A[A.AnnexB=0]="AnnexB",A[A.LengthPrefixed=1]="LengthPrefixed"}(h=I.RainwayVideoFormat||(I.RainwayVideoFormat={})),I.MediaManager=class{constructor(A,I,g,B){var n;if(this.captureMode=A,this.chosenVideoConfig=I,e.set(this,void 0),this.overlayEnabled=!1,this.captureMode===s.CaptureMode.BYOFB)throw new r.RainwayError("BYOFB mode stream consumption is not supported in the Web SDK.");i(this,e,{video:Object.assign(Object.assign({codecString:'video/mp4; codecs="avc1.42c020"'},this.autodetectVideoConfiguration()),g.video),videoPerformance:null!==(n=g.videoPerformance)&&void 0!==n?n:{},audio:Object.assign({},g.audio)}),Q(this,e).video.decoder===d.Software?this.videoStream=new a.VideoStreamSoftwareDecoder(Q(this,e).video.codecString,h.LengthPrefixed):this.videoStream=new C.VideoStreamMSE(Q(this,e).video.codecString),this.audioStream=new t.AudioStream,this.audioStream.configure(Q(this,e).audio),this.videoPerformanceMonitor=new E.VideoPerformanceMonitor(this.videoStream,Q(this,e).videoPerformance),this.videoStatsOverlay=new o.VideoStatsOverlay(this.videoStream,Q(this,e).video.decoder===d.Software,B)}get videoReadyStateChangeEvent(){return this.videoStream.readyStateChangeEvent}get videoNeedsRestartEvent(){return this.videoStream.needsRestartEvent}get audioContext(){return this.audioStream.audioContext}get currentStreamBounds(){return this.streamBounds}get currentFullDesktopBounds(){return this.fullDesktopBounds}initialize(){return B(this,void 0,void 0,(function*(){yield this.audioStream.initialize(),this.audioStream.play()}))}get config(){return Q(this,e)}autodetectVideoConfiguration(){return{decoder:window.MediaSource?d.MSE:d.Software}}setContainer(A){if(this.unsetContainer(),this.container=A,this.captureMode===s.CaptureMode.AppIsolation){const A=this.createIsolationCanvasElement();this.showStreamElement(A),Q(this,e).video.decoder===d.MSE?this.setIsolationSource(this.createVideoElement()):this.setIsolationSource(this.createCanvasElement())}else Q(this,e).video.decoder===d.MSE?this.showStreamElement(this.createVideoElement()):this.showStreamElement(this.createCanvasElement());this.overlayEnabled&&this.createAndShowStatsOverlay()}setIsolationSource(A){this.isolationSource=A}createAndShowStatsOverlay(){const A=this.createOverlayCanvasElement();this.showOverlayElement(A),Q(this,e).video.decoder===d.MSE?this.videoStatsOverlay.setElements({video:this.videoElement,canvas:A,usingOutputCanvas:!1}):this.videoStatsOverlay.setElements({canvas:A,usingOutputCanvas:!1})}unsetContainer(){var A,I,g,e,B,i,Q,C;this.disposeVideoElement(),this.disposeCanvasElement(),this.disposeOverlayCanvasElement(),this.disposeIsolationCanvasElement(),null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-video"))||void 0===I||I.remove(),null===(e=null===(g=this.container)||void 0===g?void 0:g.querySelector(".rainway-canvas"))||void 0===e||e.remove(),null===(i=null===(B=this.container)||void 0===B?void 0:B.querySelector(".rainway-overlay-canvas"))||void 0===i||i.remove(),null===(C=null===(Q=this.container)||void 0===Q?void 0:Q.querySelector(".rainway-isolation-canvas"))||void 0===C||C.remove(),this.container=void 0}showOverlayElement(A){Object.assign(A.style,{position:"absolute",top:"0",bottom:"0",left:"0",right:"0",width:"100%",height:"100%",pointerEvents:"none"})}createVideoElement(){var A,I;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-video"))||void 0===I||I.remove(),this.videoElement=document.createElement("video");const g=this.videoElement;return g.className="rainway-video",g.autoplay=!0,g.muted=!0,g.style.display="none",this.container.appendChild(g),this.videoStream.attachToElement(g),this.videoElement}disposeVideoElement(){this.videoElement&&(this.videoStream.detachFromElement(),this.videoElement.remove(),this.videoElement=void 0)}createOverlayCanvasElement(){var A,I,g;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-overlay-canvas"))||void 0===I||I.remove(),this.canvasElement=document.createElement("canvas");const e=this.canvasElement;return e.className="rainway-overlay-canvas",this.container.appendChild(e),null===(g=e.getContext("2d"))||void 0===g||g.clearRect(0,0,e.width,e.height),e}disposeOverlayCanvasElement(){var A,I;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-overlay-canvas"))||void 0===I||I.remove(),this.overlayCanvasElement&&(this.overlayCanvasElement.remove(),this.overlayCanvasElement=void 0)}createCanvasElement(){var A,I,g;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-canvas"))||void 0===I||I.remove(),this.canvasElement=document.createElement("canvas");const e=this.canvasElement;return e.className="rainway-canvas",e.style.display="none",this.container.appendChild(e),this.videoStream instanceof a.VideoStreamSoftwareDecoder&&this.videoStream.attachToCanvas(e),null===(g=e.getContext("2d"))||void 0===g||g.clearRect(0,0,e.width,e.height),e}disposeCanvasElement(){this.canvasElement&&(this.videoStream instanceof a.VideoStreamSoftwareDecoder&&this.videoStream.detachFromCanvas(),this.canvasElement.remove(),this.canvasElement=void 0)}createIsolationCanvasElement(){var A,I,g;null===(I=null===(A=this.container)||void 0===A?void 0:A.querySelector(".rainway-isolation-canvas"))||void 0===I||I.remove(),this.isolationCanvasElement=document.createElement("canvas");const e=this.isolationCanvasElement;return e.className="rainway-isolation-canvas",this.container.appendChild(e),null===(g=e.getContext("2d"))||void 0===g||g.clearRect(0,0,e.width,e.height),e}disposeIsolationCanvasElement(){this.isolationCanvasElement&&(this.isolationCanvasElement.remove(),this.isolationCanvasElement=void 0)}hideStreamElement(A){A.style.width="0",A.style.height="0"}showStreamElement(A){this.container&&(this.streamElement=A,A.style.width="100%",A.style.height="100%",A.style.display="block",A.style.objectFit="contain")}pause(){this.videoStream.pause(),this.audioStream.stop()}play(){this.videoStream.play(),this.audioStream.play()}renderVideoFrame(A,I){this.videoStream.pushData(A,I),this.fullDesktopBounds={left:A.x,top:A.y,width:A.width,height:A.height},this.captureMode===s.CaptureMode.AppIsolation?(A.mask.length>0&&(this.mask=A.mask),A.width>0&&(this.frameWidth=A.width),A.height>0&&(this.frameHeight=A.height),this.renderIsolatedApp()):this.streamBounds=this.fullDesktopBounds}renderIsolatedApp(){if(!this.mask)return;if(!this.frameWidth)return;if(!this.frameHeight)return;const A=this.isolationSource;if(!A)return;const I=this.isolationCanvasElement;if(!I)return;const g=I.getContext("2d");if(!g)return;const e=n.boundingRectangle(this.mask);this.streamBounds=e;const B=this.chosenVideoConfig.codec.width/this.frameWidth,i=this.chosenVideoConfig.codec.height/this.frameHeight;I.width=e.width*B,I.height=e.height*i;for(const{left:I,top:Q,width:C,height:t}of this.mask){const E=I*B,o=Q*i,a=C*B,n=t*i,s=(I-e.left)*B,r=(Q-e.top)*i;g.drawImage(A,E,o,a,n,s,r,a,n)}}processAudio(A){this.audioStream.pushData(A)}getVideoStats(){return this.videoStream.getStats()}configureAudio(A){return B(this,void 0,void 0,(function*(){Q(this,e).audio=Object.assign(Object.assign({},Q(this,e).audio),A),this.audioStream.configure(A)}))}enableStatsOverlay(){this.overlayEnabled=!0,this.videoStatsOverlay.enable(),this.disposeOverlayCanvasElement(),this.createAndShowStatsOverlay()}disableStatsOverlay(){this.disposeOverlayCanvasElement(),this.overlayEnabled=!1,this.videoStatsOverlay.disable()}dispose(){this.pause(),this.unsetContainer(),this.audioStream.dispose(),this.videoStream.dispose()}setVolume(A){this.audioStream.setVolume(A)}},e=new WeakMap},633:function(A,I){"use strict";var g,e=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},B=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)},i=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g};Object.defineProperty(I,"__esModule",{value:!0}),I.CircularBuffer=I.average=I.createSourceBuffer=I.awaitMediaSourceOpen=I.createMediaSource=I.MediaUnsupportedError=void 0;class Q extends Error{}function C(A,I){return e(this,void 0,void 0,(function*(){return new Promise(((g,e)=>{let B=!1;const i=()=>{A.removeEventListener("sourceopen",Q),null==I||I.removeHandler(E),window.clearInterval(t),B=!0},Q=()=>{i(),g(!0)},C=()=>{B||"open"===A.readyState&&(i(),g(!0))},t=window.setInterval(C,500);C(),window.setTimeout((()=>{B||(i(),e(new Error("MediaSource open timed out.")))}),1e4),A.addEventListener("sourceopen",Q);const E=()=>{i(),g(!1)};null==I||I.addHandler(E)}))}))}I.MediaUnsupportedError=Q,I.createMediaSource=function(A,I){return e(this,void 0,void 0,(function*(){if(!window.MediaSource)throw new Q("Browser does not support MSE.");const g=new MediaSource,e=window.URL.createObjectURL(g);if(A.src=void 0,A.src=e,A.load(),yield C(g,I))return g.duration=Number.POSITIVE_INFINITY,g}))},I.awaitMediaSourceOpen=C,I.createSourceBuffer=function(A,I){const g=A.addSourceBuffer(I);return g.mode="sequence",g},I.average=function(A){return 0===A.length?0:A.reduce(((A,I)=>A+I),0)/A.length},I.CircularBuffer=class{constructor(A){this.maxLength=A,this.nextIndex=0,this.list=Array(this.maxLength),g.set(this,0)}get length(){return B(this,g)}push(A){this.list[this.nextIndex++]=A,i(this,g,Math.max(B(this,g),this.nextIndex)),this.nextIndex%=this.maxLength}values(){return this.list.slice(0,B(this,g))}},g=new WeakMap},78:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.VideoPerformanceMonitor=void 0;const e=g(198),B=g(434),i=g(24),Q={targetFramerate:60,bufferLimitMs:500,cpuStarvationThreshold:1,decoderStrugglingThreshold:1,checkInterval:1500,windowMs:500};I.VideoPerformanceMonitor=class{constructor(A,I={}){this.videoStream=A,this.decoderStrugglingEvent=new i.Action,this.cpuStarvationEvent=new i.Action,this.cpuStarvationCounter=0,this.decoderStrugglingCounter=0,this.readyStateChangeHandler=A=>{A===B.VideoReadyState.Detached?this.stopChecking():this.lastVideoReadyState===B.VideoReadyState.Detached&&this.startChecking(),this.lastVideoReadyState=A},this.videoFrameMetadataHandler=A=>{this.processingDurationTrack.feed(A)},this.checkPerformance=()=>{if(this.videoStream.readyState===B.VideoReadyState.Playing){const A=1/this.config.targetFramerate,I=1e3*A,g=Math.floor(this.config.bufferLimitMs/I),e=this.videoStream.getStats();(e.endOfBuffered>e.currentTime+this.config.bufferLimitMs/1e3||this.videoStream.dataQueueLength>g)&&this.videoStream.restart("checkPerformance"),this.videoStream.dataQueueLength>g?this.cpuStarvationCounter+=1:this.cpuStarvationCounter=Math.max(0,this.cpuStarvationCounter-1),this.processingDurationTrack.average()>A?(this.decoderStrugglingCounter+=1,this.cpuStarvationCounter=Math.max(0,this.cpuStarvationCounter-1)):this.decoderStrugglingCounter=Math.max(0,this.decoderStrugglingCounter-1),this.cpuStarvationCounter,this.config.cpuStarvationThreshold,this.decoderStrugglingCounter,this.config.decoderStrugglingThreshold}},this.config=Object.assign(Object.assign({},Q),I),this.processingDurationTrack=new e.WindowTrack(this.config.windowMs,e.meanOrZero),this.videoStream.readyStateChangeEvent.addHandler(this.readyStateChangeHandler),this.videoStream.videoFrameProcessingDurationEvent.addHandler(this.videoFrameMetadataHandler),this.lastVideoReadyState=this.videoStream.readyState,this.videoStream.readyState!==B.VideoReadyState.Detached&&this.startChecking()}dispose(){this.stopChecking(),this.videoStream.readyStateChangeEvent.removeHandler(this.readyStateChangeHandler),this.videoStream.videoFrameProcessingDurationEvent.removeHandler(this.videoFrameMetadataHandler)}startChecking(){this.processingDurationTrack=new e.WindowTrack(this.config.windowMs,e.meanOrZero),this.checkPerformanceInterval=window.setInterval(this.checkPerformance,this.config.checkInterval)}stopChecking(){this.checkPerformanceInterval&&(window.clearInterval(this.checkPerformanceInterval),this.checkPerformanceInterval=void 0)}}},914:function(A,I,g){"use strict";var e=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStatsOverlay=void 0;const B=g(146),i=g(434),Q=g(198),C=5e3,t={droppedFrames:"Dropped frames",totalFrames:"Total frames",currentTime:"Current video time",endOfBuffered:"End of video buffer",endOfSeekable:"End of video seekable",dataInterval:"Video data interval",dataSize:"Video frame size",processingDuration:"Frame processing duration"};I.VideoStatsOverlay=class{constructor(A,I,g){this.videoStream=A,this.usingOutputCanvas=I,this.getStats=g,this.compositingTimeTrack=new Q.WindowTrack(C,Q.mean),this.processingDurationTrack=new Q.WindowTrack(C,Q.mean),this.frameTrack=new Q.WindowTrack(C,Q.mean),this.drawIntervalTrack=new Q.WindowTrack(C,Q.mean),this.displayTimeIntervalTrack=new Q.WindowTrack(C,Q.mean),this.frameCounter=0,this.throughput=[],this.fetchStats=()=>e(this,void 0,void 0,(function*(){this.videoStream.readyState===i.VideoReadyState.Playing&&(this.stats=this.videoStream.getStats(),this.lastTransportStats=this.transportStats,this.transportStats=yield this.getStats(),this.throughput=this.getThroughput())})),this.animationFrameHandler=()=>{this.frameTrack.feed(this.frameCounter),this.frameCounter=0,this.animationFrameHandle=window.requestAnimationFrame(this.animationFrameHandler)},this.drawStatsOnlyOnAnimationFrame=()=>{if(this.drawStatsOnlyHandle=window.requestAnimationFrame(this.drawStatsOnlyOnAnimationFrame),!this.canvasContext||this.videoStream.readyState!==i.VideoReadyState.Playing)return;const A=this.canvasContext;this.usingOutputCanvas||(A.canvas.width!==A.canvas.clientWidth&&(A.canvas.width=A.canvas.clientWidth),A.canvas.height!==A.canvas.clientHeight&&(A.canvas.height=A.canvas.clientHeight),A.clearRect(0,0,A.canvas.width,A.canvas.height)),this.drawStats()},this.drawStatsAndGraphsOnVideoFrame=([A,I])=>{if(this.frameCounter++,!this.canvasContext||this.videoStream.readyState!==i.VideoReadyState.Playing||!I)return;const g=this.canvasContext;this.usingOutputCanvas||(g.canvas.width!==g.canvas.clientWidth&&(g.canvas.width=g.canvas.clientWidth),g.canvas.height!==g.canvas.clientHeight&&(g.canvas.height=g.canvas.clientHeight),g.clearRect(0,0,g.canvas.width,g.canvas.height));const e=performance.now();this.lastCanvasDrawTime&&this.drawIntervalTrack.feed(e-this.lastCanvasDrawTime),this.lastCanvasDrawTime=e;const B=I.expectedDisplayTime;this.lastDisplayTime&&this.displayTimeIntervalTrack.feed(B-this.lastDisplayTime),this.lastDisplayTime=B,this.compositingTimeTrack.feed(I.expectedDisplayTime-A),this.processingDurationTrack.feed(I.processingDuration);const Q=g.canvas;Q.width,Q.clientWidth,Q.height,Q.clientHeight,this.drawStats(I)}}setElements({video:A,canvas:I,usingOutputCanvas:g=!1}){this.usingOutputCanvas=g,this.canvas=I,this.video=A,this.canvas&&(this.canvasContext=this.canvas.getContext("2d",{alpha:!this.usingOutputCanvas}))}enable(){this.animationFrameHandle&&window.cancelAnimationFrame(this.animationFrameHandle),this.drawStatsOnlyHandle&&window.cancelAnimationFrame(this.drawStatsOnlyHandle),this.videoStream instanceof B.VideoStreamSoftwareDecoder||"requestVideoFrameCallback"in HTMLVideoElement.prototype?(this.animationFrameHandle=window.requestAnimationFrame(this.animationFrameHandler),this.videoStream.videoFrameEvent.addHandler(this.drawStatsAndGraphsOnVideoFrame)):this.drawStatsOnlyHandle=window.requestAnimationFrame(this.drawStatsOnlyOnAnimationFrame),this.statsInterval=window.setInterval(this.fetchStats,1e3)}disable(){this.animationFrameHandle&&window.cancelAnimationFrame(this.animationFrameHandle),this.drawStatsOnlyHandle&&window.cancelAnimationFrame(this.drawStatsOnlyHandle),this.videoStream.videoFrameEvent.removeHandler(this.drawStatsAndGraphsOnVideoFrame),window.clearInterval(this.statsInterval)}getThroughput(){var A;return this.transportStats&&this.lastTransportStats?Object.entries(null===(A=this.transportStats)||void 0===A?void 0:A.channels).map((([A,I])=>this.lastTransportStats?[A,I.bytesSent-this.lastTransportStats.channels[A].bytesSent,I.bytesReceived-this.lastTransportStats.channels[A].bytesReceived]:[A,0,0])):[]}drawStats(A){var I,g;if(!this.canvasContext||this.videoStream.readyState!==i.VideoReadyState.Playing)return;const e=this.canvasContext,B=e.canvas,Q=B.width/B.clientWidth,C=B.height/B.clientHeight,E=this.throughput;if(this.stats){const i=Object.entries(this.stats),o=i.length+E.length,a=e.measureText("M").width;e.fillStyle="rgba(0, 0, 0, 0.5)";const n=(o+2)*a+2*(a+2*C)+15*C;e.fillRect(10*Q,B.height-(n+10*C),300*Q,n),e.fillStyle="white",e.font=`${(12*Q).toFixed(0)}px sans-serif`,e.textBaseline="top";let s=0;const r=B.height-(n+15*C)+15*Q;A?e.fillText(`Resolution: ${A.width}x${A.height}`,15*Q,r):e.fillText(`Resolution: ${null===(I=this.video)||void 0===I?void 0:I.videoWidth}x${null===(g=this.video)||void 0===g?void 0:g.videoHeight}`,15*Q,r),e.fillText(`Element size: ${B.clientWidth}x${B.clientHeight}`,15*Q,r+a);for(const[A,I]of i){let g,B="";"processingDuration"===A?(B="ms",g=1e3*I):g=I,"endOfBuffered"===A||"endOfSeekable"===A||"currentTime"===A?B="s":"dataInterval"===A?B="ms":"dataSize"===A&&(B="bytes"),e.fillText(`${t[A]}: ${g.toFixed(2)} ${B}`,15*Q,s*(a+2*C)+2*(a+2*C)+r),s++}for(const[A,I,g]of E)e.fillText(`${A} throughput - up: ${(I/1e3).toFixed(0)} kb/s, down: ${(g/1e3).toFixed(0)} kb/s`,15*Q,s*(a+2*C)+2*(a+2*C)+r),s++}}}},441:(A,I,g)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStats=void 0;const e=g(994),B=g(633);I.VideoStats=class{constructor(){this.processingDurations=new Map,this.dataIntervals=new B.CircularBuffer(60),this.dataSizes=new B.CircularBuffer(60),this.totalFrames=0,this.presentedFrames=0}pushFrameMetadata(A){this.presentedFrames+=1;const{processingDuration:I}=A,g=(new Date).getTime();this.processingDurations.set(g,I);for(const[A]of this.processingDurations.entries())A<g-1e3&&this.processingDurations.delete(A)}reportFrameSubmitted(){this.totalFrames+=1}resetFrameCounts(){this.totalFrames=0,this.presentedFrames=0}pushData(A){this.dataSizes.push(A.byteLength);const I=(new Date).getTime();this.lastDataTimestamp&&this.dataIntervals.push(I-this.lastDataTimestamp),this.lastDataTimestamp=I}setElement(A){this.element=A}getReport(){if(!this.element)throw new e.RainwayError("getReport() has no video element");const A=B.average(Array.from(this.processingDurations.values())),I=this.element.buffered,g=I.length>0?I.end(I.length-1):0,i=this.element.seekable,Q=i.length>0?i.end(i.length-1):0;return{processingDuration:A,droppedFrames:this.totalFrames-this.presentedFrames,totalFrames:this.totalFrames,dataInterval:B.average(this.dataIntervals.values()),dataSize:B.average(this.dataSizes.values()),currentTime:this.element.currentTime,endOfBuffered:g,endOfSeekable:Q}}createReport(A,I){return{processingDuration:B.average(Array.from(this.processingDurations.values())),droppedFrames:null!=A?A:0,totalFrames:null!=I?I:0,dataInterval:B.average(this.dataIntervals.values()),dataSize:B.average(this.dataSizes.values()),currentTime:0,endOfBuffered:0,endOfSeekable:0}}}},900:function(A,I,g){"use strict";var e=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStreamMSE=void 0;const B=g(24),i=g(633),Q=g(434),C=g(464),t=g(441);function E(A){return 102===A[4]&&116===A[5]&&121===A[6]&&112===A[7]}I.VideoStreamMSE=class{constructor(A){this.codecString=A,this.readyState=Q.VideoReadyState.Detached,this.needsRestartEvent=new B.Action,this.sourceOpenEvent=new B.Action,this.readyStateChangeEvent=new B.Action,this.videoFrameEvent=new B.Action,this.videoFrameProcessingDurationEvent=new B.Action,this.cancelInitializeEvent=new B.Action,this.dataQueue=[],this.stats=new t.VideoStats,this.justClearedBuffer=!1,this.lastBufferEnd=0,this.framesFrozenFor=0,this.ensureBuffer=()=>{if(this.readyState!==Q.VideoReadyState.Paused&&this.readyState!==Q.VideoReadyState.Detached&&this.element&&0===this.element.buffered.length){if(this.sourceBuffer&&!this.sourceBuffer.updating&&this.sourceBuffer.timestampOffset<=0){const A=this.sourceBuffer.timestampOffset.toFixed(2);this.sourceBuffer.timestampOffset=1;const I=this.sourceBuffer.timestampOffset.toFixed(2);this.warn(`Poked timestampOffset from ${A} to ${I}`)}this.restart("ensureBuffer")}},this.videoFrameHandler=(A,I)=>{(null==I?void 0:I.processingDuration)&&this.videoFrameProcessingDurationEvent.invoke(I.processingDuration),I&&this.stats.pushFrameMetadata(I),this.videoFrameEvent.invoke([A,I]),this.requestNextFrameCallback()},this.fallbackVideoFrameHandler=A=>{this.videoFrameHandler(A,void 0)},this.sourceBufferUpdateHandler=()=>{this.submitData()},window.__rainwayVideo=this}info(A){C.RainwayLogging.information(`[VideoStream] ${String(A)}`)}debug(A){C.RainwayLogging.debug(`[VideoStream] ${String(A)}`)}warn(A){C.RainwayLogging.warning(`[VideoStream] ${String(A)}`)}get dataQueueLength(){return this.dataQueue.length}attachToElement(A){this.info("Attaching to element: "+A),this.cancelInitializeEvent.invoke(),this.element=A,this.stats.setElement(this.element),this.stats.resetFrameCounts(),this.restart("attachToElement"),this.info("Attached to element.")}detachFromElement(){this.destroyMedia(),this.element=void 0,this.setReadyState(Q.VideoReadyState.Detached),this.info("Detached from element.")}pause(){this.setReadyState(Q.VideoReadyState.Paused)}play(){this.readyState===Q.VideoReadyState.Paused&&this.restart("play")}pushData(A,I){if(this.dataQueue.length>8)return void this.restart("pushData.dataQueue too long");const g=new Uint8Array(I);this.stats.pushData(g),this.readyState!==Q.VideoReadyState.Paused&&(E(g)&&this.readyState===Q.VideoReadyState.WaitingForKeyframe&&this.element&&(this.debug(`Got requested keyframe (${g.length} bytes)`),this.getStats(),this.dataQueue.push(g),this.submitData(),this.initializeMedia()),this.readyState!==Q.VideoReadyState.WaitingForKeyframe&&this.element?(this.dataQueue.push(g),this.submitData()):this.startEnsuringBuffer())}getStats(){return this.stats.getReport()}setReadyState(A){this.info(`ReadyState changed: ${Q.VideoReadyState[this.readyState]} => ${Q.VideoReadyState[A]}`),this.readyState=A,this.readyStateChangeEvent.invoke(A)}submitData(){if(0!==this.dataQueue.length)if(void 0!==this.mediaSource)if(this.sourceBuffer){if(!this.sourceBuffer.updating)if(this.element){if(this.sourceBuffer.buffered.length>=1){const A=this.sourceBuffer.buffered.end(this.sourceBuffer.buffered.length-1);this.justClearedBuffer&&(this.element.currentTime=A,this.justClearedBuffer=!1),A===this.lastBufferEnd?(this.framesFrozenFor++,this.debug(`Frozen for ${this.framesFrozenFor} frames...`)):this.framesFrozenFor=0,this.lastBufferEnd=A}if(this.framesFrozenFor>=4)return this.restart("sourceBuffer FrozenFrames"),void(this.framesFrozenFor=0);try{const A=this.dataQueue[0];if(E(A)&&!this.justClearedBuffer)return this.debug("Got keyframe. Clearing sourcebuffer."),this.getStats(),this.sourceBuffer.remove(0,1/0),void(this.justClearedBuffer=!0);this.dataQueue.shift(),this.sourceBuffer.appendBuffer(A),this.stats.reportFrameSubmitted()}catch(A){C.RainwayLogging.error(String(A)),this.restart("submitData, sourceBuffer.appendBuffer error.")}}else this.debug("Idling because !element")}else this.debug("Idling because !sourceBuffer");else this.debug("Idling because mediaSource === undefined")}initializeMedia(){var A,I;return e(this,void 0,void 0,(function*(){if(this.setReadyState(Q.VideoReadyState.Initializing),this.cancelInitializeEvent.invoke(),void 0!==this.mediaSource)return this.setReadyState(Q.VideoReadyState.Playing),void(null===(A=this.element)||void 0===A||A.play());if(!this.element)throw new Error("Stream not attached to element.");try{const A=yield i.createMediaSource(this.element,this.cancelInitializeEvent);if(!A)return void this.setReadyState(Q.VideoReadyState.WaitingForKeyframe);this.mediaSource=A,this.sourceBuffer=i.createSourceBuffer(this.mediaSource,this.codecString),this.sourceBuffer.addEventListener("updateend",this.sourceBufferUpdateHandler),this.sourceBuffer.addEventListener("error",(A=>console.error("sourceBuffer error:",A))),this.startEnsuringBuffer(),this.setReadyState(Q.VideoReadyState.Playing),this.requestNextFrameCallback(),this.submitData(),null===(I=this.element)||void 0===I||I.play()}catch(A){this.setReadyState(Q.VideoReadyState.WaitingForKeyframe)}}))}startEnsuringBuffer(){void 0===this.ensureBufferInterval&&(this.debug("Starting ensureBuffer loop"),this.ensureBufferInterval=window.setInterval(this.ensureBuffer,1e3))}destroyMedia(){var A,I;if(this.debug("destroyMedia() called"),void 0!==this.mediaSource){if(this.cancelFrameCallback(),null===(A=this.element)||void 0===A||A.pause(),null===(I=this.sourceBuffer)||void 0===I||I.removeEventListener("updateend",this.sourceBufferUpdateHandler),this.mediaSource){if(this.sourceBuffer){try{this.mediaSource.removeSourceBuffer(this.sourceBuffer)}catch(A){}this.sourceBuffer=void 0}if("open"===this.mediaSource.readyState)try{this.mediaSource.endOfStream()}catch(A){}this.mediaSource=void 0,this.element&&window.URL.revokeObjectURL(this.element.src)}window.clearInterval(this.ensureBufferInterval),this.ensureBufferInterval=void 0,this.setReadyState(Q.VideoReadyState.WaitingForKeyframe)}}restart(A=""){const I=A?`Restarting Video Stream... Reason: '${A}'.`:"Restarting Video Stream.";this.warn(I),this.dataQueue=[],this.setReadyState(Q.VideoReadyState.WaitingForKeyframe),this.needsRestartEvent.invoke()}requestNextFrameCallback(){var A,I,g,e;"requestVideoFrameCallback"in HTMLVideoElement.prototype?(this.frameHandle&&(null===(I=null===(A=this.element)||void 0===A?void 0:A.cancelVideoFrameCallback)||void 0===I||I.call(A,this.frameHandle),this.frameHandle=void 0),this.frameHandle=null===(e=null===(g=this.element)||void 0===g?void 0:g.requestVideoFrameCallback)||void 0===e?void 0:e.call(g,this.videoFrameHandler)):(this.frameHandle&&(window.cancelAnimationFrame(this.frameHandle),this.frameHandle=void 0),this.frameHandle=window.requestAnimationFrame(this.fallbackVideoFrameHandler))}cancelFrameCallback(){var A,I;"requestVideoFrameCallback"in HTMLVideoElement.prototype?this.frameHandle&&(null===(I=null===(A=this.element)||void 0===A?void 0:A.cancelVideoFrameCallback)||void 0===I||I.call(A,this.frameHandle),this.frameHandle=void 0):this.frameHandle&&(window.cancelAnimationFrame(this.frameHandle),this.frameHandle=void 0)}dispose(){this.cancelFrameCallback(),this.destroyMedia(),window.clearInterval(this.ensureBufferInterval),this.setReadyState(Q.VideoReadyState.Disposed)}}},146:function(A,I,g){"use strict";var e=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0}),I.VideoStreamSoftwareDecoder=void 0;const B=g(434),i=g(24),Q=g(425),C=e(g(859)),t=e(g(756)),E=e(g(346)),o=g(464),a=g(441);I.VideoStreamSoftwareDecoder=class{constructor(A,I){this.codecString=A,this.format=I,this.readyState=B.VideoReadyState.Detached,this.needsRestartEvent=new i.Action,this.readyStateChangeEvent=new i.Action,this.videoFrameProcessingDurationEvent=new i.Action,this.videoFrameEvent=new i.Action,this.currentFrameInfo={containsSPS:!1,containsPPS:!1,containsFrameData:!0},this.paused=!1,this.stats=new a.VideoStats,this.totalFrames=0,this.waitingToDecodeQueue=[],this.decodeQueue=[],this.maxDecodeQueueSize=3,this.maxLatencyFrameCount=7,this.maxConsecutiveFramesDrops=3,this.framesDroppedSinceLastRender=0,this.totalFramesDropped=0,this.canvas=void 0,this.shader=void 0,this.yTexture=void 0,this.uTexture=void 0,this.vTexture=void 0,this.onDecode=({width:A,height:I,data:g})=>{if(0==this.decodeQueue.length)return o.RainwayLogging.error("[VideoStreamSoftwareDecoder] onDecode called with empty decoder queue!"),void this.sendDecoderWaitingToDecodeFrames();++this.totalFrames;const e=this.decodeQueue.shift();if(!this.paused){const B=Date.now();if(e.processingDuration=(B-e.mediaTime)/1e3,this.videoFrameProcessingDurationEvent.invoke(e.processingDuration),this.dataQueueLength>this.maxLatencyFrameCount&&this.framesDroppedSinceLastRender<this.maxConsecutiveFramesDrops)++this.framesDroppedSinceLastRender,++this.totalFramesDropped;else{this.framesDroppedSinceLastRender=0;const B=e.width,i=e.height;e.width=A,e.height=I,this.stats.pushFrameMetadata(e),this.renderFrame(B,i,g,A,I),this.videoFrameEvent.invoke([performance.now(),e])}}this.sendDecoderWaitingToDecodeFrames()},this.ensureBuffer=()=>{this.readyState===B.VideoReadyState.WaitingForKeyframe&&0===this.dataQueueLength&&(o.RainwayLogging.debug("Sending another request for a keyframe."),this.restart())},this.videoFormat=I,this.decoderWorker=new C.default,this.decoderWorker.initialize(),this.decoderWorker.onDecode=this.onDecode.bind(this),this.ensureBufferInterval=window.setInterval(this.ensureBuffer,1e3)}get dataQueueLength(){return this.waitingToDecodeQueue.length+this.decodeQueue.length}configure(A,I,g){this.maxDecodeQueueSize=A,this.maxLatencyFrameCount=I,this.maxConsecutiveFramesDrops=g}attachToElement(A){this.stats.resetFrameCounts(),this.readyState!=B.VideoReadyState.WaitingForKeyframe&&this.restart()}attachToCanvas(A){this.readyState!=B.VideoReadyState.WaitingForKeyframe&&this.restart(),this.canvas&&this.detachFromCanvas(),this.canvas=A;const I=A.getContext("webgl");this.shader=t.default.create(I),this.yTexture=E.default.create(I),this.uTexture=E.default.create(I),this.vTexture=E.default.create(I)}detachFromElement(){this.setReadyState(B.VideoReadyState.Detached)}detachFromCanvas(){this.decoderWorker.release(),this.yTexture&&this.yTexture.delete(),this.uTexture&&this.uTexture.delete(),this.vTexture&&this.vTexture.delete(),this.canvas=void 0}pause(){this.paused=!0,this.setReadyState(B.VideoReadyState.Paused)}play(){this.paused&&(this.paused=!1,this.restart())}restart(){this.totalFrames=0,this.totalFramesDropped=0,this.framesDroppedSinceLastRender=0,this.waitingToDecodeQueue=[],this.setReadyState(B.VideoReadyState.WaitingForKeyframe),this.needsRestartEvent.invoke()}pushData(A,I){var g,e,i;if(this.stats.pushData(I),this.paused)return;const C=new Uint8Array(I);let t=!1;if(this.videoFormat==Q.RainwayVideoFormat.LengthPrefixed?t=this.convertToAnnexbFormat(C):this.readyState==B.VideoReadyState.WaitingForKeyframe&&(t=this.parseAnnexbFrameInfo(C)),this.readyState==B.VideoReadyState.WaitingForKeyframe)if(t)this.setReadyState(B.VideoReadyState.Playing);else if(!(null===(g=this.currentFrameInfo)||void 0===g?void 0:g.containsFrameData))return((null===(e=this.currentFrameInfo)||void 0===e?void 0:e.containsSPS)||(null===(i=this.currentFrameInfo)||void 0===i?void 0:i.containsPPS))&&this.decoderWorker.decode(C),this.currentFrameInfo.containsSPS=!1,this.currentFrameInfo.containsPPS=!1,void(this.currentFrameInfo.containsFrameData=!0);if(this.readyState!=B.VideoReadyState.WaitingForKeyframe&&this.currentFrameInfo.containsFrameData){const I={width:A.width,height:A.height,mediaTime:Date.now(),processingDuration:0,expectedDisplayTime:0,presentationTime:0,presentedFrames:0};this.decode(I,C)}}convertToAnnexbFormat(A){let I=!1;this.currentFrameInfo.containsFrameData=!1;for(let g=0;g<A.length;){const e=this.ntohl(A,g);A[g]=0,A[++g]=0,A[++g]=0,A[++g]=1,++g;const B=31&A[g];B<=5&&B>=1?(I=5==B,this.currentFrameInfo.containsFrameData=!0):7==B?this.currentFrameInfo.containsSPS=!0:8==B&&(this.currentFrameInfo.containsPPS=!0),g+=e}return I}ntohl(A,I){return(255&A[I])<<24|(255&A[I+1])<<16|(255&A[I+2])<<8|255&A[I+3]}parseAnnexbFrameInfo(A){let I=!1;this.currentFrameInfo.containsFrameData=!1;for(let g=0;g<A.length;)if(0==A[g]&&0==A[g+1]){let e=0;if(1==A[g+2]?(g+=3,e=31&A[g]):0==A[g+2]&&1==A[g+3]?(g+=4,e=31&A[g]):++g,e<=5&&e>=1){if(this.currentFrameInfo.containsFrameData=!0,5==e){I=!0;break}}else 7==e?this.currentFrameInfo.containsSPS=!0:8==e&&(this.currentFrameInfo.containsPPS=!0)}else++g;return I}decode(A,I){0==this.decodeQueue.length?(0!=this.waitingToDecodeQueue.length&&(o.RainwayLogging.error("[VideoStreamSoftwareDecoder] empty decoder queue, but waiting to decode queue not empty!"),this.waitingToDecodeQueue=[]),this.sendToDecoder(A,I)):(this.waitingToDecodeQueue.push({metadata:A,data:I}),this.decodeQueue.length<this.maxDecodeQueueSize&&this.sendDecoderWaitingToDecodeFrames())}sendDecoderWaitingToDecodeFrames(){for(;this.decodeQueue.length<this.maxDecodeQueueSize&&this.waitingToDecodeQueue.length>0;){const A=this.waitingToDecodeQueue.shift();this.sendToDecoder(A.metadata,A.data)}}sendToDecoder(A,I){this.stats.reportFrameSubmitted(),this.decodeQueue.push(A),this.decoderWorker.decode(I)}renderFrame(A,I,g,e,B){this.canvas.width=A,this.canvas.height=I;const i=new Uint8Array(g),Q=e*B,C=i.subarray(0,Q),t=Q>>2,E=i.subarray(Q,Q+t),o=i.subarray(Q+t,Q+2*t);this.yTexture.uploadBuffer(C,e,B);const a=e>>1,n=B>>1;this.uTexture.uploadBuffer(E,a,n),this.vTexture.uploadBuffer(o,a,n),this.shader.bindInputTextures(this.yTexture,this.uTexture,this.vTexture);const s=A/e,r=I/B;this.shader.update(e,B,s,r),this.shader.draw()}getStats(){return this.stats.createReport(this.totalFramesDropped,this.totalFrames)}setReadyState(A){this.readyState=A,this.readyStateChangeEvent.invoke(A)}dispose(){o.RainwayLogging.debug("Disposing VideoStreamSoftwareDecoder"),this.readyState=B.VideoReadyState.Disposed,this.decoderWorker.release(),this.decoderWorker.dispose(),window.clearInterval(this.ensureBufferInterval)}}},104:function(A,I,g){"use strict";var e,B=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},i=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)},Q=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g};Object.defineProperty(I,"__esModule",{value:!0}),I.Gateway=I.getHandshakeDataBase64=I.getPeerId=I.GatewayStatus=void 0;const C=g(290),t=g(994),E=g(464),o=g(904),a=g(24);var n;function s(A,I,g){const e=o.GatewayIdentity.encode({id:A,apiKey:I,externalId:g});return btoa(String.fromCharCode(...e)).replace(/=*$/,"").replace(/\+/g,"-").replace(/\//g,"_")}!function(A){A[A.Open=0]="Open",A[A.Closed=1]="Closed"}(n=I.GatewayStatus||(I.GatewayStatus={})),I.getPeerId=function(A){var I;return B(this,void 0,void 0,(function*(){const g=yield C.getOrganizationInfo(A),e=`rainway-hostname-${g.organizationId.toString(16).padStart(8,"0")}-${g.universeFlag}`,B=BigInt(null!==(I=localStorage.getItem(e))&&void 0!==I?I:yield C.fetchNewPeerId());return localStorage.setItem(e,B.toString()),B}))},I.getHandshakeDataBase64=s,I.Gateway=class{constructor(A,I,g,i,Q,C,t="wss://gateway.rainway.network"){this.ownPeerId=A,this.apiKey=I,this.externalId=g,this.handlePeerInfo=i,this.connectionRequestHandler=Q,this.addAcceptedPeer=C,this.connections=new Map,this.connectionLostEvent=new a.Action,e.set(this,n.Closed),this.syncKey=0,this.peerIdToExternalId=new Map,this.onMessage=A=>B(this,void 0,void 0,(function*(){var I;if(void 0!==this.socket&&"[object ArrayBuffer]"===A.data.toString()){const g=o.GatewayDatagram.decode(new Uint8Array(A.data)),{header:{syncKey:e},body:B}=g;switch(B.discriminator){case o.GatewayRequest.discriminator:E.RainwayLogging.warning("got GatewayRequest?! i am not a gateway. ignoring");break;case o.GatewayResponse.discriminator:{const A=B.value.body.value;E.RainwayLogging.trace("got GatewayHello"),null===(I=this.resolveConnectToGatewayPromise)||void 0===I||I.call(this,A);break}case o.GatewayAlert.discriminator:{const{level:A,description:I}=B.value;A===o.GatewayAlertLevel.Fatal?(E.RainwayLogging.error("Fatal GatewayAlert: "+o.GatewayAlertDescription[I]),this.die(I,"The connection to the Rainway server encountered a fatal error.")):this.onNonFatalAlert(e,I);break}case o.GatewayForwardable.discriminator:this.onForwardable(e,B.value)}}})),this.onClose=A=>{this.die(A,"The connection to the Rainway server was closed.")},this.onError=A=>{this.die(A,"The connection to the Rainway server was lost.")},window.__rainwayGateway=this,this.url=t}get status(){return i(this,e)}connect(){var A;return B(this,void 0,void 0,(function*(){return null!==(A=this.connectToGatewayPromise)&&void 0!==A?A:this.connectToGatewayPromise=new Promise(((A,I)=>{this.resolveConnectToGatewayPromise=A,this.rejectConnectToGatewayPromise=I,this.open()}))}))}open(){return B(this,void 0,void 0,(function*(){this.socket=yield this.makeWebSocket(this.url),E.RainwayLogging.debug("Gateway: connected WebSocket"),this.socket.addEventListener("message",this.onMessage),this.socket.addEventListener("close",this.onClose),Q(this,e,n.Open)}))}makeWebSocket(A){return new Promise(((I,g)=>{const e=new WebSocket(A,["handshake",s(this.ownPeerId,this.apiKey,this.externalId)]);e.binaryType="arraybuffer",e.onopen=()=>{I(e)},e.onerror=A=>{this.onError(A),g(A),this.connectToGatewayPromise=void 0}}))}disconnect(){var A;if(E.RainwayLogging.debug("Gateway: close()"),void 0!==this.socket){this.socket.close(3e3,"Signaling websocket closed.");const A=this.socket;window.setTimeout((()=>{A.removeEventListener("close",this.onClose),A.removeEventListener("message",this.onMessage)}),0)}null===(A=this.rejectConnectToGatewayPromise)||void 0===A||A.call(this,void 0),Q(this,e,n.Closed),this.connectToGatewayPromise=void 0,this.resolveConnectToGatewayPromise=void 0,this.rejectConnectToGatewayPromise=void 0,this.socket=void 0,this.connections.clear()}makeDatagram(A){return{header:{syncKey:++this.syncKey},body:A}}makeForwardable(A,I){return this.makeDatagram({discriminator:o.GatewayForwardable.discriminator,value:{targetPeerId:A,body:I}})}connectToHost(A,I){const g=this.connections.get(A);if(void 0!==g){if(g.owned)throw new t.RainwayError("already connected in other direction");return g.promise}if(void 0===this.socket)throw new t.RainwayError("socket undefined in sendInitConnectionRequest");if(this.status!==n.Open)throw new t.RainwayError("signaling channel not open in sendInitConnectionRequest");const e=this.socket,B={pending:!0};return B.promise=new Promise(((g,i)=>{B.resolve=g,B.reject=i,E.RainwayLogging.trace(`Gateway: Adding ${A} to pendingConnections`);const Q=this.makeDatagram({discriminator:o.GatewayRequest.discriminator,value:{body:{discriminator:o.InitConnectionRequest.discriminator,value:{desiredTransport:I,targetPeerId:A}}}});B.syncKey=Q.header.syncKey,this.connections.set(A,B),e.send(o.GatewayDatagram.encode(Q))})),B.promise}cancelConnectionAttempt(A){const I=this.connections.get(A);void 0!==I&&I.pending&&(I.resolve({canceled:!0}),this.connections.delete(A))}deleteConnection(A){this.connections.delete(A)}sendPeerInfo(A,I,g){if(void 0===this.socket)throw new t.RainwayError("socket unset in Gateway.sendPeerInfo");const e=this.connections.get(A);if(void 0===e)throw new t.RainwayError(`can't send peer info to unknown peerId ${A}`);if(e.pending)throw new t.RainwayError(`can't send peer info to pending peerId ${A}`);const B=this.makeForwardable(A,{discriminator:o.PeerSignalingInformation.discriminator,value:{id:e.connectionRequestId,type:I,data:g}}),i=o.GatewayDatagram.encode(B);this.socket.send(i)}sendOffer(A,I){E.RainwayLogging.debug("sending offer: "+I),this.sendPeerInfo(A,o.PeerInformationType.Offer,I)}sendAnswer(A,I){E.RainwayLogging.debug("sending offer: "+I),this.sendPeerInfo(A,o.PeerInformationType.Answer,I)}sendCandidate(A,I){E.RainwayLogging.debug("sending candidate"+I.candidate),this.sendPeerInfo(A,o.PeerInformationType.Candidate,I.candidate)}onNonFatalAlert(A,I){if(I===o.GatewayAlertDescription.PeerGoneAway)for(const[I,g]of this.connections.entries())g.pending&&g.syncKey===A&&(g.reject("The target peer is not connected to Rainway."),this.connections.delete(I))}onForwardable(A,I){const{targetPeerId:g,body:e}=I;switch(e.discriminator){case o.ConnectionRequest.discriminator:{const{sourcePeerId:I,sourceExternalId:g,desiredTransport:B,id:i,expirationDate:Q}=e.value,C=i;this.peerIdToExternalId.set(I,g),this.connectionRequestHandler({peerId:I,externalId:e.value.sourceExternalId,accept:()=>{if(void 0===this.socket)throw new t.RainwayError("Couldn't send accept message because the connection to Rainway was lost.");const e=o.GatewayDatagram.encode({header:{syncKey:A},body:{discriminator:o.GatewayForwardable.discriminator,value:{targetPeerId:I,body:{discriminator:o.AcceptedConnectionRequest.discriminator,value:{sourcePeerId:this.ownPeerId,sourceExternalId:this.externalId,id:i}}}}});this.socket.send(e),this.connections.set(I,{pending:!1,owned:!0,connectionRequestId:C}),this.addAcceptedPeer(I,g,C)},reject:g=>{if(void 0===this.socket)throw new t.RainwayError("Couldn't send reject message because the connection to Rainway was lost.");const e=o.GatewayDatagram.encode({header:{syncKey:A},body:{discriminator:o.GatewayForwardable.discriminator,value:{targetPeerId:I,body:{discriminator:o.RejectedConnectionRequest.discriminator,value:{sourcePeerId:this.ownPeerId,sourceExternalId:this.externalId,id:i,reason:g}}}}});this.socket.send(e)}});break}case o.AcceptedConnectionRequest.discriminator:{const{id:A,sourcePeerId:I,sourceExternalId:g}=e.value,B=A,i=this.connections.get(I);if(void 0===i)return void E.RainwayLogging.warning("Ignoring AcceptedConnectionRequest from unexpected hostname: "+I);if(!i.pending)return void E.RainwayLogging.warning("Ignoring AcceptedConnectionRequest from already-connected hostname: "+I);i.resolve({canceled:!1,accepted:!0,connectionRequestId:B,hostExternalId:g,transportProtocol:o.PeerTransportType.SCTP}),this.connections.set(I,{pending:!1,owned:!1,promise:i.promise,connectionRequestId:B});break}case o.RejectedConnectionRequest.discriminator:{const{id:A,sourcePeerId:I,sourceExternalId:g}=e.value,B=A,i=this.connections.get(I);if(void 0===i)return void E.RainwayLogging.warning("Ignoring RejectedConnectionRequest from unexpected hostname: "+I);if(!i.pending)return void E.RainwayLogging.warning("Ignoring RejectedConnectionRequest from already-connected hostname: "+I);i.resolve({canceled:!1,accepted:!1,connectionRequestId:B,hostExternalId:g,transportProtocol:o.PeerTransportType.SCTP,reason:e.value.reason}),this.connections.delete(I);break}case o.PeerSignalingInformation.discriminator:E.RainwayLogging.trace("Got peer info:\n"+JSON.stringify(e.value)),this.handlePeerInfo(e.value)}}die(A,I){var g,e;null===(g=this.rejectConnectToGatewayPromise)||void 0===g||g.call(this,A),this.connectToGatewayPromise=void 0,this.resolveConnectToGatewayPromise=void 0,this.rejectConnectToGatewayPromise=void 0;for(const A of this.connections.values())A.pending&&A.reject(I);this.connections.clear(),null===(e=this.connectionLostEvent)||void 0===e||e.invoke(new t.RainwayError(I))}unsetConnectToGatewayPromise(){this.connectToGatewayPromise=void 0,this.resolveConnectToGatewayPromise=void 0,this.rejectConnectToGatewayPromise=void 0}},e=new WeakMap},643:function(A,I,g){"use strict";var e,B=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayRateController=I.defaultRateControlParameters=I.QualityAdjustment=void 0;const i=g(198),Q=g(434),C=g(464),t=g(695);var E;!function(A){A[A.Up=0]="Up",A[A.Down=1]="Down"}(E=I.QualityAdjustment||(I.QualityAdjustment={})),I.defaultRateControlParameters={beatMs:2500,windowMs:4500,badBeats:2,goodBeats:4,backoffFactor:2,latenessThresholdMs:200,latenessSmoothingFactor:.9375,badLateFrameRatio:.75,initialBitrateKbps:Number(null!==(e=new URLSearchParams(window.location.search).get("initial-bitrate"))&&void 0!==e?e:5e3),qualityStepFactor:1.1875},I.RainwayRateController=class{constructor(A=I.defaultRateControlParameters,g,e,C){this.chosenVideoConfig=g,this.performanceMonitor=C,this.badBeatCount=0,this.goodBeatCount=0,this.lastAdjustment=void 0,this.history=[],this.lowestDelta=void 0,this.smoothLateness=0,this.framesThisBeat=0,this.lateFramesThisBeat=0,this.debugLatenessSmoothing=!1,this.badCpuPerfThisBeat=!1,this.badDecoderPerfThisBeat=!1,this.badCpuPerfHandler=()=>{this.badCpuPerfThisBeat=!0},this.badDecoderPerfHandler=()=>{this.badDecoderPerfThisBeat=!0},this.handleVideoReadyState=A=>{A===Q.VideoReadyState.Detached||A===Q.VideoReadyState.Paused||A===Q.VideoReadyState.WaitingForKeyframe?this.stop():this.start()},this.check=()=>B(this,void 0,void 0,(function*(){0!==this.framesThisBeat&&((yield this.beatIsBad())?this.badBeat():this.goodBeat(),this.framesThisBeat=0,this.lateFramesThisBeat=0,this.badCpuPerfThisBeat=!1,this.badDecoderPerfThisBeat=!1)})),this.ownMaximumKbps=1/0,this.chosenVideoConfigMimeType=t.videoCodecMimeType(g.codec),this.parameters=Object.assign(Object.assign({},I.defaultRateControlParameters),A),this.suggestBitrateKbps=e,this.currentBitrateKbps=this.parameters.initialBitrateKbps,this.frameVarianceMs=new i.WindowTrack(this.parameters.windowMs,i.standardDeviation)}format(A){return`[RateControl: ${this.currentBitrateKbps.toFixed(0)+"kbps"}, +${this.smoothLateness.toFixed(0)}ms] ${A}`}debug(A){C.RainwayLogging.debug(this.format(A))}info(A){C.RainwayLogging.information(this.format(A))}start(){var A,I;this.checkInterval||(this.info("Starting rate control!"),this.checkInterval=window.setInterval(this.check,this.parameters.beatMs),null===(A=this.performanceMonitor)||void 0===A||A.cpuStarvationEvent.addHandler(this.badCpuPerfHandler),null===(I=this.performanceMonitor)||void 0===I||I.decoderStrugglingEvent.addHandler(this.badDecoderPerfHandler))}stop(){var A,I;this.checkInterval&&(this.info("Stopping rate control!"),window.clearInterval(this.checkInterval),this.checkInterval=void 0,null===(A=this.performanceMonitor)||void 0===A||A.cpuStarvationEvent.removeHandler(this.badCpuPerfHandler),null===(I=this.performanceMonitor)||void 0===I||I.decoderStrugglingEvent.removeHandler(this.badDecoderPerfHandler))}feedFrameTimestamp(A){const I=performance.now()-A;(void 0===this.lowestDelta||I<this.lowestDelta||Math.abs(this.lowestDelta-I)>5e4)&&(this.lowestDelta=I);const g=I-this.lowestDelta,e=this.parameters.latenessSmoothingFactor;if(this.smoothLateness=e*this.smoothLateness+(1-e)*g,this.framesThisBeat++,this.smoothLateness>=this.parameters.latenessThresholdMs&&this.lateFramesThisBeat++,this.debugLatenessSmoothing){const A=new Array(100);A.fill("-");const I=g,e=this.smoothLateness;A[50]=".",A[Math.max(0,Math.min(Math.round(I/10+50),99))]="L",A[Math.max(0,Math.min(Math.round(e/10+50),99))]="S",this.beatIsBad().then((g=>C.RainwayLogging.debug(`${A.join("")} L=${I} S=${e} bad=${g} ld=${this.lowestDelta}`)))}}decodingInfoAtBitrate(A){return navigator.mediaCapabilities.decodingInfo({type:"media-source",video:{width:this.chosenVideoConfig.codec.width,height:this.chosenVideoConfig.codec.height,framerate:this.chosenVideoConfig.codec.refreshRate,bitrate:1e3*A,contentType:t.videoCodecMimeType(this.chosenVideoConfig.codec)}})}capabilitiesBad(){return B(this,void 0,void 0,(function*(){if(!("MediaSource"in window))return!1;if(!("mediaCapabilities"in navigator))return!1;const A=yield this.decodingInfoAtBitrate(this.currentBitrateKbps),I=yield this.decodingInfoAtBitrate(this.bitrateOneStepDownKbps());return I.smooth&&!A.smooth||I.powerEfficient&&!A.powerEfficient}))}lateFrameRatioBad(){return this.lateFramesThisBeat/this.framesThisBeat>=this.parameters.badLateFrameRatio}beatIsBad(){return B(this,void 0,void 0,(function*(){return this.badDecoderPerfThisBeat||this.badCpuPerfThisBeat||this.lateFrameRatioBad()||(yield this.capabilitiesBad())}))}badBeat(){if(this.currentBitrateKbps<=this.lowestSupportedBitrateKbps())return void this.debug(`crashed at ${this.currentBitrateKbps.toFixed(0)}kbps, ignoring bad beat`);this.badBeatCount++,this.goodBeatCount=0,this.currentBitrateKbps;const A=this.parameters.badBeats;if(this.debug(`bad beat: ${this.badBeatCount}/${A}`),this.badBeatCount>=this.parameters.badBeats){this.goodBeatCount=this.badBeatCount=0;const A=this.lastAdjustment===E.Up;this.qualityDown(),this.debug("went down in quality"),A&&this.currentBitrateKbps<this.ownMaximumKbps&&(this.ownMaximumKbps=this.currentBitrateKbps,this.info(`setting a new maximum at ${this.ownMaximumKbps.toFixed(0)}kbps`))}}goodBeat(){if(this.currentBitrateKbps>=this.ownMaximumKbps||this.currentBitrateKbps>=this.highestSupportedBitrateKbps())return this.debug(`maxed at ${this.currentBitrateKbps.toFixed(0)}kbps, ignoring good beat`),void(this.badBeatCount=0);this.goodBeatCount++,this.badBeatCount=0,this.currentBitrateKbps;const A=this.parameters.goodBeats;this.debug(`good beat: ${this.goodBeatCount}/${A}`),this.goodBeatCount>=A&&(this.goodBeatCount=this.badBeatCount=0,this.qualityUp(),this.debug("went up in quality"))}bitrateOneStepUpKbps(){return Math.min(this.highestSupportedBitrateKbps(),this.currentBitrateKbps*this.parameters.qualityStepFactor)}bitrateOneStepDownKbps(){return Math.max(this.lowestSupportedBitrateKbps(),this.currentBitrateKbps/this.parameters.qualityStepFactor)}qualityUp(){this.currentBitrateKbps=this.bitrateOneStepUpKbps(),this.suggestBitrateKbps(this.currentBitrateKbps),this.lastAdjustment=E.Up,this.history.push({time:performance.now(),bitrate:this.currentBitrateKbps})}qualityDown(){this.currentBitrateKbps=this.bitrateOneStepDownKbps(),this.suggestBitrateKbps(this.currentBitrateKbps),this.lastAdjustment=E.Down,this.history.push({time:performance.now(),bitrate:this.currentBitrateKbps}),this.lowestDelta=void 0}lowestSupportedBitrateKbps(){var A;return Number(null!==(A=new URLSearchParams(window.location.search).get("lowest-bitrate"))&&void 0!==A?A:5e3)}highestSupportedBitrateKbps(){var A;return Number(null!==(A=new URLSearchParams(window.location.search).get("max-bitrate"))&&void 0!==A?A:1e4)}}},145:function(A,I,g){"use strict";var e,B=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},i=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},Q=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.RTCTransport=void 0;const C=g(994),t=g(9),E=g(464),o=g(904),a=g(987),n={iceServers:[{urls:"stun:stun.rainway.com:3478"}]};class s extends t.RainwayTransport{constructor(A,I,g,B,Q){super(),this.ownPeerId=A,this.targetPeerId=I,this.sendLocalOfferSdp=g,this.sendLocalAnswerSdp=B,this.sendLocalIceCandidate=Q,e.set(this,t.RainwayTransportStatus.Disconnected),this.rtcConfiguration=n,this.dataChannelsConfig={},this.syncKey=0,this.currentStreamId=void 0,this.onRainwayMessage=()=>{},this.onApplicationMessage=()=>{},this.onClose=()=>{},this.handlePeerInfo=A=>{var I,g,e;if(A.type===o.PeerInformationType.Answer)E.RainwayLogging.debug("Got Answer in CRID "+A.id+"\n"+A.data),null===(I=this.peerConnection)||void 0===I||I.setRemoteDescription({type:"answer",sdp:A.data});else if(A.type===o.PeerInformationType.Offer)E.RainwayLogging.debug("Got Offer in CRID "+A.id+"\n"+A.data),null===(g=this.peerConnection)||void 0===g||g.setRemoteDescription({type:"offer",sdp:A.data}),this.sendAnswer();else{if(A.type!==o.PeerInformationType.Candidate){const I=o.PeerInformationType[A.type];throw new C.RainwayError(`unexpected PeerInformationType ${I} in handlePeerInfo`)}E.RainwayLogging.debug("Got Candidate in CRID "+A.id+"\n"+A.data),null===(e=this.peerConnection)||void 0===e||e.addIceCandidate(new RTCIceCandidate({candidate:A.data,sdpMid:"",sdpMLineIndex:0}))}},this.handleLocalIceCandidate=A=>{A.candidate&&"1"===A.candidate.candidate.split(" ")[1]&&this.sendLocalIceCandidate(A.candidate)},this.handleIceConnectionStateChange=()=>{var A,I;const g=null===(A=this.peerConnection)||void 0===A?void 0:A.iceConnectionState;E.RainwayLogging.information(`ICE connection state changed to ${g}`),"closed"===g?(this.onClose(),i(this,e,t.RainwayTransportStatus.Disconnected),this.dispose()):"failed"===g&&(null===(I=this.openReject)||void 0===I||I.call(this),this.onClose(),i(this,e,t.RainwayTransportStatus.Failed),this.dispose())},this.handleDataChannelMessage=A=>{const I=A.target.label;this.handleLabelAndData(I,new Uint8Array(A.data))},this.chunkedMessages=new Map,this.highestChunkGroup=0;const a={protocol:"sctp",negotiated:!1},s={ordered:!0},r={ordered:!1,maxRetransmits:0};this.dataChannelsConfig={Logic:Object.assign(Object.assign({id:0},a),s),Video:Object.assign(Object.assign({id:1},a),r),Audio:Object.assign(Object.assign({id:2},a),r),Input:Object.assign(Object.assign({id:3},a),r),Arbitrary:Object.assign(Object.assign({id:4},a),s)}}sendMessage(A,I){var g;if(!A)throw new C.RainwayError("sendMessage: no label");if(!this.dataChannels)throw new C.RainwayError("sendMessage: dataChannels not initialized");const e=null===(g=this.dataChannels)||void 0===g?void 0:g[A];if(!e)throw new C.RainwayError(`sendMessage: channel "${A}" does not exist`);if("open"!==e.readyState)throw new C.RainwayError(`sendMessage: channel "${A}" is not open`);e.send(I)}get status(){return Q(this,e)}get maxMessageSize(){var A,I,g;return null!==(g=null===(I=null===(A=this.peerConnection)||void 0===A?void 0:A.sctp)||void 0===I?void 0:I.maxMessageSize)&&void 0!==g?g:262144}getStats(){return B(this,void 0,void 0,(function*(){if(!this.peerConnection)throw new C.RainwayError("getStats() but no peerConnection");const A=yield this.peerConnection.getStats(void 0),I={channels:{},raw:A};return A.forEach((A=>{"data-channel"===A.type&&(I.channels[A.label]=A)})),I}))}checkHeader(A){if(2036430674!==A.magicNumber)throw new C.RainwayError("Invalid magicNumber in checkHeader.");if(A.targetPeerId!==this.ownPeerId)throw new C.RainwayError("Invalid destination host name (not ours) in checkHeader.")}handleLabelAndData(A,I){if("Arbitrary"===A){const A=o.ArbitraryDatagram.decode(I);this.checkHeader(A.header),this.handleChunk("Arbitrary",A.body)}else if("Logic"===A){const A=o.LogicDatagram.decode(I);this.checkHeader(A.header),this.onRainwayMessage({kind:"Logic",body:A.body})}else if("Input"===A){const A=o.InputDatagram.decode(I);this.checkHeader(A.header),this.onRainwayMessage({kind:"Input",body:A.body})}else if("Audio"===A||"Video"==A){const g=o.MediaDatagram.decode(I);this.checkHeader(g.header),g.body.discriminator===o.MediaChunk.discriminator?this.handleChunk(A,g.body.value.chunk):this.onRainwayMessage({kind:"Media",body:g.body})}else E.RainwayLogging.warning(`Unknown RTC label? ${A}`)}getDatagramHeader(A){return{magicNumber:2036430674,syncKey:A?++this.syncKey:0,sourcePeerId:this.ownPeerId,targetPeerId:this.targetPeerId}}sendArbitraryDatagram(A){a.eachChunk(A,(A=>{this.sendMessage("Arbitrary",o.ArbitraryDatagram.encode({header:this.getDatagramHeader(!0),body:A}))}))}sendLogicDatagram(A){this.sendMessage("Logic",o.LogicDatagram.encode({header:this.getDatagramHeader(!0),body:A}))}sendInputDatagram(A){this.sendMessage("Input",o.InputDatagram.encode({header:this.getDatagramHeader(!1),body:A}))}open(A){return B(this,void 0,void 0,(function*(){yield new Promise(((I,g)=>B(this,void 0,void 0,(function*(){var B;this.openResolve=I,this.openReject=g,i(this,e,t.RainwayTransportStatus.Connecting),this.peerConnection=new RTCPeerConnection(this.rtcConfiguration),this.peerConnection.addEventListener("iceconnectionstatechange",this.handleIceConnectionStateChange),null!==(B=this.dataChannels)&&void 0!==B||(this.dataChannels={});const Q=Object.keys(this.dataChannelsConfig).length;let C=0;const o=(A,g)=>{const B=()=>{var A;++C,C===Q&&(null===(A=this.peerConnection)||void 0===A||A.removeEventListener("icecandidate",this.handleLocalIceCandidate),i(this,e,t.RainwayTransportStatus.Connected),I()),g.removeEventListener("open",B)};g.addEventListener("open",B),g.addEventListener("close",(I=>E.RainwayLogging.debug("RTC channel closed: "+A))),g.addEventListener("error",(I=>E.RainwayLogging.warning("RTC channel errored: "+A))),g.addEventListener("message",this.handleDataChannelMessage)};if("offer"===A)for(const[A,I]of Object.entries(this.dataChannelsConfig)){const g=this.peerConnection.createDataChannel(A,I);this.dataChannels[A]=g,g.binaryType="arraybuffer",o(A,g)}else this.peerConnection.addEventListener("datachannel",(A=>{var I;const g=A.channel.label;null!==(I=this.dataChannels)&&void 0!==I||(this.dataChannels={}),this.dataChannels[g]=A.channel,o(A.channel.label,A.channel)}));this.peerConnection.addEventListener("icecandidate",this.handleLocalIceCandidate),"offer"===A&&(yield this.sendOffer())}))))}))}sendOffer(){return B(this,void 0,void 0,(function*(){if(void 0===this.peerConnection)throw new C.RainwayError("sendOffer(): no peer connection");const A=yield this.peerConnection.createOffer();if(yield this.peerConnection.setLocalDescription(A),!A.sdp)throw new C.RainwayError("Created offer contained no sdp?");this.sendLocalOfferSdp(A.sdp)}))}sendAnswer(){return B(this,void 0,void 0,(function*(){if(void 0===this.peerConnection)throw new C.RainwayError("sendOffer(): no peer connection");const A=yield this.peerConnection.createAnswer();if(yield this.peerConnection.setLocalDescription(A),!A.sdp)throw new C.RainwayError("Created answer contained no sdp?");this.sendLocalAnswerSdp(A.sdp)}))}close(){var A;this.status!==t.RainwayTransportStatus.Disconnected&&this.status!==t.RainwayTransportStatus.Failed&&(E.RainwayLogging.debug("rtc-transport close()."),null===(A=this.peerConnection)||void 0===A||A.close(),this.onClose(),this.dispose())}dispose(){var A,I;if(null===(A=this.peerConnection)||void 0===A||A.removeEventListener("iceconnectionstatechange",this.handleIceConnectionStateChange),null===(I=this.peerConnection)||void 0===I||I.removeEventListener("icecandidate",this.handleLocalIceCandidate),this.dataChannels)for(const A of Object.values(this.dataChannels))A.removeEventListener("message",this.handleDataChannelMessage);this.dataChannels=void 0,this.peerConnection=void 0,this.openResolve=void 0,this.openReject=void 0}handleChunk(A,I){I.groupId<this.highestChunkGroup&&(this.chunkedMessages=new Map,this.highestChunkGroup=0);let g=this.chunkedMessages.get(I.groupId);if(g||(g={receivedChunkCount:0,chunks:[]},this.chunkedMessages.set(I.groupId,g)),g.chunks[I.index]=I.data,g.receivedChunkCount++,g.receivedChunkCount===I.chunksInGroup){this.highestChunkGroup=I.groupId,this.chunkedMessages.delete(I.groupId);const e=a.reassemble(g);"Arbitrary"===A?this.onApplicationMessage(e):this.handleLabelAndData(A,e)}}sendKeyframeRequest(){void 0!==this.currentStreamId&&this.sendLogicDatagram({discriminator:o.KeyframeRequest.discriminator,value:{streamId:this.currentStreamId}})}sendVideoBitrateRequest(A){void 0!==this.currentStreamId&&this.sendLogicDatagram({discriminator:o.VideoBitrateRequest.discriminator,value:{streamId:this.currentStreamId,bitsPerSecond:A}})}}I.RTCTransport=s,e=new WeakMap},9:(A,I)=>{"use strict";var g;Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayTransport=I.RainwayTransportStatus=void 0,(g=I.RainwayTransportStatus||(I.RainwayTransportStatus={}))[g.Disconnected=0]="Disconnected",g[g.Connecting=1]="Connecting",g[g.Connected=2]="Connected",g[g.Failed=3]="Failed",I.RainwayTransport=class{}},420:function(A,I,g){"use strict";var e,B,i,Q,C=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},t=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},E=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayPeer=I.PeerState=void 0;const o=g(904),a=g(464),n=g(514),s=g(876),r=g(994);var d;!function(A){A[A.ExchangingInfo=0]="ExchangingInfo",A[A.Ready=1]="Ready",A[A.Disconnected=2]="Disconnected"}(d=I.PeerState||(I.PeerState={})),I.RainwayPeer=class{constructor(A,I,g,C,E,o,a){this.transport=g,this.outerOnClose=C,this.onError=E,this.onStreamAnnouncement=o,this.onStreamStop=a,e.set(this,d.ExchangingInfo),B.set(this,void 0),i.set(this,void 0),Q.set(this,void 0),this.lastTimestamp=void 0,t(this,i,A),t(this,Q,I),g.onRainwayMessage=this.onMessage.bind(this),g.onClose=this.onClose.bind(this),this.readyToStream=new Promise(((A,I)=>{this.resolveReadyToStream=A}))}get state(){return E(this,e)}get stream(){return E(this,B)}get peerId(){return E(this,i)}get externalId(){return E(this,Q)}onClose(){t(this,e,d.Disconnected),this.outerOnClose()}sendDeviceInfoAndExchangeCodecs(){if(E(this,e)===d.Disconnected)throw new r.RainwayError("Couldn't send device info and exchange codecs: peer is disconnected");this.sendDeviceInfo(),this.exchangeCodecs().then((A=>{var I;this.transport.sendLogicDatagram({discriminator:o.ClientCapabilities.discriminator,value:n.makeClientCapabilities(A)}),null===(I=this.resolveReadyToStream)||void 0===I||I.call(this),t(this,e,d.Ready)}))}onMessage(A){"Logic"===A.kind?this.handleLogicMessage(A.body):"Input"===A.kind?this.handleInputMessage(A.body):"Media"===A.kind&&this.handleMediaMessage(A.body)}sendDeviceInfo(){if(E(this,e)===d.Disconnected)throw new r.RainwayError("Couldn't send device info: peer is disconnected");this.transport.sendLogicDatagram({discriminator:o.DeviceInfo.discriminator,value:{isWeb:!0,formFactor:o.FormFactor.Computer,deviceName:"deviceName",deviceId:"deviceId",deviceModel:"",deviceOs:o.OperatingSystem.Other,deviceOsVersion:"",userAgent:navigator.userAgent}})}send(A){if(E(this,e)===d.Disconnected)throw new r.RainwayError("Couldn't send message: peer is disconnected");this.transport.sendArbitraryDatagram(A)}disconnect(){var A;null===(A=E(this,B))||void 0===A||A.leave(),this.transport.close()}requestStream(A){return C(this,void 0,void 0,(function*(){if(E(this,e)===d.Disconnected)throw new r.RainwayError("Couldn't request stream: peer is disconnected");return yield this.readyToStream,this.transport.sendLogicDatagram({discriminator:o.StreamRequest.discriminator,value:{inputLevel:A}}),new Promise(((A,I)=>{this.resolveStream=A,this.rejectStream=I}))}))}handleLogicMessage(A){var I;return C(this,void 0,void 0,(function*(){A.discriminator===o.DeviceInfo.discriminator?a.RainwayLogging.debug("Got remote DeviceInfo:\n"+JSON.stringify(A.value)):A.discriminator===o.CodecPackRequest.discriminator?this.transport.sendLogicDatagram({discriminator:o.CodecPackResponse.discriminator,value:{videoCodecs:[]}}):A.discriminator===o.CodecPackResponse.discriminator?null===(I=this.codecsResolve)||void 0===I||I.call(this,A.value.videoCodecs):A.discriminator===o.ClientCapabilities.discriminator?a.RainwayLogging.debug("Got remote ClientCapabilities:\n"+JSON.stringify(A.value)):A.discriminator===o.StreamRequest.discriminator?a.RainwayLogging.warning("Got remote StreamRequest?\n"+JSON.stringify(A.value)):A.discriminator===o.StreamStarting.discriminator?void 0===this.resolveStream?this.onStreamAnnouncement({info:A.value,join:()=>C(this,void 0,void 0,(function*(){return t(this,B,yield this.createStream(A.value)),this.transport.sendLogicDatagram({discriminator:o.JoinStream.discriminator,value:{streamId:A.value.streamId}}),E(this,B)}))}):(t(this,B,yield this.createStream(A.value)),this.transport.sendLogicDatagram({discriminator:o.JoinStream.discriminator,value:{streamId:A.value.streamId}}),this.resolveStream(E(this,B)),this.resolveStream=void 0,this.rejectStream=void 0):A.discriminator===o.RejectStreamRequest.discriminator?void 0!==this.rejectStream?(this.rejectStream(A.value.reason),this.resolveStream=void 0,this.rejectStream=void 0):a.RainwayLogging.warning("Got RejectStreamRequest, but didn't ask for a stream."):A.discriminator===o.LeaveStream.discriminator?a.RainwayLogging.warning("Got remote LeaveStream?\n"+JSON.stringify(A.value)):A.discriminator===o.StreamStopping.discriminator&&(a.RainwayLogging.debug("Got remote StreamStopping:\n"+JSON.stringify(A.value)),this.discardStream())}))}createStream(A){return s.RainwayStream.createAndInitialize(A.inputLevel,A.chosenAudioConfig,A.chosenVideoConfig,A.captureMode,(A=>this.transport.sendInputDatagram(A)),(A=>this.transport.sendLogicDatagram(A)),(()=>this.transport.getStats()),(()=>this.discardStream()))}discardStream(){E(this,B)&&this.onStreamStop(E(this,B)),t(this,B,void 0)}handleInputMessage(A){if(void 0!==this.stream)if(A.discriminator===o.GamepadRumble.discriminator){const I=A.value.leftMotorSpeed,g=A.value.rightMotorSpeed;this.stream.vibrateGamepad(A.value.port,{duration:100,startDelay:0,strongMagnitude:Math.max(I,g)/65535,weakMagnitude:0})}else if(A.discriminator===o.SetClipboardText.discriminator){const I=A.value.text;navigator.clipboard.writeText(I).then((()=>{}))}else a.RainwayLogging.warning(`Ignoring unrecognized Input discriminator ${A.discriminator}`)}handleMediaMessage(A){if(void 0!==this.stream)if(A.discriminator===o.VideoData.discriminator){const{data:I,segmentTime:g,type:e,desktopRect:B,mask:i}=A.value,Q=I.buffer.slice(I.byteOffset,I.byteOffset+I.length),C=1e-4*Number(g);e===o.VideoDataType.FrameDiff&&void 0!==this.lastTimestamp&&C-this.lastTimestamp<3&&a.RainwayLogging.warning(`Difference between successive timestamps was ${(C-this.lastTimestamp).toFixed(1)}`),e!==o.VideoDataType.Metadata&&(this.lastTimestamp=C),this.stream.renderVideoFrame({timestamp:C,x:B.left,y:B.top,width:B.width,height:B.height,mask:i},Q)}else if(A.discriminator===o.PointerData.discriminator)this.stream.processCursor({x:A.value.positionX,y:A.value.positionY,spotX:A.value.spotX,spotY:A.value.spotY,shapeWidth:A.value.shapeWidth,shapeHeight:A.value.shapeHeight,extentWidth:A.value.monitorWidth,extentHeight:A.value.monitorHeight,visible:A.value.visible,hasPointerImage:A.value.data.length>0,pointerImage:A.value.data});else if(A.discriminator===o.AudioData.discriminator){const{data:I,type:g}=A.value,e=I.buffer.slice(I.byteOffset,I.byteOffset+I.length);this.stream.processAudio(e)}}exchangeCodecs(){return C(this,void 0,void 0,(function*(){if(E(this,e)===d.Disconnected)throw new r.RainwayError("Couldn't exchange codecs: peer is disconnected");const A=yield new Promise((A=>{this.transport.sendLogicDatagram({discriminator:o.CodecPackRequest.discriminator,value:{}}),this.codecsResolve=A}));return this.codecsResolve=void 0,A}))}},e=new WeakMap,B=new WeakMap,i=new WeakMap,Q=new WeakMap},783:function(A,I,g){"use strict";var e,B,i,Q,C,t,E=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},o=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g},a=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayRuntime=void 0;const n=g(104),s=g(994),r=g(464),d=g(145),h=g(904),c=g(420);null!==(e=(i=DataView.prototype).setBigUint64)&&void 0!==e||(i.setBigUint64=function(A,I,g){const e=BigInt(4294967295),B=Number(I>>BigInt(32)&e),i=Number(I&e),[Q,C]=g?[4,0]:[0,4];this.setUint32(A+Q,B,g),this.setUint32(A+C,i,g)}),null!==(B=(Q=DataView.prototype).getBigUint64)&&void 0!==B||(Q.getBigUint64=function(A,I){const[g,e]=I?[4,0]:[0,4],B=BigInt(this.getUint32(A+g,I)),i=BigInt(this.getUint32(A+e,I));return B<<BigInt(32)|i});class D{constructor(A,I){C.set(this,void 0),t.set(this,new Map),this.connectionTransports=new Map,this.documentVisibilityChangeHandler=()=>{var A,I,g;if(document.hidden)for(const g of this.peers.values())null===(A=g.stream)||void 0===A||A.releaseKeys(),null===(I=g.stream)||void 0===I||I.pause();else for(const A of this.peers.values())null===(g=A.stream)||void 0===g||g.play()},this.windowBlurHandler=()=>{var A;for(const I of this.peers.values())null===(A=I.stream)||void 0===A||A.releaseKeys()},this.beforeUnloadHandler=A=>{const I=location.hash;return[...this.peers.values()].some((A=>void 0!==A.stream))&&(setTimeout((()=>{location.hash="?hj="+~~(9999*Math.random()),location.hash=I}),0),A.preventDefault(),A.returnValue=""),!1},window.__rainwayRuntime=this,o(this,C,A),this.config=Object.assign({externalId:"",preventUnloadingPage:!0,logSink:()=>{}},I),this.setLogSink(this.config.logSink),this.gateway=new n.Gateway(a(this,C),this.config.apiKey,this.config.externalId,(A=>this.handlePeerInfo(A)),(A=>this.config.onConnectionRequest(A)),((A,I,g)=>this.addPeer(A,I,g,"answer"))),this.gateway.connectionLostEvent.addHandler((A=>{a(this,t).clear(),this.config.onRuntimeConnectionLost(A)}))}get peers(){return[...a(this,t).values()]}static initialize(A){return E(this,void 0,void 0,(function*(){if(D.initialized)throw new s.RainwayError("RainwayRuntime may only be initialized once. Don't worry: you can manage multiple Rainway connections from a single RainwayRuntime object.");const I=yield n.getPeerId(A.apiKey),g=new D(I,A);return yield g.gateway.connect(),window.addEventListener("beforeunload",(A=>g.beforeUnloadHandler(A))),window.addEventListener("blur",(A=>g.windowBlurHandler())),document.addEventListener("visibilitychange",(A=>g.documentVisibilityChangeHandler())),D.initialized=!0,g}))}getPeerId(){return a(this,C)}connect(A){return E(this,void 0,void 0,(function*(){if(yield this.gateway.connect(),a(this,t).has(A))throw new s.RainwayError(`Already connected to ${A}`);const I=yield this.gateway.connectToHost(A,h.PeerTransportType.SCTP);if(I.canceled)throw new s.RainwayError("The connection attempt was canceled.");if(!I.accepted)throw new s.RainwayError(`The peer at ${A} rejected the connection, with reason: ${I.reason}`);return this.addPeer(A,I.hostExternalId,I.connectionRequestId,"offer")}))}addPeer(A,I,g,e){return E(this,void 0,void 0,(function*(){const B=new d.RTCTransport(a(this,C),A,(I=>this.gateway.sendOffer(A,I)),(I=>this.gateway.sendAnswer(A,I)),(I=>this.gateway.sendCandidate(A,I))),i=new c.RainwayPeer(A,I,B,(()=>{this.config.onPeerDisconnect(i),this.gateway.deleteConnection(A),a(this,t).delete(A)}),(A=>{this.config.onPeerError(i,A)}),(A=>{this.config.onStreamAnnouncement(i,A)}),(A=>{this.config.onStreamStop(A)}));this.connectionTransports.set(g,B),B.onApplicationMessage=A=>this.config.onPeerMessage(i,A);try{yield B.open(e)}finally{this.connectionTransports.delete(g)}return i.sendDeviceInfoAndExchangeCodecs(),a(this,t).set(A,i),this.config.onPeerConnect(i),i}))}cancelConnectionAttempt(A){this.gateway.cancelConnectionAttempt(A)}connectToGateway(){return E(this,void 0,void 0,(function*(){return yield this.gateway.connect()}))}disconnectFromGateway(){a(this,t).clear(),this.gateway.disconnect()}handlePeerInfo(A){const I=this.connectionTransports.get(A.id);void 0!==I?I.handlePeerInfo(A):A.type!==h.PeerInformationType.Candidate&&r.RainwayLogging.warning("Got peer info for unexpected CRID? "+A.id)}getMediaCapabilities(A){return navigator.mediaCapabilities.decodingInfo(A)}setLogSink(A){r.RainwayLogging.setLogSink(A)}}I.RainwayRuntime=D,C=new WeakMap,t=new WeakMap,D.initialized=!1},876:function(A,I,g){"use strict";var e,B=this&&this.__awaiter||function(A,I,g,e){return new(g||(g=Promise))((function(B,i){function Q(A){try{t(e.next(A))}catch(A){i(A)}}function C(A){try{t(e.throw(A))}catch(A){i(A)}}function t(A){var I;A.done?B(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(Q,C)}t((e=e.apply(A,I||[])).next())}))},i=this&&this.__classPrivateFieldGet||function(A,I){if(!I.has(A))throw new TypeError("attempted to get private field on non-instance");return I.get(A)},Q=this&&this.__classPrivateFieldSet||function(A,I,g){if(!I.has(A))throw new TypeError("attempted to set private field on non-instance");return I.set(A,g),g};Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayStream=void 0;const C=g(994),t=g(904),E=g(824),o=g(425),a=g(643),n=g(464),s=g(695);class r{constructor(A,I,g,B,i,Q,C,n){this.chosenAudioConfig=I,this.chosenVideoConfig=g,this.captureMode=B,this.sendInput=i,this.sendLogic=Q,this.peerDiscardStream=n,this.resizeDebounceHandle=void 0,e.set(this,!1),this.sendKeyframeRequest=()=>{this.sendLogic({discriminator:t.KeyframeRequest.discriminator,value:{streamId:0}})},this.feedVideoStateIntoRateController=A=>{this.rateController.handleVideoReadyState(A)},this.setRemoteClipboard=()=>{navigator.clipboard.readText().then((A=>{this.sendInput({discriminator:t.SetClipboardText.discriminator,value:{text:A}})}))};const r=document.createElement("div");r.tabIndex=0,r.style.touchAction="none",r.style.userSelect="none",r.style.webkitUserSelect="none",r.style.position="relative",r.style.width="100%",r.style.height="100%",r.className="rainway-inner-container",r.addEventListener("focus",this.setRemoteClipboard),this.innerContainer=r,this.inputManager=new E.RainwayInputManager(this),this.mediaManager=new o.MediaManager(B,g,{video:{codecString:s.videoCodecMimeType(g.codec)}},C),this.rateController=new a.RainwayRateController(void 0,g,(A=>this.sendLogic({discriminator:t.VideoBitrateRequest.discriminator,value:{streamId:0,bitsPerSecond:1e3*A}})),this.mediaManager.videoPerformanceMonitor),r.addEventListener("click",(()=>{this.resumeAudio()})),this.mediaManager.setContainer(r),this.mediaManager.videoNeedsRestartEvent.addHandler(this.sendKeyframeRequest),this.mediaManager.videoReadyStateChangeEvent.addHandler(this.feedVideoStateIntoRateController),this.inputManager.setContainer(r),this.inputManager.setInputLevel(A),this.containerResizeObserver=new ResizeObserver((()=>{this.resizeDebounceHandle&&window.clearTimeout(this.resizeDebounceHandle),this.resizeDebounceHandle=window.setTimeout((()=>{this.sendInput({discriminator:t.ViewportResize.discriminator,value:{width:this.innerContainer.clientWidth,height:this.innerContainer.clientHeight}}),this.resizeDebounceHandle=void 0}),100)})),this.containerResizeObserver.observe(r),window.__rainwayStream=this}get dead(){return i(this,e)}get container(){return this.innerContainer}get inputLevel(){return this.inputManager.getInputLevel()}get currentFrameSize(){const{codec:A}=this.chosenVideoConfig;return{codecWidth:A.width,codecHeight:A.height,streamBounds:this.mediaManager.currentStreamBounds,fullDesktopBounds:this.mediaManager.currentFullDesktopBounds}}static createAndInitialize(A,I,g,e,i,Q,C,t){return B(this,void 0,void 0,(function*(){const B=new r(A,I,g,e,i,Q,C,t);return yield B.mediaManager.initialize(),B}))}vibrateGamepad(A,I){this.inputManager.vibrateGamepad(A,I)}processAudio(A){this.mediaManager.processAudio(A)}processCursor(A){this.inputManager.processCursor(A)}renderVideoFrame(A,I){this.rateController.feedFrameTimestamp(A.timestamp),this.mediaManager.renderVideoFrame(A,I)}transformPointerOffsetToRemote(A,I){const g=this.mediaManager.currentStreamBounds;if(!g)return;const e=this.mediaManager.currentFullDesktopBounds;if(!e)return;const{left:B,top:i,width:Q,height:C}=e,{left:t,top:E,width:o,height:a}=g,n=this.chosenVideoConfig.codec.width,s=this.chosenVideoConfig.codec.height,r=this.innerContainer.clientWidth,d=this.innerContainer.clientHeight,h=o*n/Q,c=a*s/C,D=Math.min(r/h,d/c);return{x:(A-(r-D*h)/2)/(D*n/Q)+t-B,y:(I-(d-D*c)/2)/(D*s/C)+E-i}}releaseKeys(){this.inputManager.releaseKeys()}enableVideoStatsOverlay(){var A;null===(A=this.mediaManager)||void 0===A||A.enableStatsOverlay()}disableVideoStatsOverlay(){var A;null===(A=this.mediaManager)||void 0===A||A.disableStatsOverlay()}requestFullscreen(A){var I,g,e;const B=null===(I=null==A?void 0:A.lockKeyboard)||void 0===I||I,i=null===(g=null==A?void 0:A.lockPointer)||void 0===g||g;if(this.innerContainer.requestFullscreen?this.innerContainer.requestFullscreen({navigationUI:"hide"}):this.innerContainer.webkitRequestFullscreen({navigationUI:"hide"}),B&&"keyboard"in navigator)try{navigator.keyboard.lock()}catch(A){}i&&(null===(e=this.inputManager)||void 0===e||e.lockPointer())}play(){if(i(this,e))throw new C.RainwayError("Attempted to play a dead stream");this.mediaManager.play(),this.rateController.start()}pause(){if(i(this,e))throw new C.RainwayError("Attempted to pause a dead stream");this.mediaManager.pause(),this.rateController.stop()}leave(){i(this,e)?n.RainwayLogging.warning("Attempted to leave a dead stream"):(this.sendLogic({discriminator:t.LeaveStream.discriminator,value:{streamId:0}}),this.peerDiscardStream(),this.innerContainer.removeEventListener("focus",this.setRemoteClipboard),this.containerResizeObserver.disconnect(),this.mediaManager.videoNeedsRestartEvent.removeHandler(this.sendKeyframeRequest),this.mediaManager.videoReadyStateChangeEvent.removeHandler(this.feedVideoStateIntoRateController),this.inputManager.dispose(),this.mediaManager.dispose(),this.rateController.stop(),Q(this,e,!0))}resumeAudio(){var A,I;null===(I=null===(A=this.mediaManager)||void 0===A?void 0:A.audioContext)||void 0===I||I.resume()}enableGestures(){var A;null===(A=this.inputManager)||void 0===A||A.enableGestures()}disableGestures(){var A;null===(A=this.inputManager)||void 0===A||A.disableGestures()}}I.RainwayStream=r,e=new WeakMap},994:(A,I)=>{"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RainwayError=void 0;class g extends Error{constructor(A){super(`Rainway SDK Error: ${A}`),this.name=this.constructor.name,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error(`Rainway SDK Error: ${A}`).stack,Object.setPrototypeOf(this,g.prototype)}}I.RainwayError=g},859:A=>{self,A.exports=(()=>{"use strict";var A={114:function(A,I,g){var e=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0});const B=e(g(170));class i{initialize(){return this.id=i.uniqueIdCounter++,new Promise(((A,I)=>{this.worker=new B.default,this.worker.addEventListener("message",(I=>{var g;const e=I.data;"decoderReady"===e.type?A(0):"pictureReady"===e.type&&(null===(g=this.onDecode)||void 0===g||g.call(this,e))}))}))}decode(A){this.worker&&this.worker.postMessage({type:"decode",data:A.buffer,offset:A.byteOffset,length:A.byteLength,renderStateId:this.id},[A.buffer])}release(){this.worker&&this.worker.postMessage({type:"release",renderStateId:this.id})}dispose(){this.worker&&(this.worker.terminate(),this.worker=void 0)}}I.default=i,i.uniqueIdCounter=1},170:(A,I,g)=>{g.r(I),g.d(I,{default:()=>i});var e=g(614),B=g.n(e);function i(){return B()('/*! For license information please see index.worker.js.LICENSE.txt */\n(()=>{var A={719:A=>{var I,g=(I="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(A){(A=A||{})||(A=void 0!==A?A:{});var g,B={};for(g in A)A.hasOwnProperty(g)&&(B[g]=A[g]);var Q,C=[],E="";E=self.location.href,I&&(E=I),E=0!==E.indexOf("blob:")?E.substr(0,E.lastIndexOf("/")+1):"",Q=function(A){var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)};var i,D,o=A.print||console.log.bind(console),a=A.printErr||console.warn.bind(console);for(g in B)B.hasOwnProperty(g)&&(A[g]=B[g]);B=null,A.arguments&&(C=A.arguments),A.thisProgram&&A.thisProgram,A.quit&&A.quit,A.wasmBinary&&(i=A.wasmBinary),A.noExitRuntime&&A.noExitRuntime,"object"!=typeof WebAssembly&&a("no native wasm support detected");var G,S,F,N,w,y,R,h=new WebAssembly.Table({initial:1,maximum:1,element:"anyfunc"}),s=!1;function k(I){G=I,A.HEAP8=S=new Int8Array(I),A.HEAP16=N=new Int16Array(I),A.HEAP32=w=new Int32Array(I),A.HEAPU8=F=new Uint8Array(I),A.HEAPU16=new Uint16Array(I),A.HEAPU32=new Uint32Array(I),A.HEAPF32=y=new Float32Array(I),A.HEAPF64=R=new Float64Array(I)}var L=A.INITIAL_MEMORY||16777216;function M(I){for(;I.length>0;){var g=I.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?A.dynCall_v(B):A.dynCall_vi(B,g.arg):B(void 0===g.arg?null:g.arg)}else g(A)}}(D=A.wasmMemory?A.wasmMemory:new WebAssembly.Memory({initial:L/65536,maximum:32768}))&&(G=D.buffer),L=G.byteLength,k(G),w[2188]=5251792;var U=[],Y=[],J=[],q=[],K=0,H=null,t=null;function c(I){throw A.onAbort&&A.onAbort(I),o(I+=""),a(I),s=!0,I="abort("+I+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(I)}function d(A){return I=A,g="data:application/octet-stream;base64,",String.prototype.startsWith?I.startsWith(g):0===I.indexOf(g);var I,g}A.preloadedImages={},A.preloadedAudios={};var n,p="TinyH264.wasm";function f(){try{if(i)return new Uint8Array(i);if(Q)return Q(p);throw"both async and sync fetching of the wasm failed"}catch(A){c(A)}}function r(A){try{return D.grow(A-G.byteLength+65535>>>16),k(D.buffer),1}catch(A){}}d(p)||(n=p,p=A.locateFile?A.locateFile(n,E):E+n),Y.push({func:function(){x()}});var e={a:function(A,I,g){F.copyWithin(A,I,I+g)},b:function(A){A>>>=0;var I=F.length,g=2147483648;if(A>g)return!1;for(var B,Q=1;Q<=4;Q*=2){var C=I*(1+.2/Q);if(C=Math.min(C,A+100663296),r(Math.min(g,((B=Math.max(16777216,A,C))%65536>0&&(B+=65536-B%65536),B))))return!0}return!1},memory:D,table:h},m=function(){var I={a:e};function g(I,g){var B=I.exports;A.asm=B,function(I){if(K--,A.monitorRunDependencies&&A.monitorRunDependencies(K),0==K&&(null!==H&&(clearInterval(H),H=null),t)){var g=t;t=null,g()}}()}function B(A){g(A.instance)}function Q(A){return(i||"function"!=typeof fetch?new Promise((function(A,I){A(f())})):fetch(p,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at \'"+p+"\'";return A.arrayBuffer()})).catch((function(){return f()}))).then((function(A){return WebAssembly.instantiate(A,I)})).then(A,(function(A){a("failed to asynchronously prepare wasm: "+A),c(A)}))}if(K++,A.monitorRunDependencies&&A.monitorRunDependencies(K),A.instantiateWasm)try{return A.instantiateWasm(I,g)}catch(A){return a("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(i||"function"!=typeof WebAssembly.instantiateStreaming||d(p)||"function"!=typeof fetch)return Q(B);fetch(p,{credentials:"same-origin"}).then((function(A){return WebAssembly.instantiateStreaming(A,I).then(B,(function(A){a("wasm streaming compile failed: "+A),a("falling back to ArrayBuffer instantiation"),Q(B)}))}))}(),{}}();A.asm=m;var W,x=A.___wasm_call_ctors=function(){return(x=A.___wasm_call_ctors=A.asm.c).apply(null,arguments)};function X(I){function g(){W||(W=!0,A.calledRun=!0,s||(M(Y),M(J),A.onRuntimeInitialized&&A.onRuntimeInitialized(),function(){if(A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)I=A.postRun.shift(),q.unshift(I);var I;M(q)}()))}I=I||C,K>0||(function(){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)I=A.preRun.shift(),U.unshift(I);var I;M(U)}(),K>0||(A.setStatus?(A.setStatus("Running..."),setTimeout((function(){setTimeout((function(){A.setStatus("")}),1),g()}),1)):g()))}if(A._h264bsdInit=function(){return(A._h264bsdInit=A.asm.d).apply(null,arguments)},A._malloc=function(){return(A._malloc=A.asm.e).apply(null,arguments)},A._free=function(){return(A._free=A.asm.f).apply(null,arguments)},A._h264bsdDecode=function(){return(A._h264bsdDecode=A.asm.g).apply(null,arguments)},A._h264bsdShutdown=function(){return(A._h264bsdShutdown=A.asm.h).apply(null,arguments)},A._h264bsdAlloc=function(){return(A._h264bsdAlloc=A.asm.i).apply(null,arguments)},A._h264bsdFree=function(){return(A._h264bsdFree=A.asm.j).apply(null,arguments)},A.asm=m,A.getValue=function(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return S[A>>0];case"i16":return N[A>>1];case"i32":case"i64":return w[A>>2];case"float":return y[A>>2];case"double":return R[A>>3];default:c("invalid type for getValue: "+I)}return null},A.then=function(I){if(W)I(A);else{var g=A.onRuntimeInitialized;A.onRuntimeInitialized=function(){g&&g(),I(A)}}return A},t=function A(){W||X(),W||(t=A)},A.run=X,A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);A.preInit.length>0;)A.preInit.pop()();return X(),A});A.exports=g},340:(A,I,g)=>{"use strict";g.r(I),g.d(I,{init:()=>o});var B=function(){function A(A,I){this.tinyH264Module=A,this.onPictureReady=I,this.pStorage=this.tinyH264Module._h264bsdAlloc(),this.pWidth=this.tinyH264Module._malloc(4),this.pHeight=this.tinyH264Module._malloc(4),this.pPicture=this.tinyH264Module._malloc(4),this._decBuffer=this.tinyH264Module._malloc(1048576),this.tinyH264Module._h264bsdInit(this.pStorage,0)}var I=A.prototype;return I.release=function(){var A=this.pStorage;0!==A&&(this.tinyH264Module._h264bsdShutdown(A),this.tinyH264Module._h264bsdFree(A)),this.tinyH264Module._free(this.pWidth),this.tinyH264Module._free(this.pHeight),this.tinyH264Module._free(this.pPicture),this.pStorage=0,this.pWidth=0,this.pHeight=0},I.decode=function(I){if(I instanceof ArrayBuffer&&(I=new Uint8Array(I)),this.tinyH264Module.HEAPU8.set(I,this._decBuffer),this.tinyH264Module._h264bsdDecode(this.pStorage,this._decBuffer,I.byteLength,this.pPicture,this.pWidth,this.pHeight)===A.PIC_RDY){var g=this.tinyH264Module.getValue(this.pWidth,"i32"),B=this.tinyH264Module.getValue(this.pHeight,"i32"),Q=this.tinyH264Module.getValue(this.pPicture,"i8*"),C=new Uint8Array(this.tinyH264Module.HEAPU8.subarray(Q,Q+g*B*3/2));this.onPictureReady(C,g,B)}},A}();B.RDY=0,B.PIC_RDY=1,B.HDRS_RDY=2,B.ERROR=3,B.PARAM_SET_ERROR=4,B.MEMALLOC_ERROR=5;const Q=B;var C=g(719),E=g.n(C),i={"TinyH264.wasm":"data:;base64,"},D={};function o(){var A,I=E()({locateFile:function(A){return i[A]}});return(A=I,new Promise((function(I){A.calledRun?I():A.onRuntimeInitialized=function(){return I()}}))).then((function(){self.addEventListener("message",(function(A){var g=A.data,B=g.renderStateId;switch(g.type){case"decode":var C=D[B];C||(C=new Q(I,(function(A,I,g){postMessage({type:"pictureReady",width:I,height:g,renderStateId:B,data:A.buffer},[A.buffer])})),D[B]=C),C.decode(new Uint8Array(g.data,g.offset,g.length));break;case"release":var E=D[B];E&&(E.release(),delete D[B])}})),self.postMessage({type:"decoderReady"})}))}}},I={};function g(B){var Q=I[B];if(void 0!==Q)return Q.exports;var C=I[B]={exports:{}};return A[B](C,C.exports,g),C.exports}g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var B in I)g.o(I,B)&&!g.o(A,B)&&Object.defineProperty(A,B,{enumerable:!0,get:I[B]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),g.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},(()=>{"use strict";g(340).init()})()})();',"Worker",void 0,void 0)}},614:A=>{A.exports=function(A,I,g,e){var B=self||window;try{try{var i;try{i=new B.Blob([A])}catch(I){(i=new(B.BlobBuilder||B.WebKitBlobBuilder||B.MozBlobBuilder||B.MSBlobBuilder)).append(A),i=i.getBlob()}var Q=B.URL||B.webkitURL,C=Q.createObjectURL(i),t=new B[I](C,g);return Q.revokeObjectURL(C),t}catch(e){return new B[I]("data:application/javascript,".concat(encodeURIComponent(A)),g)}}catch(A){if(!e)throw Error("Inline worker is not supported");return new B[I](e,g)}}}},I={};function g(e){var B=I[e];if(void 0!==B)return B.exports;var i=I[e]={exports:{}};return A[e].call(i.exports,i,i.exports,g),i.exports}return g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var e in I)g.o(I,e)&&!g.o(A,e)&&Object.defineProperty(A,e,{enumerable:!0,get:I[e]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),g.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},g(114)})()},53:A=>{self,A.exports=(()=>{"use strict";var A={114:function(A,I,g){var e=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(I,"__esModule",{value:!0});const B=e(g(289));I.default=class{initialize(){return new Promise(((A,I)=>{this.worker=new B.default,this.worker.addEventListener("message",(I=>{var g;const e=I.data;"decoderReady"===e.type?A(0):"decodeDone"===e.type&&(null===(g=this.onDecode)||void 0===g||g.call(this,e))}))}))}startStream(A,I,g){this.worker&&this.worker.postMessage({type:"startStream",sampleRateHz:A,channelCount:I,decodedSamplesPerFrame:g})}stopStream(){this.worker&&this.worker.postMessage({type:"stopStream"})}decode(A,I){this.worker&&this.worker.postMessage({type:"decode",startTimestamp:A,inputData:I},[I])}release(){this.worker&&this.worker.postMessage({type:"release"})}dispose(){this.worker&&(this.worker.terminate(),this.worker=void 0)}}},289:(A,I,g)=>{g.r(I),g.d(I,{default:()=>i});var e=g(614),B=g.n(e);function i(){return B()('(()=>{var A={305:A=>{var I,g=(I="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(A){var g,B;(A=void 0!==(A=A||{})?A:{}).ready=new Promise((function(A,I){g=A,B=I}));var Q,C={};for(Q in A)A.hasOwnProperty(Q)&&(C[Q]=A[Q]);var E=[],i="./this.program",D=function(A,I){throw I},o="";"undefined"!=typeof document&&document.currentScript&&(o=document.currentScript.src),I&&(o=I),o=0!==o.indexOf("blob:")?o.substr(0,o.lastIndexOf("/")+1):"";var w,F,G=A.print||console.log.bind(console),R=A.printErr||console.warn.bind(console);for(Q in C)C.hasOwnProperty(Q)&&(A[Q]=C[Q]);C=null,A.arguments&&(E=A.arguments),A.thisProgram&&(i=A.thisProgram),A.quit&&(D=A.quit),A.wasmBinary&&(w=A.wasmBinary),A.noExitRuntime&&(F=A.noExitRuntime),"object"!=typeof WebAssembly&&n("no native wasm support detected");var S=!1;function U(I){var g,B=A["_"+I];return g="Cannot call unknown function "+I+", make sure it is exported",B||n("Assertion failed: "+g),B}function a(A,I,g,B,Q){var C={string:function(A){var I=0;if(null!=A&&0!==A){var g=1+(A.length<<2);!function(A,I,g){J(A,k,I,g)}(A,I=V(g),g)}return I},array:function(A){var I,g,B=V(A.length);return I=A,g=B,s.set(I,g),B}},E=U(A),i=[],D=0;if(B)for(var o=0;o<B.length;o++){var w=C[g[o]];w?(0===D&&(D=X()),i[o]=w(B[o])):i[o]=B[o]}var F=E.apply(null,i);return F=function(A){return"string"===I?H(A):"boolean"===I?Boolean(A):A}(F),0!==D&&Z(D),F}var s,k,h,N="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function y(A,I,g){for(var B=I+g,Q=I;A[Q]&&!(Q>=B);)++Q;if(Q-I>16&&A.subarray&&N)return N.decode(A.subarray(I,Q));for(var C="";I<Q;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var D=63&A[I++];if((E=224==(240&E)?(15&E)<<12|i<<6|D:(7&E)<<18|i<<12|D<<6|63&A[I++])<65536)C+=String.fromCharCode(E);else{var o=E-65536;C+=String.fromCharCode(55296|o>>10,56320|1023&o)}}else C+=String.fromCharCode((31&E)<<6|i)}else C+=String.fromCharCode(E)}return C}function H(A,I){return A?y(k,A,I):""}function J(A,I,g,B){if(!(B>0))return 0;for(var Q=g,C=g+B-1,E=0;E<A.length;++E){var i=A.charCodeAt(E);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&A.charCodeAt(++E)),i<=127){if(g>=C)break;I[g++]=i}else if(i<=2047){if(g+1>=C)break;I[g++]=192|i>>6,I[g++]=128|63&i}else if(i<=65535){if(g+2>=C)break;I[g++]=224|i>>12,I[g++]=128|i>>6&63,I[g++]=128|63&i}else{if(g+3>=C)break;I[g++]=240|i>>18,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}}return I[g]=0,g-Q}function L(A){var I=function(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&(B=65536+((1023&B)<<10)|1023&A.charCodeAt(++g)),B<=127?++I:I+=B<=2047?2:B<=65535?3:4}return I}(A)+1,g=V(I);return J(A,s,g,I),g}A.INITIAL_MEMORY;var q,M=[],K=[],c=[],Y=[];K.push({func:function(){l()}});var d=0,P=null,t=null;function n(I){A.onAbort&&A.onAbort(I),R(I+=""),S=!0,I="abort("+I+"). Build with -s ASSERTIONS=1 for more info.";var g=new WebAssembly.RuntimeError(I);throw B(g),g}A.preloadedImages={},A.preloadedAudios={};var r="data:application/octet-stream;base64,";function f(A){return I=A,g=r,String.prototype.startsWith?I.startsWith(g):0===I.indexOf(g);var I,g}var W,b="data:application/octet-stream;base64,";function e(A){try{if(A==b&&w)return new Uint8Array(w);var I=function(A){if(f(A))return function(A){try{for(var I=p(A),g=new Uint8Array(I.length),B=0;B<I.length;++B)g[B]=I.charCodeAt(B);return g}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(r.length))}(A);if(I)return I;throw"both async and sync fetching of the wasm failed"}catch(A){n(A)}}function x(I){for(;I.length>0;){var g=I.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?q.get(B)():q.get(B)(g.arg):B(void 0===g.arg?null:g.arg)}else g(A)}}f(b)||(W=b,b=A.locateFile?A.locateFile(W,o):o+W);var v={mappings:{},buffers:[null,[],[]],printChar:function(A,I){var g=v.buffers[A];0===I||10===I?((1===A?G:R)(y(g,0)),g.length=0):g.push(I)},varargs:void 0,get:function(){return v.varargs+=4,h[v.varargs-4>>2]},getStr:function(A){return H(A)},get64:function(A,I){return A}},p="function"==typeof atob?atob:function(A){var I,g,B,Q,C,E,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",D="",o=0;A=A.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");do{I=i.indexOf(A.charAt(o++))<<2|(Q=i.indexOf(A.charAt(o++)))>>4,g=(15&Q)<<4|(C=i.indexOf(A.charAt(o++)))>>2,B=(3&C)<<6|(E=i.indexOf(A.charAt(o++))),D+=String.fromCharCode(I),64!==C&&(D+=String.fromCharCode(g)),64!==E&&(D+=String.fromCharCode(B))}while(o<A.length);return D};var T,O={b:function(A,I,g){k.copyWithin(A,I,I+g)},c:function(A){n("OOM")},a:function(A,I,g,B){for(var Q=0,C=0;C<g;C++){for(var E=h[I+8*C>>2],i=h[I+(8*C+4)>>2],D=0;D<i;D++)v.printChar(A,k[E+D]);Q+=i}return h[B>>2]=Q,0}},l=(function(){var I={a:O};function g(I,g){var B,Q=I.exports;A.asm=Q,B=A.asm.d.buffer,A.HEAP8=s=new Int8Array(B),A.HEAP16=new Int16Array(B),A.HEAP32=h=new Int32Array(B),A.HEAPU8=k=new Uint8Array(B),A.HEAPU16=new Uint16Array(B),A.HEAPU32=new Uint32Array(B),A.HEAPF32=new Float32Array(B),A.HEAPF64=new Float64Array(B),q=A.asm.e,function(I){if(d--,A.monitorRunDependencies&&A.monitorRunDependencies(d),0==d&&(null!==P&&(clearInterval(P),P=null),t)){var g=t;t=null,g()}}()}function Q(A){g(A.instance)}function C(A){return(w||"function"!=typeof fetch?Promise.resolve().then((function(){return e(b)})):fetch(b,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at \'"+b+"\'";return A.arrayBuffer()})).catch((function(){return e(b)}))).then((function(A){return WebAssembly.instantiate(A,I)})).then(A,(function(A){R("failed to asynchronously prepare wasm: "+A),n(A)}))}if(d++,A.monitorRunDependencies&&A.monitorRunDependencies(d),A.instantiateWasm)try{return A.instantiateWasm(I,g)}catch(A){return R("Module.instantiateWasm callback failed with error: "+A),!1}(w||"function"!=typeof WebAssembly.instantiateStreaming||f(b)||"function"!=typeof fetch?C(Q):fetch(b,{credentials:"same-origin"}).then((function(A){return WebAssembly.instantiateStreaming(A,I).then(Q,(function(A){return R("wasm streaming compile failed: "+A),R("falling back to ArrayBuffer instantiation"),C(Q)}))}))).catch(B)}(),A.___wasm_call_ctors=function(){return(l=A.___wasm_call_ctors=A.asm.f).apply(null,arguments)}),X=(A._stopStream=function(){return(A._stopStream=A.asm.g).apply(null,arguments)},A._startStream=function(){return(A._startStream=A.asm.h).apply(null,arguments)},A._decode=function(){return(A._decode=A.asm.i).apply(null,arguments)},A._createBuffer=function(){return(A._createBuffer=A.asm.j).apply(null,arguments)},A._freeBuffer=function(){return(A._freeBuffer=A.asm.k).apply(null,arguments)},A._main=function(){return(A._main=A.asm.l).apply(null,arguments)},A.stackSave=function(){return(X=A.stackSave=A.asm.m).apply(null,arguments)}),Z=A.stackRestore=function(){return(Z=A.stackRestore=A.asm.n).apply(null,arguments)},V=A.stackAlloc=function(){return(V=A.stackAlloc=A.asm.o).apply(null,arguments)};function z(A){this.name="ExitStatus",this.message="Program terminated with exit("+A+")",this.status=A}function j(I){function B(){T||(T=!0,A.calledRun=!0,S||(x(K),x(c),g(A),A.onRuntimeInitialized&&A.onRuntimeInitialized(),u&&function(I){var g,B=A._main,Q=(I=I||[]).length+1,C=V(4*(Q+1));h[C>>2]=L(i);for(var E=1;E<Q;E++)h[(C>>2)+E]=L(I[E-1]);h[(C>>2)+Q]=0;try{g=B(Q,C),F&&0===g||(F||(A.onExit&&A.onExit(g),S=!0),D(g,new z(g)))}catch(A){if(A instanceof z)return;if("unwind"==A)return void(F=!0);var o=A;A&&"object"==typeof A&&A.stack&&(o=[A,A.stack]),R("exception thrown: "+o),D(1,A)}}(I),function(){if(A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)I=A.postRun.shift(),Y.unshift(I);var I;x(Y)}()))}I=I||E,d>0||(function(){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)I=A.preRun.shift(),M.unshift(I);var I;x(M)}(),d>0||(A.setStatus?(A.setStatus("Running..."),setTimeout((function(){setTimeout((function(){A.setStatus("")}),1),B()}),1)):B()))}if(A.cwrap=function(A,I,g,B){var Q=(g=g||[]).every((function(A){return"number"===A}));return"string"!==I&&Q&&!B?U(A):function(){return a(A,I,g,arguments)}},t=function A(){T||j(),T||(t=A)},A.run=j,A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);A.preInit.length>0;)A.preInit.pop()();var u=!0;return A.noInitialRun&&(u=!1),F=!0,j(),A.ready});A.exports=g}},I={};function g(B){var Q=I[B];if(void 0!==Q)return Q.exports;var C=I[B]={exports:{}};return A[B](C,C.exports,g),C.exports}g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var B in I)g.o(I,B)&&!g.o(A,B)&&Object.defineProperty(A,B,{enumerable:!0,get:I[B]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),(()=>{"use strict";var A,I=g(305),B=g.n(I),Q=0,C=0,E=0,i=0,D=0,o=0;!async function(){A=await B()(),self.addEventListener("message",(async function(I){var g=I.data;switch(g.type){case"startStream":o=g.decodedSamplesPerFrame,D=o*g.channelCount,A._startStream(g.sampleRateHz,g.channelCount);break;case"stopStream":A._stopStream();break;case"decode":{const I=g.startTimestamp,B=function(I){const g=I.byteLength;return 0!=Q&&C<g&&(A._freeBuffer(Q),Q=0,C=0),0==Q&&(Q=A._createBuffer(I.BYTES_PER_ELEMENT*g),C=g),A.HEAPU8.set(I,Q),Q}(new Uint8Array(g.inputData)),w=(0!=E&&i<D&&(A._freeBuffer(E),E=0,i=0),0==E&&(E=A._createBuffer(Float32Array.BYTES_PER_ELEMENT*D),i=D),E),F=new Float32Array(A.HEAPF32.buffer,w,D),G=A._decode(B,g.inputData.byteLength,w,o),R=F.buffer.slice(w,w+D*F.BYTES_PER_ELEMENT);postMessage({type:"decodeDone",startTimestamp:I,outputData:R,samplesDecoded:G},[R]);break}case"release":0!=Q&&(A._freeBuffer(Q),Q=0,C=0),0!=E&&(A._freeBuffer(E),E=0,i=0),A._stopStream()}})),postMessage({type:"decoderReady"})}()})()})();',"Worker",void 0,void 0)}},614:A=>{A.exports=function(A,I,g,e){var B=self||window;try{try{var i;try{i=new B.Blob([A])}catch(I){(i=new(B.BlobBuilder||B.WebKitBlobBuilder||B.MozBlobBuilder||B.MSBlobBuilder)).append(A),i=i.getBlob()}var Q=B.URL||B.webkitURL,C=Q.createObjectURL(i),t=new B[I](C,g);return Q.revokeObjectURL(C),t}catch(e){return new B[I]("data:application/javascript,".concat(encodeURIComponent(A)),g)}}catch(A){if(!e)throw Error("Inline worker is not supported");return new B[I](e,g)}}}},I={};function g(e){var B=I[e];if(void 0!==B)return B.exports;var i=I[e]={exports:{}};return A[e].call(i.exports,i,i.exports,g),i.exports}return g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var e in I)g.o(I,e)&&!g.o(A,e)&&Object.defineProperty(A,e,{enumerable:!0,get:I[e]})},g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),g.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},g(114)})()},700:()=>{}},I={};function g(e){var B=I[e];if(void 0!==B)return B.exports;var i=I[e]={exports:{}};return A[e].call(i.exports,i,i.exports,g),i.exports}return g.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(A){if("object"==typeof window)return window}}(),g(14)})()}));

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/style.css":
/*!***********************!*\
  !*** ./src/style.css ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var api = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../node_modules/postcss-loader/src/index.js??ruleSet[1].rules[2].use[2]!./style.css */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!./node_modules/postcss-loader/src/index.js??ruleSet[1].rules[2].use[2]!./src/style.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "./src/sandbox.ts":
/*!************************!*\
  !*** ./src/sandbox.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamSandbox": () => (/* binding */ StreamSandbox)
/* harmony export */ });
/* harmony import */ var rainway_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rainway-sdk */ "./node_modules/rainway-sdk/dist/index.js");
/* harmony import */ var rainway_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rainway_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared */ "./src/shared.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


let config = {};
try {
    config = __webpack_require__(/*! ../local-config.json */ "./local-config.json");
}
catch (e) { }
let sandboxApiKey = localStorage.getItem("api-key") || config.apiKey || "NO_KEY";
const allInput = rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Keyboard | rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Mouse | rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Gamepad;
const isDesktopSafari = /Macintosh;.*Safari/.test(navigator.userAgent) &&
    !/Chrome|Android/i.test(navigator.userAgent);
var SandboxState;
(function (SandboxState) {
    SandboxState[SandboxState["Disconnected"] = 0] = "Disconnected";
    SandboxState[SandboxState["ConnectingToRelay"] = 1] = "ConnectingToRelay";
    SandboxState[SandboxState["ConnectedToRelay"] = 2] = "ConnectedToRelay";
})(SandboxState || (SandboxState = {}));
var SandboxWidgetState;
(function (SandboxWidgetState) {
    SandboxWidgetState[SandboxWidgetState["Disconnected"] = 0] = "Disconnected";
    SandboxWidgetState[SandboxWidgetState["ConnectingToHost"] = 1] = "ConnectingToHost";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostNoStream"] = 2] = "ConnectedToHostNoStream";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostReadyToStream"] = 3] = "ConnectedToHostReadyToStream";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostStreaming"] = 4] = "ConnectedToHostStreaming";
})(SandboxWidgetState || (SandboxWidgetState = {}));
class StreamWidget {
    constructor(runtime, widgetClassName) {
        // Bind some DOM elements and set up listeners
        var _a, _b;
        this.runtime = runtime;
        this.widgetClassName = widgetClassName;
        this.state = SandboxWidgetState.Disconnected;
        this.getElement = (className) => document.querySelector(`.${this.widgetClassName} .${className}`);
        this.peerId = this.getElement("peer-id");
        this.fullscreenButton = this.getElement("fullscreen-button");
        this.pauseButton = this.getElement("pause-button");
        this.statsButton = this.getElement("stats-button");
        this.chatHistory = this.getElement("chat-history");
        this.chatInput = this.getElement("chat-input");
        this.chatSendButton = this.getElement("chat-send-button");
        this.fullscreenButton.addEventListener("click", () => {
            var _a;
            (_a = this.stream) === null || _a === void 0 ? void 0 : _a.requestFullscreen();
        });
        this.statsButton.addEventListener("click", () => {
            var _a, _b;
            if (this.statsButton.innerText === "Show stats") {
                (_a = this.stream) === null || _a === void 0 ? void 0 : _a.enableVideoStatsOverlay();
                this.statsButton.innerText = "Hide stats";
            }
            else {
                (_b = this.stream) === null || _b === void 0 ? void 0 : _b.disableVideoStatsOverlay();
                this.statsButton.innerText = "Show stats";
            }
        });
        this.pauseButton.addEventListener("click", () => {
            var _a, _b;
            if (this.pauseButton.innerText === "Pause") {
                (_a = this.stream) === null || _a === void 0 ? void 0 : _a.pause();
                this.pauseButton.innerText = "Play";
            }
            else {
                (_b = this.stream) === null || _b === void 0 ? void 0 : _b.play();
                this.pauseButton.innerText = "Pause";
            }
        });
        this.chatInput.addEventListener("keydown", (e) => {
            if (e.key === "Enter")
                this.chatSendButton.click();
        });
        this.chatSendButton.addEventListener("click", () => {
            this.sendChatMessage(this.chatInput.value);
        });
        const startStreamButton = this.getElement("start-stream-button");
        const stopStreamButton = this.getElement("stop-stream-button");
        startStreamButton.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {
            var _c;
            if (this.peer === undefined)
                throw new rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayError("no peer to stream");
            const stream = yield this.peer.requestStream(allInput);
            this.stream = stream;
            this.setUIState(SandboxWidgetState.ConnectedToHostStreaming);
            (_c = this.getElement("stream-wrapper")) === null || _c === void 0 ? void 0 : _c.appendChild(stream.container);
            console.log(stream);
        }));
        stopStreamButton.addEventListener("click", () => {
            var _a;
            (_a = this.stream) === null || _a === void 0 ? void 0 : _a.leave();
        });
        // Populate peerId from config, then localStorage, and finally default to "000000000000000000"
        this.peerId.value =
            (_b = (_a = config.peerId) !== null && _a !== void 0 ? _a : localStorage.getItem("peer-id-" + widgetClassName)) !== null && _b !== void 0 ? _b : "000000000000000000";
        // Persist peerId to localStorage for convenience
        this.peerId.addEventListener("change", () => {
            localStorage.setItem("peer-id-" + widgetClassName, this.peerId.value);
        });
        this.getElement("connect-to-host-button").addEventListener("click", (e) => this.connectToHost());
        this.getElement("disconnect-from-host-button").addEventListener("click", (e) => this.disconnectFromHost());
        this.setUIState(SandboxWidgetState.Disconnected);
    }
    /** Send UTF-8 encoded message to peer over arbitrary messaging channel and display in the chatbox. */
    sendChatMessage(message) {
        if (this.peer) {
            this.peer.send(new TextEncoder().encode(message));
            this.displayChatMessage("You", message);
            this.chatInput.value = "";
        }
    }
    /** Add a message to the chatbox element. */
    displayChatMessage(speaker, message) {
        const p = document.createElement("p");
        const span = document.createElement("span");
        span.appendChild(document.createTextNode(speaker + ":"));
        p.appendChild(span);
        p.appendChild(document.createTextNode("\u00a0" + message));
        this.chatHistory.appendChild(p);
    }
    /** Add an "info" message to the chatbox. */
    displayChatInfo(message) {
        const p = document.createElement("p");
        p.appendChild(document.createTextNode(message));
        p.className = "chat-info";
        this.chatHistory.appendChild(p);
    }
    enableInputs(className, enabled) {
        const a = document.querySelectorAll(`.${this.widgetClassName} .${className}`);
        for (let i = 0; i < a.length; i++) {
            a[i].disabled = !enabled;
        }
    }
    /** Short version of peerId. */
    hostNickname() {
        return this.peerId.value.substring(29);
    }
    showError(e) {
        const error = String(e).replace(/^(.*Error: )+/, "");
        this.getElement("rainway-client-state").innerText = error;
    }
    /** Connect to a stream hosting-capable peer. Will connect parent runtime to instant relay first if not connected. */
    connectToHost() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.runtime === undefined)
                throw new Error();
            yield this.runtime.connectToGateway();
            this.setUIState(SandboxWidgetState.ConnectingToHost);
            try {
                this.peer = yield this.runtime.connect(BigInt(this.peerId.value));
            }
            catch (e) {
                this.setUIState(SandboxWidgetState.Disconnected);
                this.showError(e);
                return;
            }
            this.setUIState(SandboxWidgetState.ConnectedToHostNoStream);
            this.displayChatInfo(`Connected to ${this.hostNickname()}. Say hi!`);
            yield this.peer.readyToStream;
            this.setUIState(SandboxWidgetState.ConnectedToHostReadyToStream);
            this.displayChatInfo("Ready to stream.");
        });
    }
    /** Disconnect from peer or cancel connection attempt in progress. */
    disconnectFromHost() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.runtime === undefined)
                throw new Error();
            this.setUIState(SandboxWidgetState.Disconnected);
            if (this.peer === undefined) {
                this.runtime.cancelConnectionAttempt(BigInt(this.peerId.value));
                return;
            }
            this.peer.disconnect();
        });
    }
    /** Set new state and update UI appropriately. */
    setUIState(newState) {
        const S = SandboxWidgetState;
        const descriptions = {
            [S.Disconnected]: "Disconnected",
            [S.ConnectingToHost]: "Connecting to host...",
            [S.ConnectedToHostNoStream]: "Connected (preparing stream...)",
            [S.ConnectedToHostReadyToStream]: "Connected (ready to stream)",
            [S.ConnectedToHostStreaming]: "Streaming",
        };
        this.getElement("rainway-client-state").innerText = descriptions[newState];
        this.enableInputs("when-no-host", newState === S.Disconnected);
        this.enableInputs("when-host-or-connecting", newState >= S.ConnectingToHost);
        this.enableInputs("when-host", newState >= S.ConnectedToHostNoStream);
        this.enableInputs("when-ready-to-stream", newState === S.ConnectedToHostReadyToStream);
        this.enableInputs("when-streaming", newState >= S.ConnectedToHostStreaming);
        this.state = newState;
    }
}
class StreamSandbox {
    /**
     * Construct a sandbox with a number of widgets. Each widget can host a stream from a different peer.
     * Populated from url query param by default */
    constructor(numWidgets) {
        var _a, _b, _c, _d;
        this.numWidgets = numWidgets;
        this.state = SandboxState.Disconnected;
        this.widgets = [];
        this.querySelector = (query) => document.querySelector(query);
        this.handleLog = (level, message) => {
            if (level >= this.minimumLogLevel) {
                (0,shared__WEBPACK_IMPORTED_MODULE_1__.consoleLog)(level, message);
            }
        };
        const template = this.querySelector("template.widget");
        const templateDiv = template.content.firstElementChild;
        for (let i = 1; i <= this.numWidgets; i++) {
            const w = templateDiv.cloneNode(true);
            w.className = `widget widget${i}`;
            this.querySelector(".widgets").appendChild(w);
        }
        ;
        this.querySelector(".api-key").value = sandboxApiKey;
        this.querySelector(".api-key").addEventListener("change", (event) => {
            localStorage.setItem("api-key", event.target.value);
            sandboxApiKey = event.target.value;
        });
        this.querySelector(".connect-to-relay-button").addEventListener("click", () => this.connectToRelay());
        this.querySelector(".disconnect-from-relay-button").addEventListener("click", () => this.disconnectFromRelay());
        this.runtime = undefined;
        let config = {};
        try {
            config = __webpack_require__(/*! ../local-config.json */ "./local-config.json");
        }
        catch (e) { }
        this.minimumLogLevel = (_a = config.minimumLogLevel) !== null && _a !== void 0 ? _a : rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Debug;
        this.logVideoStats = (_b = config.logVideoStats) !== null && _b !== void 0 ? _b : false;
        this.logTransportStats = (_c = config.logTransportStats) !== null && _c !== void 0 ? _c : false;
        this.rainwayLogsInConsole = (_d = config.rainwayLogsInConsole) !== null && _d !== void 0 ? _d : true;
    }
    enableInputs(className, enabled) {
        const a = document.querySelectorAll("." + className);
        for (let i = 0; i < a.length; i++) {
            a[i].disabled = !enabled;
        }
    }
    /** Instantiate runtime if not yet built, connect it to instant relay. */
    connectToRelay() {
        return __awaiter(this, void 0, void 0, function* () {
            // Make and attach the Rainway client.
            this.setUIState(SandboxState.ConnectingToRelay);
            if (!this.runtime) {
                this.runtime = yield rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayRuntime.initialize({
                    apiKey: sandboxApiKey,
                    externalId: "web-sdk-demo-sandbox",
                    // Listener for instant relay connection loss
                    onRuntimeConnectionLost: (error) => {
                        console.log("Connection lost:", error);
                        this.setUIState(SandboxState.Disconnected);
                    },
                    // Listener for incoming connection requests
                    onConnectionRequest: (request) => {
                        // Auto-accept every request.
                        request.accept();
                    },
                    // Listener for incoming arbitrary messages
                    onPeerMessage: (peer, data) => {
                        // the only arbitrary messages we're listening for are basic chat messages
                        const w = this.widgets.find((w) => w.peer === peer);
                        if (w === undefined)
                            return;
                        w.displayChatMessage(w.hostNickname(), new TextDecoder().decode(data));
                    },
                    // Listener for errors from particular peers
                    onPeerError: (peer, error) => { },
                    // Listener for when a peer finishes connecting
                    onPeerConnect: (peer) => { },
                    // Listener for peer disconnect
                    onPeerDisconnect: (peer) => {
                        // remove appropriate stream container when a peer disconnects
                        const w = this.widgets.find((w) => w.peer === peer);
                        if (w === undefined)
                            return;
                        w.peer = undefined;
                        if (w.state > SandboxWidgetState.Disconnected) {
                            w.setUIState(SandboxWidgetState.Disconnected);
                        }
                        if (w.stream !== undefined)
                            w.stream.container.remove();
                    },
                    // Listener for peer stream announcement. Hosts can announce streams to clients.
                    // Don't do anything when a peer announces a stream (currently)
                    onStreamAnnouncement: (peer, announcement) => { },
                    // Listener for stream stop
                    onStreamStop: (stream) => {
                        // When the stream stops, remove the container from the DOM
                        const w = this.widgets.find((w) => { var _a; return ((_a = w.peer) === null || _a === void 0 ? void 0 : _a.stream) === stream; });
                        if (w === undefined)
                            return;
                        stream.container.remove();
                        if (w.state > SandboxWidgetState.ConnectedToHostReadyToStream) {
                            w.setUIState(SandboxWidgetState.ConnectedToHostReadyToStream);
                        }
                    },
                    // logSink is just a function that accepts a loglevel and a string
                    // all internal SDK logs will be sent there
                    logSink: this.handleLog.bind(this),
                });
            }
            // This call is not strictly necessary if the runtime was just constructed:
            yield this.runtime.connectToGateway();
            // The runtime automatically connects to instant relay when initialized.
            this.setUIState(SandboxState.ConnectedToRelay);
            if (this.widgets.length === 0) {
                for (let i = 1; i <= this.numWidgets; i++) {
                    this.widgets.push(new StreamWidget(this.runtime, `widget${i}`));
                    this.querySelector(`.widget${i}`).hidden = false;
                }
            }
        });
    }
    /** Set state and update UI appropriately. */
    setUIState(newState) {
        var _a;
        const S = SandboxState;
        const descriptions = {
            [S.Disconnected]: "Disconnected",
            [S.ConnectingToRelay]: "Connecting...",
            [S.ConnectedToRelay]: "Connected to Gateway as " + ((_a = this.runtime) === null || _a === void 0 ? void 0 : _a.getPeerId()),
        };
        this.querySelector(".rainway-outer-state").innerText = descriptions[newState];
        this.enableInputs("when-no-relay", newState === S.Disconnected);
        this.enableInputs("when-relay", newState >= S.ConnectedToRelay);
        this.state = newState;
    }
    /** Disconnect from instant relay. Runtime can be reconnected later. */
    disconnectFromRelay() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = this.runtime) === null || _a === void 0 ? void 0 : _a.disconnectFromGateway();
            this.setUIState(SandboxState.Disconnected);
        });
    }
}


/***/ }),

/***/ "./src/shared.ts":
/*!***********************!*\
  !*** ./src/shared.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "config": () => (/* binding */ config),
/* harmony export */   "allInput": () => (/* binding */ allInput),
/* harmony export */   "isDesktopSafari": () => (/* binding */ isDesktopSafari),
/* harmony export */   "SandboxState": () => (/* binding */ SandboxState),
/* harmony export */   "SandboxWidgetState": () => (/* binding */ SandboxWidgetState),
/* harmony export */   "consoleLog": () => (/* binding */ consoleLog)
/* harmony export */ });
/* harmony import */ var rainway_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rainway-sdk */ "./node_modules/rainway-sdk/dist/index.js");
/* harmony import */ var rainway_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rainway_sdk__WEBPACK_IMPORTED_MODULE_0__);

let config = {};
try {
    config = __webpack_require__(/*! ../local-config.json */ "./local-config.json");
}
catch (e) { }
const allInput = rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Keyboard | rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Mouse | rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.InputLevel.Gamepad;
const isDesktopSafari = /Macintosh;.*Safari/.test(navigator.userAgent) &&
    !/Chrome|Android/i.test(navigator.userAgent);
var SandboxState;
(function (SandboxState) {
    SandboxState[SandboxState["Disconnected"] = 0] = "Disconnected";
    SandboxState[SandboxState["ConnectingToRelay"] = 1] = "ConnectingToRelay";
    SandboxState[SandboxState["ConnectedToRelay"] = 2] = "ConnectedToRelay";
})(SandboxState || (SandboxState = {}));
var SandboxWidgetState;
(function (SandboxWidgetState) {
    SandboxWidgetState[SandboxWidgetState["Disconnected"] = 0] = "Disconnected";
    SandboxWidgetState[SandboxWidgetState["ConnectingToHost"] = 1] = "ConnectingToHost";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostNoStream"] = 2] = "ConnectedToHostNoStream";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostReadyToStream"] = 3] = "ConnectedToHostReadyToStream";
    SandboxWidgetState[SandboxWidgetState["ConnectedToHostStreaming"] = 4] = "ConnectedToHostStreaming";
})(SandboxWidgetState || (SandboxWidgetState = {}));
const consoleLog = (level, message) => {
    if (level >= rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Error) {
        console.error(message);
    }
    else if (level >= rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Warning) {
        console.warn(message);
    }
    else if (level >= rainway_sdk__WEBPACK_IMPORTED_MODULE_0__.RainwayLogLevel.Information) {
        console.info(message);
    }
    else {
        console.log(message);
    }
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var sandbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sandbox */ "./src/sandbox.ts");
/* harmony import */ var style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style.css */ "./src/style.css");
/* harmony import */ var style_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(style_css__WEBPACK_IMPORTED_MODULE_1__);
var _a;


const ss = new sandbox__WEBPACK_IMPORTED_MODULE_0__.StreamSandbox(Number((_a = new URLSearchParams(window.location.search).get("widgets")) !== null && _a !== void 0 ? _a : "1"));

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,